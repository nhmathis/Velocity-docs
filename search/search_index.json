{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UrbanCode Velocity V1.1.0 documentation Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity. Getting started Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0 Using UrbanCode Velocity Administration Reports How to Copyright HCL 2018","title":"UrbanCode Velocity V1.1.0 documentation"},{"location":"#urbancode-velocity-v110-documentation","text":"Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity.","title":"UrbanCode Velocity V1.1.0 documentation"},{"location":"#getting-started","text":"Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0","title":"Getting started"},{"location":"#using-urbancode-velocity","text":"Administration Reports How to Copyright HCL 2018","title":"Using UrbanCode Velocity"},{"location":"ucv_version_welcome/","text":"UrbanCode Velocity V1.1.0 documentation Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity. Getting started Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0 Using UrbanCode Velocity Administration Reports How to Copyright HCL 2018","title":"Welcome"},{"location":"ucv_version_welcome/#urbancode-velocity-v110-documentation","text":"Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity.","title":"UrbanCode Velocity V1.1.0 documentation"},{"location":"ucv_version_welcome/#getting-started","text":"Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0","title":"Getting started"},{"location":"ucv_version_welcome/#using-urbancode-velocity","text":"Administration Reports How to Copyright HCL 2018","title":"Using UrbanCode Velocity"},{"location":"com.ibm.crelease.doc/topics/c_node_releases/","text":"Release management A release is a container for deployment plans, events, and properties. A release is a repeatable plan that is used to drive deployments. You can schedule a release at any point in your development-operations lifecycle. Your releases can represent all kinds of events, from major events in the life of your company to comparatively minor events, like recurring maintenance. Typically, a release contains deployment plans and events that are related in some business-meaningful way. For example, the deployment plans might represent the phases in a software development lifecycle, such as development, QA, and production. An event might represent a blackout that affects the release. If a deployment plan in a release has user-defined properties, the tasks in the release's other deployment plans can reference them. In other words, properties have release scope. If you add events to a release, you can use the calendar to filter the Releases page to display releases and deployment plans. You can use pipelines to manage releases. Every application added to a pipeline has release and deployment plan templates generated for it. As jobs and apps are added to a pipeline, tasks are inserted in the default deployment plan. You can run deployments directly from the Pipeline page or from the Deployment plan detail page. Managing a release Use the release details page to view details about a specific release. Managing releases Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases. Creating releases Archiving releases You can archive a release to remove it from the list of releases. Events and tags An event represents a release-related activity that you manage with the calendar. A tag is a label that you can add to a release or an event. You can use tags to filter the Activities list on the Releases page. Tags do not appear on the calendar. Restoring archived releases, plans, and templates You can restore archived releases, deployment plans, and templates. Deployment plans A deployment plan is a container for tasks. Tasks define the activities that your team runs to complete a software deployment. Running deployments Complete deployments by resolving the tasks in a deployment plan. Tasks A task represents a business-meaningful activity that is associated with a software deployment. Each task is defined on a separate row in a deployment plan. During a deployment, you run tasks defined in the deployment plan to complete the deployment. Using properties A deployment plan can contain user-defined properties. Properties values can be defined at design- or run-time.","title":"Release management overview"},{"location":"com.ibm.crelease.doc/topics/c_node_releases/#release-management","text":"A release is a container for deployment plans, events, and properties. A release is a repeatable plan that is used to drive deployments. You can schedule a release at any point in your development-operations lifecycle. Your releases can represent all kinds of events, from major events in the life of your company to comparatively minor events, like recurring maintenance. Typically, a release contains deployment plans and events that are related in some business-meaningful way. For example, the deployment plans might represent the phases in a software development lifecycle, such as development, QA, and production. An event might represent a blackout that affects the release. If a deployment plan in a release has user-defined properties, the tasks in the release's other deployment plans can reference them. In other words, properties have release scope. If you add events to a release, you can use the calendar to filter the Releases page to display releases and deployment plans. You can use pipelines to manage releases. Every application added to a pipeline has release and deployment plan templates generated for it. As jobs and apps are added to a pipeline, tasks are inserted in the default deployment plan. You can run deployments directly from the Pipeline page or from the Deployment plan detail page. Managing a release Use the release details page to view details about a specific release. Managing releases Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases. Creating releases Archiving releases You can archive a release to remove it from the list of releases. Events and tags An event represents a release-related activity that you manage with the calendar. A tag is a label that you can add to a release or an event. You can use tags to filter the Activities list on the Releases page. Tags do not appear on the calendar. Restoring archived releases, plans, and templates You can restore archived releases, deployment plans, and templates. Deployment plans A deployment plan is a container for tasks. Tasks define the activities that your team runs to complete a software deployment. Running deployments Complete deployments by resolving the tasks in a deployment plan. Tasks A task represents a business-meaningful activity that is associated with a software deployment. Each task is defined on a separate row in a deployment plan. During a deployment, you run tasks defined in the deployment plan to complete the deployment. Using properties A deployment plan can contain user-defined properties. Properties values can be defined at design- or run-time.","title":"Release management"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_archive/","text":"Archiving deployment plans You can remove deployment plans from releases by archiving them. Deployment plans cannot be permanently deleted, but can be archived. When you archive a deployment plan, it has a status of Archived and is not displayed in the list of plans on a release detail page. You can view archived deployment plans and restore them by clicking Archived on the Releases page. Click the Plan tab for a release to view a list of associated deployment plans. Click the Overflow menu icon ( ) and click Archive this plan on the line of the plan to be archived. Repeat this step for each plan to be archived. Parent topic: Deployment plans","title":"Archiving deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_archive/#archiving-deployment-plans","text":"You can remove deployment plans from releases by archiving them. Deployment plans cannot be permanently deleted, but can be archived. When you archive a deployment plan, it has a status of Archived and is not displayed in the list of plans on a release detail page. You can view archived deployment plans and restore them by clicking Archived on the Releases page. Click the Plan tab for a release to view a list of associated deployment plans. Click the Overflow menu icon ( ) and click Archive this plan on the line of the plan to be archived. Repeat this step for each plan to be archived. Parent topic: Deployment plans","title":"Archiving deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_create/","text":"Creating deployment plans You can start with a blank plan that has no defined tasks, copy an existing plan, or start with a plan template. You can also auto-create them by assigning applications to pipelines. When you copy a plan or use a template, many tasks are already defined. Complete the following steps to create a deployment plan: On the Releases Detail page, click Create Deployment Plan . On the Create Deployment Plan window, in the Deployment plan template list, specify the template that you want to base the plan on. The default value is None . In the Plan name field, enter the plan name. In the Team list, select a team to manage the plan. All teams that you are a member of are available. Team members can modify the plan and manage tasks. The UrbanCode Deploy applications that are managed by the team in UrbanCode Deploy are available to assign to UrbanCode Deploy type tasks. To schedule a deployment for the plan, click Start time , and then select a date and time for the deployment. Scheduled deployments automatically start at the scheduled time if the plan contains eligible auto tasks. You can schedule a deployment for any future time. In the Tags list, select tags that you want to add to the plan. Click Save . If you created the plan on a Release Detail page, the plan is part of the selected release. After you save the plan, click Edit to modify plan details. Parent topic: Deployment plans","title":"Creating deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_create/#creating-deployment-plans","text":"You can start with a blank plan that has no defined tasks, copy an existing plan, or start with a plan template. You can also auto-create them by assigning applications to pipelines. When you copy a plan or use a template, many tasks are already defined. Complete the following steps to create a deployment plan: On the Releases Detail page, click Create Deployment Plan . On the Create Deployment Plan window, in the Deployment plan template list, specify the template that you want to base the plan on. The default value is None . In the Plan name field, enter the plan name. In the Team list, select a team to manage the plan. All teams that you are a member of are available. Team members can modify the plan and manage tasks. The UrbanCode Deploy applications that are managed by the team in UrbanCode Deploy are available to assign to UrbanCode Deploy type tasks. To schedule a deployment for the plan, click Start time , and then select a date and time for the deployment. Scheduled deployments automatically start at the scheduled time if the plan contains eligible auto tasks. You can schedule a deployment for any future time. In the Tags list, select tags that you want to add to the plan. Click Save . If you created the plan on a Release Detail page, the plan is part of the selected release. After you save the plan, click Edit to modify plan details. Parent topic: Deployment plans","title":"Creating deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_importTasks/","text":"Importing tasks into deployment plans You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. You can import tasks from CSV files that are exported from UrbanCode Release or another application capable of creating CSV files. When you import a deployment plan from UrbanCode Release, segments are converted into groups with the same execution pattern as the original segments. Segment tasks are bracketed by note-type Start Segment and End Segment tasks. Task dependencies are preserved during import. Segment dependencies are represented by dependencies to End Segment tasks. To learn about deployment plans exported from UrbanCode Release, download the SamplePlan.csv file from the Import Tasks dialog. Note: When you import tasks, tasks that are already defined in the deployment plan are overwritten and replaced by the tasks in the CSV file. The following table contains the fields that define a task in an UrbanCode Release deployment plan. The first row in the CSV file contains the column headers, which correspond to the table's Field column. The rows after the first row contain task data, one task per row. The order of the columns does not matter. Note: If you are creating tasks in a CSV file, you must include the required fields that are identified by the asterisk character (*) in the following table. Field Description segmentName* The name segment. Required field. name* The name of the deployment task. Required field. type* Task type. Possible values are note, waitfortimetask, ucdtask, or manual. During import, if the field contains an unrecognized value, the task is assigned the manual type. description Description of the deployment plan. property:processId The process ID in IBM UrbanCode Deploy that corresponds to the task. property:task-environments Application environments available to the task. property:mailRecipients Email addresses of users who receive email messages when notifications are sent. taskTagNames The names of the tags that are associated with the task. taskPrequisiteIds A comma-separated list of IDs for tasks that must complete before this task can start. segmentPrerequisitelds A comma-separated list of IDs for segments with which the current segment has dependencies. taskPrequisiteNames A comma-separated list of names for tasks that must complete before this task can start. segmentPrerequisiteNames A comma-separated list of names for segments with which the current segment has dependencies. assignedUserEmail Email address of the user who is assigned to the current task. executorGroup User group assigned to the current task. segmentPattern Execution pattern of the selected segment. Complete the following steps to import tasks into a deployment plan: On the Deployment Plan Details page, click Import Tasks . In the Import Tasks dialog, click Choose File , and then select the CSV file. You can also drag a file onto the field. Click Import . The tasks are added to the deployment plan. If the import process is unsuccessful, click View Report to display the error log. Parent topic: Deployment plans Parent topic: Running deployments","title":"Importing tasks into deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_importTasks/#importing-tasks-into-deployment-plans","text":"You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. You can import tasks from CSV files that are exported from UrbanCode Release or another application capable of creating CSV files. When you import a deployment plan from UrbanCode Release, segments are converted into groups with the same execution pattern as the original segments. Segment tasks are bracketed by note-type Start Segment and End Segment tasks. Task dependencies are preserved during import. Segment dependencies are represented by dependencies to End Segment tasks. To learn about deployment plans exported from UrbanCode Release, download the SamplePlan.csv file from the Import Tasks dialog. Note: When you import tasks, tasks that are already defined in the deployment plan are overwritten and replaced by the tasks in the CSV file. The following table contains the fields that define a task in an UrbanCode Release deployment plan. The first row in the CSV file contains the column headers, which correspond to the table's Field column. The rows after the first row contain task data, one task per row. The order of the columns does not matter. Note: If you are creating tasks in a CSV file, you must include the required fields that are identified by the asterisk character (*) in the following table. Field Description segmentName* The name segment. Required field. name* The name of the deployment task. Required field. type* Task type. Possible values are note, waitfortimetask, ucdtask, or manual. During import, if the field contains an unrecognized value, the task is assigned the manual type. description Description of the deployment plan. property:processId The process ID in IBM UrbanCode Deploy that corresponds to the task. property:task-environments Application environments available to the task. property:mailRecipients Email addresses of users who receive email messages when notifications are sent. taskTagNames The names of the tags that are associated with the task. taskPrequisiteIds A comma-separated list of IDs for tasks that must complete before this task can start. segmentPrerequisitelds A comma-separated list of IDs for segments with which the current segment has dependencies. taskPrequisiteNames A comma-separated list of names for tasks that must complete before this task can start. segmentPrerequisiteNames A comma-separated list of names for segments with which the current segment has dependencies. assignedUserEmail Email address of the user who is assigned to the current task. executorGroup User group assigned to the current task. segmentPattern Execution pattern of the selected segment. Complete the following steps to import tasks into a deployment plan: On the Deployment Plan Details page, click Import Tasks . In the Import Tasks dialog, click Choose File , and then select the CSV file. You can also drag a file onto the field. Click Import . The tasks are added to the deployment plan. If the import process is unsuccessful, click View Report to display the error log. Parent topic: Deployment plans Parent topic: Running deployments","title":"Importing tasks into deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_ov/","text":"Deployment plans A deployment plan is a container for tasks. Tasks define the activities that your team runs to complete a software deployment. You create a deployment plan by assigning a team to manage it and then adding tasks to the plan. Team members add tasks to the plan and run the tasks during deployments. The managing team also determines which UrbanCode Deploy applications are available. After an integration is configured, all applications that are managed by the team in UrbanCode Deploy are available. When you use the Pipeline feature, releases and deployment plans are automatically generated as you add stages and applications to the pipeline. You can start deployments directly from the pipeline, or open the deployment plan and start the deployment by running an eligible task. The tasks define the activities that the team performs to complete a deployment. You can create new tasks, copy tasks from other deployment plans or import tasks from CSV files. When you are satisfied with the plan, you can schedule a deployment. You can also run a deployment at any time by starting one of the plan's tasks. Tasks are displayed on individual rows in deployment plans. Each row contains information that identifies the task and provides its status. Each row also contains action icons that are used during deployments, such as Start task or Skip . By default, tasks run sequentially beginning with the first task, or topmost task, in the plan. After the first task finishes, the second task is eligible to run, and so forth. The order in which tasks are eligible to run is called the execution order. The execution order can be modified by combining tasks into groups. When you create a group , you set the group's execution pattern, which can be sequential or parallel. If a group has a sequential execution pattern, its tasks run sequentially starting with the first task. A deployment plan's default execution pattern is sequential. If a group has a parallel execution pattern, tasks in the group can be started in any order and they can run simultaneously. If a plan consists entirely of parallel tasks, you can start any task regardless of its position in the list. Task eligibility can also be effected by task dependencies. If a task has any prerequisites , it cannot start, even if it is otherwise eligible, until all prerequisite tasks are resolved. Some tasks start automatically as soon as they are eligible to run, while other tasks are started manually. Whether a task starts automatically or not depends on its type. Manual tasks, as the name implies, are started manually. UrbanCode Deploy and Delayed-type tasks automatically start as soon as they are eligible. Eligible tasks display a Start Task button. To start a deployment, you start one of a plan's eligible tasks. Scheduled deployments start automatically at the scheduled time if an eligible task is of a type that can start automatically, such as UrbanCode Deploy. Managing deployment plans You can change existing deployment plans and view current status from the deployment plan detail page. Creating deployment plans You can start with a blank plan that has no defined tasks, copy an existing plan, or start with a plan template. You can also auto-create them by assigning applications to pipelines. When you copy a plan or use a template, many tasks are already defined. Importing tasks into deployment plans You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. Copying deployment plans You can duplicate deployment plans by copying them. Managing deployment plan templates You can convert deployment plans to create deployment plan templates. Archiving deployment plans You can remove deployment plans from releases by archiving them. Parent topic: Release management","title":"Overview"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_ov/#deployment-plans","text":"A deployment plan is a container for tasks. Tasks define the activities that your team runs to complete a software deployment. You create a deployment plan by assigning a team to manage it and then adding tasks to the plan. Team members add tasks to the plan and run the tasks during deployments. The managing team also determines which UrbanCode Deploy applications are available. After an integration is configured, all applications that are managed by the team in UrbanCode Deploy are available. When you use the Pipeline feature, releases and deployment plans are automatically generated as you add stages and applications to the pipeline. You can start deployments directly from the pipeline, or open the deployment plan and start the deployment by running an eligible task. The tasks define the activities that the team performs to complete a deployment. You can create new tasks, copy tasks from other deployment plans or import tasks from CSV files. When you are satisfied with the plan, you can schedule a deployment. You can also run a deployment at any time by starting one of the plan's tasks. Tasks are displayed on individual rows in deployment plans. Each row contains information that identifies the task and provides its status. Each row also contains action icons that are used during deployments, such as Start task or Skip . By default, tasks run sequentially beginning with the first task, or topmost task, in the plan. After the first task finishes, the second task is eligible to run, and so forth. The order in which tasks are eligible to run is called the execution order. The execution order can be modified by combining tasks into groups. When you create a group , you set the group's execution pattern, which can be sequential or parallel. If a group has a sequential execution pattern, its tasks run sequentially starting with the first task. A deployment plan's default execution pattern is sequential. If a group has a parallel execution pattern, tasks in the group can be started in any order and they can run simultaneously. If a plan consists entirely of parallel tasks, you can start any task regardless of its position in the list. Task eligibility can also be effected by task dependencies. If a task has any prerequisites , it cannot start, even if it is otherwise eligible, until all prerequisite tasks are resolved. Some tasks start automatically as soon as they are eligible to run, while other tasks are started manually. Whether a task starts automatically or not depends on its type. Manual tasks, as the name implies, are started manually. UrbanCode Deploy and Delayed-type tasks automatically start as soon as they are eligible. Eligible tasks display a Start Task button. To start a deployment, you start one of a plan's eligible tasks. Scheduled deployments start automatically at the scheduled time if an eligible task is of a type that can start automatically, such as UrbanCode Deploy. Managing deployment plans You can change existing deployment plans and view current status from the deployment plan detail page. Creating deployment plans You can start with a blank plan that has no defined tasks, copy an existing plan, or start with a plan template. You can also auto-create them by assigning applications to pipelines. When you copy a plan or use a template, many tasks are already defined. Importing tasks into deployment plans You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. Copying deployment plans You can duplicate deployment plans by copying them. Managing deployment plan templates You can convert deployment plans to create deployment plan templates. Archiving deployment plans You can remove deployment plans from releases by archiving them. Parent topic: Release management","title":"Deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_promote/","text":"Copying deployment plans You can duplicate deployment plans by copying them. The status of a copied or promoted plan is `draft` even if the original plan has a status of `done` or `in progress`. To copy a plan, use the Copy plan action on the Deployment Plan page. When you copy a plan, a new plan with the name \"Copy of `plan_name`\" is inserted into the Deployment Plan page. The copied plan contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications, versions, and environments that are selected in the original are also selected in the copied plan. Applications, versions, and environments are displayed on the **Versions** tab on the Deployment Plan Detail page. To create a template from a plan, use the Copy as template action On the Deployment Plan page. When you copy a plan as a template, a new plan with the name \"Copy of `plan_name`\" is inserted into the Templates page. The copied plan contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications, versions, and environments that are selected in the original are also selected in the template. Parent topic: Deployment plans","title":"Copying deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_promote/#copying-deployment-plans","text":"You can duplicate deployment plans by copying them. The status of a copied or promoted plan is `draft` even if the original plan has a status of `done` or `in progress`. To copy a plan, use the Copy plan action on the Deployment Plan page. When you copy a plan, a new plan with the name \"Copy of `plan_name`\" is inserted into the Deployment Plan page. The copied plan contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications, versions, and environments that are selected in the original are also selected in the copied plan. Applications, versions, and environments are displayed on the **Versions** tab on the Deployment Plan Detail page. To create a template from a plan, use the Copy as template action On the Deployment Plan page. When you copy a plan as a template, a new plan with the name \"Copy of `plan_name`\" is inserted into the Templates page. The copied plan contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications, versions, and environments that are selected in the original are also selected in the template. Parent topic: Deployment plans","title":"Copying deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_template/","text":"Managing deployment plan templates You can convert deployment plans to create deployment plan templates. To create a template, use the Copy as template action On the Deployment Plan page. When you create a template, a new plan with the name \"Copy of plan_name\" is inserted into the Templates page. The status of a template is `template` even if the original plan has a status of `done` or `in progress`. The template contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications selected in the original are also selected in the template. You cannot run deployments with templates. To use a template for a deployment, first copy or promote it and then use the copied or promoted plan. Parent topic: Deployment plans","title":"Managing deployment plan templates"},{"location":"com.ibm.crelease.doc/topics/cr_deployPlan_template/#managing-deployment-plan-templates","text":"You can convert deployment plans to create deployment plan templates. To create a template, use the Copy as template action On the Deployment Plan page. When you create a template, a new plan with the name \"Copy of plan_name\" is inserted into the Templates page. The status of a template is `template` even if the original plan has a status of `done` or `in progress`. The template contains all the tasks that are defined in the original plan. If UrbanCode Deploy tasks are in the plan, the applications selected in the original are also selected in the template. You cannot run deployments with templates. To use a template for a deployment, first copy or promote it and then use the copied or promoted plan. Parent topic: Deployment plans","title":"Managing deployment plan templates"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_manual/","text":"Starting deployments manually Starting deployments manually You can start a deployment manually at any time, including deployments that are scheduled to start later. Tasks in a deployment plan might be inapplicable for deployment. UrbanCode Deploy tasks are inapplicable if no version or environment is specified for the tasks. When you create UrbanCode Deploy tasks, you can delay selecting the environment and version by using the Use Version option. Before the deployment starts, ensure that all UrbanCode Deploy tasks are applicable for the upcoming deployment. You can deliberately exclude tasks from a deployment. You can make tagged tasks inapplicable by excluding their tags from the deployment. Tasks with excluded tags are inapplicable for deployment. Inapplicable tasks have the status of `Not Applicable`. Tasks with the `Not Applicable` status cannot be started. If an inapplicable task is a prerequisite for an active task, the dependency is ignored. To start a deployment, complete the following steps: On the Release page, click the deployment plan that you want to use for the deployment. The deployment detail page is displayed. To make tagged tasks inapplicable for the current deployment, click Versions , and then in the Tags area, clear the tags. If a task has more than one tag, clear all of them. To select the version or environment for any inapplicable UrbanCode Deploy tasks, click Versions , and then select the environment and version. You can also change your choices for tasks that have their environments and versions already selected. Click Hide Not Applicable Tasks to remove inapplicable tasks from the displayed task list. Hidden tasks are not removed from the deployment plan. Click the Start action for one of the plan's eligible tasks. If more than one task is eligible, you can start any of them. Only eligible tasks display the start button. A started task has the status of `In Progress` until it is resolved. After a deployment starts, the plan's status changes to `In Progress`. The status remains `In Progress` until all tasks are resolved. When all tasks are resolved, the plan's status changes to `Done`. Parent topic: Running deployments","title":"Starting deployments manually"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_manual/#starting-deployments-manually","text":"Starting deployments manually You can start a deployment manually at any time, including deployments that are scheduled to start later. Tasks in a deployment plan might be inapplicable for deployment. UrbanCode Deploy tasks are inapplicable if no version or environment is specified for the tasks. When you create UrbanCode Deploy tasks, you can delay selecting the environment and version by using the Use Version option. Before the deployment starts, ensure that all UrbanCode Deploy tasks are applicable for the upcoming deployment. You can deliberately exclude tasks from a deployment. You can make tagged tasks inapplicable by excluding their tags from the deployment. Tasks with excluded tags are inapplicable for deployment. Inapplicable tasks have the status of `Not Applicable`. Tasks with the `Not Applicable` status cannot be started. If an inapplicable task is a prerequisite for an active task, the dependency is ignored. To start a deployment, complete the following steps: On the Release page, click the deployment plan that you want to use for the deployment. The deployment detail page is displayed. To make tagged tasks inapplicable for the current deployment, click Versions , and then in the Tags area, clear the tags. If a task has more than one tag, clear all of them. To select the version or environment for any inapplicable UrbanCode Deploy tasks, click Versions , and then select the environment and version. You can also change your choices for tasks that have their environments and versions already selected. Click Hide Not Applicable Tasks to remove inapplicable tasks from the displayed task list. Hidden tasks are not removed from the deployment plan. Click the Start action for one of the plan's eligible tasks. If more than one task is eligible, you can start any of them. Only eligible tasks display the start button. A started task has the status of `In Progress` until it is resolved. After a deployment starts, the plan's status changes to `In Progress`. The status remains `In Progress` until all tasks are resolved. When all tasks are resolved, the plan's status changes to `Done`. Parent topic: Running deployments","title":"Starting deployments manually"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_ov/","text":"Running deployments Complete deployments by resolving the tasks in a deployment plan. A deployment starts when one of the plan's eligible tasks starts. A scheduled deployment starts automatically at the scheduled time if one of its eligible tasks is an auto task, such as UrbanCode Deploy tasks. Otherwise, begin a deployment by starting one of the plan's eligible tasks. If the plan contains several eligible tasks, you can start any of them. You can manually start a deployment at any time. You can manually start a scheduled deployment before its scheduled time. The deployment plan's execution pattern determines when tasks are eligible to start. If the plan has the sequential execution pattern, which is the default pattern, tasks become eligible in the order in which they are listed in the plan, starting with the first task. After the first task resolves, the second task becomes eligible. Start eligible manual tasks by clicking the task's Start button. Auto tasks, such as UrbanCode Deploy tasks, start automatically as soon as they become eligible. The tasks in a group with a parallel execution pattern become eligible simultaneously. Tasks in parallel groups can be started in any order. Nested groups and tasks with ad hoc dependencies can affect the execution pattern. You can modify a deployment plan after you start a deployment. You can add, delete, and modify tasks. After all tasks are resolved, the deployment is complete. A task is resolved if it has a status of `Complete`, `Failed`, or `Skipped`. If you reopen a task or add a task after the deployment is complete, the deployment's status changes to `In Progress`. Starting deployments manually Starting deployments manually Resolving tasks Complete a deployment by resolving the tasks in the deployment plan. Importing tasks into deployment plans You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. Running scheduled deployments A scheduled deployment starts automatically at its scheduled time if any of its auto tasks are eligible to start. Parent topic: Release management","title":"Overview"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_ov/#running-deployments","text":"Complete deployments by resolving the tasks in a deployment plan. A deployment starts when one of the plan's eligible tasks starts. A scheduled deployment starts automatically at the scheduled time if one of its eligible tasks is an auto task, such as UrbanCode Deploy tasks. Otherwise, begin a deployment by starting one of the plan's eligible tasks. If the plan contains several eligible tasks, you can start any of them. You can manually start a deployment at any time. You can manually start a scheduled deployment before its scheduled time. The deployment plan's execution pattern determines when tasks are eligible to start. If the plan has the sequential execution pattern, which is the default pattern, tasks become eligible in the order in which they are listed in the plan, starting with the first task. After the first task resolves, the second task becomes eligible. Start eligible manual tasks by clicking the task's Start button. Auto tasks, such as UrbanCode Deploy tasks, start automatically as soon as they become eligible. The tasks in a group with a parallel execution pattern become eligible simultaneously. Tasks in parallel groups can be started in any order. Nested groups and tasks with ad hoc dependencies can affect the execution pattern. You can modify a deployment plan after you start a deployment. You can add, delete, and modify tasks. After all tasks are resolved, the deployment is complete. A task is resolved if it has a status of `Complete`, `Failed`, or `Skipped`. If you reopen a task or add a task after the deployment is complete, the deployment's status changes to `In Progress`. Starting deployments manually Starting deployments manually Resolving tasks Complete a deployment by resolving the tasks in the deployment plan. Importing tasks into deployment plans You can import tasks that are defined in comma-separated values (CSV) files into a deployment plan. Running scheduled deployments A scheduled deployment starts automatically at its scheduled time if any of its auto tasks are eligible to start. Parent topic: Release management","title":"Running deployments"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_scheduled/","text":"Running scheduled deployments A scheduled deployment starts automatically at its scheduled time if any of its auto tasks are eligible to start. If a deployment plan does not contain any eligible auto tasks, start the deployment by manually starting one of the eligible tasks. If the deployment plan belongs to a pipeline-generated release, you can start the deployment directly from the pipeline. You can manually start a scheduled deployment at any time even if the plan has eligible auto tasks. Parent topic: Running deployments","title":"Running scheduled deployments"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_scheduled/#running-scheduled-deployments","text":"A scheduled deployment starts automatically at its scheduled time if any of its auto tasks are eligible to start. If a deployment plan does not contain any eligible auto tasks, start the deployment by manually starting one of the eligible tasks. If the deployment plan belongs to a pipeline-generated release, you can start the deployment directly from the pipeline. You can manually start a scheduled deployment at any time even if the plan has eligible auto tasks. Parent topic: Running deployments","title":"Running scheduled deployments"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_taskResolve/","text":"Resolving tasks Complete a deployment by resolving the tasks in the deployment plan. A started task is resolved when its status changes to `Complete`, `Failed`, or `Skipped`. You resolve manual tasks by using the appropriate status action. Auto tasks, such as UrbanCode Deploy tasks or Jenkins, change status automatically as conditions change. However, you can manually resolve auto tasks. For example, you might manually fail an UrbanCode Deploy task that is taking too long to complete. To resolve a started task, apply one of the following statuses: Click Complete to finish the task. `Complete` means that the task finished with the expected results. Click Skip to skip the task for the current deployment. Click Fail to end the task. `Fail` means that the task did not finish or finished with unexpected results. Click Task Reopen to open a resolved a task. If all tasks are completed, reopening a task reopens the deployment. Parent topic: Running deployments","title":"Resolving tasks"},{"location":"com.ibm.crelease.doc/topics/cr_deployRun_taskResolve/#resolving-tasks","text":"Complete a deployment by resolving the tasks in the deployment plan. A started task is resolved when its status changes to `Complete`, `Failed`, or `Skipped`. You resolve manual tasks by using the appropriate status action. Auto tasks, such as UrbanCode Deploy tasks or Jenkins, change status automatically as conditions change. However, you can manually resolve auto tasks. For example, you might manually fail an UrbanCode Deploy task that is taking too long to complete. To resolve a started task, apply one of the following statuses: Click Complete to finish the task. `Complete` means that the task finished with the expected results. Click Skip to skip the task for the current deployment. Click Fail to end the task. `Fail` means that the task did not finish or finished with unexpected results. Click Task Reopen to open a resolved a task. If all tasks are completed, reopening a task reopens the deployment. Parent topic: Running deployments","title":"Resolving tasks"},{"location":"com.ibm.crelease.doc/topics/cr_deployplan_manage/","text":"Managing deployment plans You can change existing deployment plans and view current status from the deployment plan detail page. The deployment plan detail page displays a list of tasks, properties, versions, and the change history associated with the plan. Click the Tasks tab to work with the tasks in the plan. You can add tasks, schedule tasks, skip a task, and reopen a completed task. Click the Properties tab to view properties and their value. Click the Versions tab to view versions. Click the Change history to view a list of the changes, revision number, user who made the revision, and date. You can also restore a plan to a specific version by clicking the restore icon ( ). From this page you can modify and archive the plan, change the name of the plan, make a copy of the plan, and create a template from the plan. Access these features from the overflow menu icon ( ) at the top right corner of the page. Click Edit to modify the deployment plan. With this option, you can add events and tags to the release event. Click Copy to copy a deployment plan. A copy of the selected plan is added to the release. Click Copy as template to create a template based on this plan. Click Archive plan to remove the deployment plan from the release. Removed plans are not permanently deleted and can be added to another release. Parent topic: Deployment plans","title":"Managing deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_deployplan_manage/#managing-deployment-plans","text":"You can change existing deployment plans and view current status from the deployment plan detail page. The deployment plan detail page displays a list of tasks, properties, versions, and the change history associated with the plan. Click the Tasks tab to work with the tasks in the plan. You can add tasks, schedule tasks, skip a task, and reopen a completed task. Click the Properties tab to view properties and their value. Click the Versions tab to view versions. Click the Change history to view a list of the changes, revision number, user who made the revision, and date. You can also restore a plan to a specific version by clicking the restore icon ( ). From this page you can modify and archive the plan, change the name of the plan, make a copy of the plan, and create a template from the plan. Access these features from the overflow menu icon ( ) at the top right corner of the page. Click Edit to modify the deployment plan. With this option, you can add events and tags to the release event. Click Copy to copy a deployment plan. A copy of the selected plan is added to the release. Click Copy as template to create a template based on this plan. Click Archive plan to remove the deployment plan from the release. Removed plans are not permanently deleted and can be added to another release. Parent topic: Deployment plans","title":"Managing deployment plans"},{"location":"com.ibm.crelease.doc/topics/cr_events_ov/","text":"Events and tags An event represents a release-related activity that you manage with the calendar. A tag is a label that you can add to a release or an event. You can use tags to filter the Activities list on the Releases page. Tags do not appear on the calendar. Events are organized into general categories that include releases, holidays, and maintenance windows. You can add events to releases or use them independent of releases. When an event is assigned, it is represented on the calendar by an icon appropriate for the event category. You can use the icons to filter the Releases page and select releases for any affected date or range of dates. Tags are assigned to releases and can be used to filter the Releases page. Assigned tags appear in Releases page but they do not appear on the calendar. You can use tags to avoid calendar clutter. Parent topic: Release management","title":"Events and tags"},{"location":"com.ibm.crelease.doc/topics/cr_events_ov/#events-and-tags","text":"An event represents a release-related activity that you manage with the calendar. A tag is a label that you can add to a release or an event. You can use tags to filter the Activities list on the Releases page. Tags do not appear on the calendar. Events are organized into general categories that include releases, holidays, and maintenance windows. You can add events to releases or use them independent of releases. When an event is assigned, it is represented on the calendar by an icon appropriate for the event category. You can use the icons to filter the Releases page and select releases for any affected date or range of dates. Tags are assigned to releases and can be used to filter the Releases page. Assigned tags appear in Releases page but they do not appear on the calendar. You can use tags to avoid calendar clutter. Parent topic: Release management","title":"Events and tags"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_create/","text":"Creating pipelines Create a pipeline to use external tools and systems in your software releases. Before you can use applications in pipelines, configure integrations with external tools. Integrate with UrbanCode Deploy to run UrbanCode Applications with your pipelines . Configure an integration with Jenkins to run Jenkins jobs with your pipeline. The applications that are available to a pipeline depend on the team that is assigned to the pipeline. The applications that are managed by the team in UrbanCode Deploy are also available in UrbanCode Velocity. To create a pipeline, complete the following steps: On the UrbanCode Velocity main menu, click Pipelines . On the Pipelines page, click Create pipeline . On the Crate a Pipeline window, in the Name field, enter a name for the pipeline. In the Team list, select a team to manage the pipeline. Only teams to which the current user belongs are available. Clear the Add default environments box if you do not want to use the default environments, or stages. The default stages are DEV, QA, and PROD and can be used to logically model the stages of typical software development lifecycle. Each stage has an release associated with it automatically. You can add stages to a pipeline at any time. Click Save . The pipeline is created and the Pipeline detail page is displayed. You can see the releases associated with each stage on the Releases page. The new release names have the following format, PipelineName|StageName release . Add applications and jobs to your pipeline . Parent topic: Pipelines","title":"Creating pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_create/#creating-pipelines","text":"Create a pipeline to use external tools and systems in your software releases. Before you can use applications in pipelines, configure integrations with external tools. Integrate with UrbanCode Deploy to run UrbanCode Applications with your pipelines . Configure an integration with Jenkins to run Jenkins jobs with your pipeline. The applications that are available to a pipeline depend on the team that is assigned to the pipeline. The applications that are managed by the team in UrbanCode Deploy are also available in UrbanCode Velocity. To create a pipeline, complete the following steps: On the UrbanCode Velocity main menu, click Pipelines . On the Pipelines page, click Create pipeline . On the Crate a Pipeline window, in the Name field, enter a name for the pipeline. In the Team list, select a team to manage the pipeline. Only teams to which the current user belongs are available. Clear the Add default environments box if you do not want to use the default environments, or stages. The default stages are DEV, QA, and PROD and can be used to logically model the stages of typical software development lifecycle. Each stage has an release associated with it automatically. You can add stages to a pipeline at any time. Click Save . The pipeline is created and the Pipeline detail page is displayed. You can see the releases associated with each stage on the Releases page. The new release names have the following format, PipelineName|StageName release . Add applications and jobs to your pipeline . Parent topic: Pipelines","title":"Creating pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_manage/","text":"Managing pipelines Add applications and jobs to your pipeline, and add or modify stages. You can add environments, or stages, at any time and rearrange them as needed. Each application that you add to a pipeline is inserted onto a separate row below the last application. As you add apps and jobs to stages, tasks are added to the associated deployment plan in the order that they appear in the pipeline. To modify a pipeline, complete the following steps: On the Pipeline detail page, click Add Environment to create an environment, or stage. Drag the stage to a new location in the pipeline. You can re-order the stages except for the first stage, Input . To rename the stage, select Edit environment from the stage context menu. To map an UrbanCode Deploy application environment to the stage, complete the following steps: For the application where you want to add the environment, click , and then select Manage logical environment . On the Map app environments to logical environment window, select an environment, and then click Save . The environment is added to the stage. To change the mapped environment, select Edit application environment . To delete the environment, select Delete . Click View deployment plan on the stage context menu fo view the deployment plan associated with the stage The deployment plan detail page is displayed. As you add apps and jobs to the pipeline, associated tasks are inserted into the plan. You can also add tasks directly to the plan. For example, you might add a DRA task to the top of the plan to ensure deployments can only start after the associated DRA tests are satisfied. Click Schedule deployment to schedule a deployment for a stag, and then specify the date and time. To add the stage to a release, complete the following steps: Click Join release for the stage that you want to add to a release. On the Map app environments to logical environment window, select a release, and then click Save . The release is added to the stage, as shown in the following figure. To view the release, click the release link. Click Delete to delete an app or job, and then confirm the deletion by entering the name of the application. The application is removed from the pipeline along with all apps and jobs defined for it. Click Add app to add an application to the pipeline, and then, on the Add apps window, select the application type. Depending on the type, complete one of the following options: If you select Jenkins , enter a name for the application, and then click Save . If you select UrbanCode Deploy , select an UrbanCode Deploy application, and then click Continue . Next, select a process, and then click Save . The application is added to the pipeline on a new row. If you selected multiple applications, each has its own row. Run a deployment for a pipeline stage . Parent topic: Pipelines","title":"Managing pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_manage/#managing-pipelines","text":"Add applications and jobs to your pipeline, and add or modify stages. You can add environments, or stages, at any time and rearrange them as needed. Each application that you add to a pipeline is inserted onto a separate row below the last application. As you add apps and jobs to stages, tasks are added to the associated deployment plan in the order that they appear in the pipeline. To modify a pipeline, complete the following steps: On the Pipeline detail page, click Add Environment to create an environment, or stage. Drag the stage to a new location in the pipeline. You can re-order the stages except for the first stage, Input . To rename the stage, select Edit environment from the stage context menu. To map an UrbanCode Deploy application environment to the stage, complete the following steps: For the application where you want to add the environment, click , and then select Manage logical environment . On the Map app environments to logical environment window, select an environment, and then click Save . The environment is added to the stage. To change the mapped environment, select Edit application environment . To delete the environment, select Delete . Click View deployment plan on the stage context menu fo view the deployment plan associated with the stage The deployment plan detail page is displayed. As you add apps and jobs to the pipeline, associated tasks are inserted into the plan. You can also add tasks directly to the plan. For example, you might add a DRA task to the top of the plan to ensure deployments can only start after the associated DRA tests are satisfied. Click Schedule deployment to schedule a deployment for a stag, and then specify the date and time. To add the stage to a release, complete the following steps: Click Join release for the stage that you want to add to a release. On the Map app environments to logical environment window, select a release, and then click Save . The release is added to the stage, as shown in the following figure. To view the release, click the release link. Click Delete to delete an app or job, and then confirm the deletion by entering the name of the application. The application is removed from the pipeline along with all apps and jobs defined for it. Click Add app to add an application to the pipeline, and then, on the Add apps window, select the application type. Depending on the type, complete one of the following options: If you select Jenkins , enter a name for the application, and then click Save . If you select UrbanCode Deploy , select an UrbanCode Deploy application, and then click Continue . Next, select a process, and then click Save . The application is added to the pipeline on a new row. If you selected multiple applications, each has its own row. Run a deployment for a pipeline stage . Parent topic: Pipelines","title":"Managing pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_run/","text":"Running deployments with pipelines Add applications and jobs to your pipeline, and add or modify stages. Pipeline stages run sequentially from left to right. When you run a stage deployment, tasks run in the order that they are assigned by the pipeline. You can run a deployment at any time by using the Run button, or you can schedule a deployment for a later time. To run a deployment with a pipeline, complete the following steps: On the Pipeline detail page, click the stage Run button. A deployment starts that uses the deployment plan associated with the stage. Tasks for every application on the stage are run in order starting with the first or top application. You can view the deployment's progress by using the supplied link. To schedule a deployment for a stage, click Schedule deployment on the context menu for the stage, and then select a date and start time. A deployment for the stage deployment plan will start at the scheduled time. Pipeline scheduled deployments are displayed on the calendar. On the Release page, select the release associated with the pipeline stage, and then open the default deployment plan. Start a deployment by starting one of the eligible tasks, or click Edit schedule a deployment. As with other deployment plans, you can add and delete tasks on the pipeline-generated plan at any time. On the release or plan page, use the Go to link to open the associated pipeline or stage. Parent topic: Pipelines","title":"Running deployments with pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipeline_run/#running-deployments-with-pipelines","text":"Add applications and jobs to your pipeline, and add or modify stages. Pipeline stages run sequentially from left to right. When you run a stage deployment, tasks run in the order that they are assigned by the pipeline. You can run a deployment at any time by using the Run button, or you can schedule a deployment for a later time. To run a deployment with a pipeline, complete the following steps: On the Pipeline detail page, click the stage Run button. A deployment starts that uses the deployment plan associated with the stage. Tasks for every application on the stage are run in order starting with the first or top application. You can view the deployment's progress by using the supplied link. To schedule a deployment for a stage, click Schedule deployment on the context menu for the stage, and then select a date and start time. A deployment for the stage deployment plan will start at the scheduled time. Pipeline scheduled deployments are displayed on the calendar. On the Release page, select the release associated with the pipeline stage, and then open the default deployment plan. Start a deployment by starting one of the eligible tasks, or click Edit schedule a deployment. As with other deployment plans, you can add and delete tasks on the pipeline-generated plan at any time. On the release or plan page, use the Go to link to open the associated pipeline or stage. Parent topic: Pipelines","title":"Running deployments with pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_pipelines_ov/","text":"Pipelines A pipeline is a sequence of stages that retrieve input and run applications and jobs, such as builds, tests, and deployments. Stages organize input and jobs as your code is built, deployed, and tested. Stages accept input from either source control repositories (SCM) or other external applications, such as UrbanCode Deploy. When you create your first stage, some default settings are set for you on the Input stage. You add applications to the pipeline from external tools that are integrated with UrbanCode Velocity, such as Jenkins, and UrbanCode Deploy. Stages and jobs run serially; they enable flow control for your work. For example, you might place a test stage before a deployment stage. You can ensure that if the tests in the test stage fail, the deployment stage won't run. You can define stage environment properties that can be used in all jobs. For example, you might define a TEST_URL property that passes a single URL to deploy and test jobs in a single stage. The deploy job would deploy to that URL, and the test job would test the running app at the URL. Each pipeline stage automatically has a release and deployment plan associated with it. You do not have to manually create a release beforehand. As you add applications to a stage, a task is automatically added to the default deployment plan. For example, if you add a UrbanCode Deploy application to a stage, and UrbanCode Deploy task is added to the deployment plan. When you run a pipeline application, a deployment starts that uses the associated deployment plan. You can monitor the progress of the deployment with links provided on the stage card. Creating pipelines Create a pipeline to use external tools and systems in your software releases. Managing pipelines Add applications and jobs to your pipeline, and add or modify stages. Running deployments with pipelines Add applications and jobs to your pipeline, and add or modify stages.","title":"Pipelines overview"},{"location":"com.ibm.crelease.doc/topics/cr_pipelines_ov/#pipelines","text":"A pipeline is a sequence of stages that retrieve input and run applications and jobs, such as builds, tests, and deployments. Stages organize input and jobs as your code is built, deployed, and tested. Stages accept input from either source control repositories (SCM) or other external applications, such as UrbanCode Deploy. When you create your first stage, some default settings are set for you on the Input stage. You add applications to the pipeline from external tools that are integrated with UrbanCode Velocity, such as Jenkins, and UrbanCode Deploy. Stages and jobs run serially; they enable flow control for your work. For example, you might place a test stage before a deployment stage. You can ensure that if the tests in the test stage fail, the deployment stage won't run. You can define stage environment properties that can be used in all jobs. For example, you might define a TEST_URL property that passes a single URL to deploy and test jobs in a single stage. The deploy job would deploy to that URL, and the test job would test the running app at the URL. Each pipeline stage automatically has a release and deployment plan associated with it. You do not have to manually create a release beforehand. As you add applications to a stage, a task is automatically added to the default deployment plan. For example, if you add a UrbanCode Deploy application to a stage, and UrbanCode Deploy task is added to the deployment plan. When you run a pipeline application, a deployment starts that uses the associated deployment plan. You can monitor the progress of the deployment with links provided on the stage card. Creating pipelines Create a pipeline to use external tools and systems in your software releases. Managing pipelines Add applications and jobs to your pipeline, and add or modify stages. Running deployments with pipelines Add applications and jobs to your pipeline, and add or modify stages.","title":"Pipelines"},{"location":"com.ibm.crelease.doc/topics/cr_properties_create/","text":"Creating properties Creating properties xxx You define properties with the Deployment plan detail page Properties tab. You can create a property before you use it, or you can create a property by first referencing it in a task, and then later defining its attributes. If you create a property by reference, it appears as text-type property on the Properties tab. To create a property, complete the following steps: On the Deployment plan detail page, click Properties , and then click Add . On the Add property window, in the Name field, enter the name. Property names cannot contain white spaces, ` {} `, or ` : `. In the Label field, enter the label that appears in the user interface. In the Type list, select the property type. The available types are described in this list: Text Text area Password Select Boolean Date and time . Values are replaced by a string with the following format day, month, year, time . For example, Thursday, January 1st 1970, 12:00 am UTC . Note: When a date and time property is used in a ServiceNow task, the value is replaced with the date and time format expected by ServiceNow. In the Value field, you can enter an initial value for the property. In the Default Value field, enter a value for the property. This value is used unless the user sets the value. You can leave this field blank. If you want users to supply a value for the property when they create a release, check Prompt for this property at release creation at the specified sequence position . In the Display sequence position list, select a position for the property. This selected value affects the property's position on the Properties tab Click Save . The property is displayed on the deployment plan Properties tab. After the release is created, you can add deployment plans, events, and tags to it. Parent topic: Using properties","title":"Creating properties"},{"location":"com.ibm.crelease.doc/topics/cr_properties_create/#creating-properties","text":"Creating properties xxx You define properties with the Deployment plan detail page Properties tab. You can create a property before you use it, or you can create a property by first referencing it in a task, and then later defining its attributes. If you create a property by reference, it appears as text-type property on the Properties tab. To create a property, complete the following steps: On the Deployment plan detail page, click Properties , and then click Add . On the Add property window, in the Name field, enter the name. Property names cannot contain white spaces, ` {} `, or ` : `. In the Label field, enter the label that appears in the user interface. In the Type list, select the property type. The available types are described in this list: Text Text area Password Select Boolean Date and time . Values are replaced by a string with the following format day, month, year, time . For example, Thursday, January 1st 1970, 12:00 am UTC . Note: When a date and time property is used in a ServiceNow task, the value is replaced with the date and time format expected by ServiceNow. In the Value field, you can enter an initial value for the property. In the Default Value field, enter a value for the property. This value is used unless the user sets the value. You can leave this field blank. If you want users to supply a value for the property when they create a release, check Prompt for this property at release creation at the specified sequence position . In the Display sequence position list, select a position for the property. This selected value affects the property's position on the Properties tab Click Save . The property is displayed on the deployment plan Properties tab. After the release is created, you can add deployment plans, events, and tags to it. Parent topic: Using properties","title":"Creating properties"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ov/","text":"Using properties A deployment plan can contain user-defined properties. Properties values can be defined at design- or run-time. Tasks can reference properties defined in their parent deployment plan. In addition to the properties that you create, system properties are available to all plans. Creating properties Creating properties xxx Using properties You can use properties in deployment plans, REST API endpoints, and external systems, such as ServiceNow. Parent topic: Release management","title":"Properties overview"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ov/#using-properties","text":"A deployment plan can contain user-defined properties. Properties values can be defined at design- or run-time. Tasks can reference properties defined in their parent deployment plan. In addition to the properties that you create, system properties are available to all plans. Creating properties Creating properties xxx Using properties You can use properties in deployment plans, REST API endpoints, and external systems, such as ServiceNow. Parent topic: Release management","title":"Using properties"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ref/","text":"Using properties You can use properties in deployment plans, REST API endpoints, and external systems, such as ServiceNow. Property examples Use the following syntax to reference a property: ${propertyName} . To escape the syntax pattern, use two dollar-sign symbols, $${...} . You set property values with the deployment plan's Properties tab, REST API endpoints, or external systems, such as ServiceNow. The following table describes how to properties with task types. Task type Usage ServiceNow You can use the ServiceNow Output property field in a create change request action to store the change request ID in a property, for example, service_now_prod_ticket_id . Then, with another task, update the change request by referencing the property in the System ID field like this, ${service_now_prod_ticket_id} . | | Email | You can reference a system property in the email task Subject field like this example: `${sys:release.name} is complete!` | | Delayed | You can reference a delay task property in the Delay property field like this example: ``${prodTarget} . In this example, the task delays until the value in the ${prodTarget}`` property is reached. | System properties System properties enable you to access information about the parent release of a deployment plan. System properties can be referenced by any property-enabled task that is part of a release. The following table contains the available system properties: Property Description ${sys:release.name} The value in the release's Name field. ${sys:release.description} Contains the content of the release's Description field. ${sys:release.start} Release's Start time . $${sys:release.end} Contains the content of the release's End time field. In the Email message field of an email-type task, you can reference system properties like this example: Deployment for release ${sys:release.name} - ${sys:release.description} is complete. You can reference a system property in a ServiceNow task's Short description field like this example: Staging deployment ${sys:release.name} \\ . Parent topic: Using properties","title":"Using properties"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ref/#using-properties","text":"You can use properties in deployment plans, REST API endpoints, and external systems, such as ServiceNow.","title":"Using properties"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ref/#property-examples","text":"Use the following syntax to reference a property: ${propertyName} . To escape the syntax pattern, use two dollar-sign symbols, $${...} . You set property values with the deployment plan's Properties tab, REST API endpoints, or external systems, such as ServiceNow. The following table describes how to properties with task types. Task type Usage ServiceNow You can use the ServiceNow Output property field in a create change request action to store the change request ID in a property, for example, service_now_prod_ticket_id . Then, with another task, update the change request by referencing the property in the System ID field like this, ${service_now_prod_ticket_id} . | | Email | You can reference a system property in the email task Subject field like this example: `${sys:release.name} is complete!` | | Delayed | You can reference a delay task property in the Delay property field like this example: ``${prodTarget} . In this example, the task delays until the value in the ${prodTarget}`` property is reached. |","title":"Property examples"},{"location":"com.ibm.crelease.doc/topics/cr_properties_ref/#system-properties","text":"System properties enable you to access information about the parent release of a deployment plan. System properties can be referenced by any property-enabled task that is part of a release. The following table contains the available system properties: Property Description ${sys:release.name} The value in the release's Name field. ${sys:release.description} Contains the content of the release's Description field. ${sys:release.start} Release's Start time . $${sys:release.end} Contains the content of the release's End time field. In the Email message field of an email-type task, you can reference system properties like this example: Deployment for release ${sys:release.name} - ${sys:release.description} is complete. You can reference a system property in a ServiceNow task's Short description field like this example: Staging deployment ${sys:release.name} \\ . Parent topic: Using properties","title":"System properties"},{"location":"com.ibm.crelease.doc/topics/cr_release_archive/","text":"Archiving releases You can archive a release to remove it from the list of releases. Although you cannot delete a release, you can store it in the archives. Archived releases are not displayed on the Releases page. To archive a release, locate the release in the list and click the overflow icon ( ). Then click Archive . Repeat this action for each release to be archived. You can view archived releases and restore them by clicking Archived on the Releases page. Parent topic: Release management","title":"Archiving releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_archive/#archiving-releases","text":"You can archive a release to remove it from the list of releases. Although you cannot delete a release, you can store it in the archives. Archived releases are not displayed on the Releases page. To archive a release, locate the release in the list and click the overflow icon ( ). Then click Archive . Repeat this action for each release to be archived. You can view archived releases and restore them by clicking Archived on the Releases page. Parent topic: Release management","title":"Archiving releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_create/","text":"Creating releases On the Releases page, click Create release In the Create release window, type a name for the release in the Name field. This field can be referenced with the ${sys:release.name} system property. A name is required. In the Tags list, select one or more events or tags. You can also create a tag by typing the name of the new tag in the field. If you want the event to appear on the calendar, select an event that is created on the Configure Calendar page. Tags that you create with the Create release window are not displayed on the calendar, which can prevent calendar clutter. In the Description field, type a description of the release. This field can be referenced with the ${sys:release.description} system property. In the Deployment plan templates field, select one or more templates to add to the release. Each template that you select, adds a deployment plan to the release with the name Copy of template_name . You can convert any deployment plan into a template. If the selected templates have user-defined properties, you are prompted to provide values for them when you save the release. In the Start Time field, select a starting date and time. This field can be referenced with the ${sys:release.start} system property. Starting times are required for all releases. In the End Time field, select the ending date and time. This field can be referenced with the ${sys:release.end} system property. In the Team list, select a team to manage the release. You can add deployment plans from other teams to the release event, not just the team that manages the release. All the teams that you belong to are available. A team is required. If the selected templates have properties, click Next , and then provide values for the properties. Otherwise, click Save and view details to save the release and open the release details page. If you added templates to the release, a deployment plan for each template is created and displayed. If you didn't select any templates, an empty deployment plan is added to the release with the name Plan: release_name . To display the release in the Activities list, ensure that the date range includes dates within the release's start or end times. After the release is created, you can add deployment plans, events, and tags to it. Parent topic: Release management","title":"Creating releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_create/#creating-releases","text":"On the Releases page, click Create release In the Create release window, type a name for the release in the Name field. This field can be referenced with the ${sys:release.name} system property. A name is required. In the Tags list, select one or more events or tags. You can also create a tag by typing the name of the new tag in the field. If you want the event to appear on the calendar, select an event that is created on the Configure Calendar page. Tags that you create with the Create release window are not displayed on the calendar, which can prevent calendar clutter. In the Description field, type a description of the release. This field can be referenced with the ${sys:release.description} system property. In the Deployment plan templates field, select one or more templates to add to the release. Each template that you select, adds a deployment plan to the release with the name Copy of template_name . You can convert any deployment plan into a template. If the selected templates have user-defined properties, you are prompted to provide values for them when you save the release. In the Start Time field, select a starting date and time. This field can be referenced with the ${sys:release.start} system property. Starting times are required for all releases. In the End Time field, select the ending date and time. This field can be referenced with the ${sys:release.end} system property. In the Team list, select a team to manage the release. You can add deployment plans from other teams to the release event, not just the team that manages the release. All the teams that you belong to are available. A team is required. If the selected templates have properties, click Next , and then provide values for the properties. Otherwise, click Save and view details to save the release and open the release details page. If you added templates to the release, a deployment plan for each template is created and displayed. If you didn't select any templates, an empty deployment plan is added to the release with the name Plan: release_name . To display the release in the Activities list, ensure that the date range includes dates within the release's start or end times. After the release is created, you can add deployment plans, events, and tags to it. Parent topic: Release management","title":"Creating releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_manage/","text":"Managing releases Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases. The Release page displays information about releases. This page provides access to the calendar, release and task details. The left side of the page contains the calendar or list of tasks. Click Calendar to view the calendar. To view tasks, click Tasks . When viewing tasks you can select to view only your tasks or all tasks. Release activities are displayed in a tile or list ( ) format. You can use filters to limit the amount of information shown by typing a filter in the search bar. Additionally, click the filter icon ( ) to limit the activity list to: complete, in progress, or scheduled. Click the release name to view details about the release. Click the tag icon ( ) to toggle on and off the displaying of tags associated with the release activity. To create a new release, click Create release . You can also use this page to access and work with release templates by clicking Templates in the top right corner. Click Archived to view and work with releases removed from the Releases page and the calendar. Parent topic: Release management","title":"Managing releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_manage/#managing-releases","text":"Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases. The Release page displays information about releases. This page provides access to the calendar, release and task details. The left side of the page contains the calendar or list of tasks. Click Calendar to view the calendar. To view tasks, click Tasks . When viewing tasks you can select to view only your tasks or all tasks. Release activities are displayed in a tile or list ( ) format. You can use filters to limit the amount of information shown by typing a filter in the search bar. Additionally, click the filter icon ( ) to limit the activity list to: complete, in progress, or scheduled. Click the release name to view details about the release. Click the tag icon ( ) to toggle on and off the displaying of tags associated with the release activity. To create a new release, click Create release . You can also use this page to access and work with release templates by clicking Templates in the top right corner. Click Archived to view and work with releases removed from the Releases page and the calendar. Parent topic: Release management","title":"Managing releases"},{"location":"com.ibm.crelease.doc/topics/cr_release_managedetails/","text":"Managing a release Use the release details page to view details about a specific release. When you access a release from the Release page you can view details about the release, such as the deployment plans associated with the release. View release details by clicking Overview . Click the table heading to display details. Plans displays the plans associated with the release and task status, team, and date that the task is scheduled. You can access additional details by clicking the plan name. The number above the heading is the total number deployment plan related to this release. Task progress displays the associated tasks that are not completed. The table contains information such as type of task, task owner, start and end time, duration, and task dependencies. The heading contains the total number of tasks and the number that are complete. Click the task for additional task information. Release stories displays a list of Jira issues associated with the release. The heading is the total the number of Jira issues. To view additional information for each issue, click the issue. Approvals list the approvals and for each the status of the approval and approver. The heading contains the total number of approvals. Click the approval name for details about a specific approval. Change requests displays a list of ServiceNow change requests. The heading contains the total number of ServiceNow change requests. The Properties section displays properties defined in the plan and property value. You can add or change the property value by double-clicking the Value field of the property. Click the check mark to save the value. Click the tag icon ( ) to toggle on and off the displaying of tags associated with the release activity. To create a new deployment plan, click Create deployment plan . Parent topic: Release management","title":"Managing a release"},{"location":"com.ibm.crelease.doc/topics/cr_release_managedetails/#managing-a-release","text":"Use the release details page to view details about a specific release. When you access a release from the Release page you can view details about the release, such as the deployment plans associated with the release. View release details by clicking Overview . Click the table heading to display details. Plans displays the plans associated with the release and task status, team, and date that the task is scheduled. You can access additional details by clicking the plan name. The number above the heading is the total number deployment plan related to this release. Task progress displays the associated tasks that are not completed. The table contains information such as type of task, task owner, start and end time, duration, and task dependencies. The heading contains the total number of tasks and the number that are complete. Click the task for additional task information. Release stories displays a list of Jira issues associated with the release. The heading is the total the number of Jira issues. To view additional information for each issue, click the issue. Approvals list the approvals and for each the status of the approval and approver. The heading contains the total number of approvals. Click the approval name for details about a specific approval. Change requests displays a list of ServiceNow change requests. The heading contains the total number of ServiceNow change requests. The Properties section displays properties defined in the plan and property value. You can add or change the property value by double-clicking the Value field of the property. Click the check mark to save the value. Click the tag icon ( ) to toggle on and off the displaying of tags associated with the release activity. To create a new deployment plan, click Create deployment plan . Parent topic: Release management","title":"Managing a release"},{"location":"com.ibm.crelease.doc/topics/cr_restore_archive/","text":"Restoring archived releases, plans, and templates You can restore archived releases, deployment plans, and templates. A restored release retains all of its original deployment plans. On the Releases page, click Archived located at the top right corner. The Archive page lists all archived items. The Type column displays whether the items is a release, plan, or template. Locate the item to be archived. You can use filters to find an archived items. Filters can contain keywords, teams, tags, or name. You can also click the table headers to sort the table based on the heading selected. For example, clicking Archived date list the items from earliest archive date to current. For the item to be restored, click the Overflow icon ( ) and click Restore . Repeat this step for each release to be restored. Click Releases to return to the Releases page. Restored releases are displayed in the list of releases. Restored releases retains all of its original deployment plans. Restored deployment plans have a status of draft . Parent topic: Release management","title":"Restoring archived releases, plans, and templates"},{"location":"com.ibm.crelease.doc/topics/cr_restore_archive/#restoring-archived-releases-plans-and-templates","text":"You can restore archived releases, deployment plans, and templates. A restored release retains all of its original deployment plans. On the Releases page, click Archived located at the top right corner. The Archive page lists all archived items. The Type column displays whether the items is a release, plan, or template. Locate the item to be archived. You can use filters to find an archived items. Filters can contain keywords, teams, tags, or name. You can also click the table headers to sort the table based on the heading selected. For example, clicking Archived date list the items from earliest archive date to current. For the item to be restored, click the Overflow icon ( ) and click Restore . Repeat this step for each release to be restored. Click Releases to return to the Releases page. Restored releases are displayed in the list of releases. Restored releases retains all of its original deployment plans. Restored deployment plans have a status of draft . Parent topic: Release management","title":"Restoring archived releases, plans, and templates"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_DRA/","text":"Deployment risk analysis tasks Use deployment risk analysis (DRA) tasks to enforce quality standards and gates. Configure a Jenkins job that uses the IBM Cloud DevOps Insights service . Reference that job with the DRA task. On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Deployment Risk Analysis . In the Name field, enter a name for the task. In the API Key field, enter the API key for your IBM Cloud DevOps Insights service. In the Application name field, enter the name of the DevOps Insights application. In the Jenkins Job or Pipeline field, select pipeline or job that uses the DRA application. In the Build Number field, enter the Jenkins build number. Click Save . Parent topic: Tasks","title":"Deployment risk analysis tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_DRA/#deployment-risk-analysis-tasks","text":"Use deployment risk analysis (DRA) tasks to enforce quality standards and gates. Configure a Jenkins job that uses the IBM Cloud DevOps Insights service . Reference that job with the DRA task. On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Deployment Risk Analysis . In the Name field, enter a name for the task. In the API Key field, enter the API key for your IBM Cloud DevOps Insights service. In the Application name field, enter the name of the DevOps Insights application. In the Jenkins Job or Pipeline field, select pipeline or job that uses the DRA application. In the Build Number field, enter the Jenkins build number. Click Save . Parent topic: Tasks","title":"Deployment risk analysis tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_Jenkins/","text":"Creating Jenkins tasks A Jenkins task runs a job in your integrated Jenkins instance. Before using Jenkins tasks in your deployments, add the UrbanCode Velocity plug-in to your Jenkins instance and configure an integration. After integrating UrbanCode Velocity to Jenkins, you can add Jenkins jobs to you pipelines and releases. To create a Jenkins task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Jenkins . In the Name field, enter a name for the task. In the Jenkins Job or Pipeline field, select a job or pipeline. In the Duration field, estimate the length of the task. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating Jenkins tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_Jenkins/#creating-jenkins-tasks","text":"A Jenkins task runs a job in your integrated Jenkins instance. Before using Jenkins tasks in your deployments, add the UrbanCode Velocity plug-in to your Jenkins instance and configure an integration. After integrating UrbanCode Velocity to Jenkins, you can add Jenkins jobs to you pipelines and releases. To create a Jenkins task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Jenkins . In the Name field, enter a name for the task. In the Jenkins Job or Pipeline field, select a job or pipeline. In the Duration field, estimate the length of the task. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating Jenkins tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_UCD/","text":"Creating UrbanCode Deploy tasks Use UrbanCode Deploy tasks to run UrbanCode Deploy applications. Before you can use UrbanCode Deploy tasks in pipelines and deployment plans, you must first configure an UrbanCode Deploy integration . The applications that are available to a deployment plan depend on the team that is assigned to the plan. The applications that are managed by the team in UrbanCode Deploy are also available in UrbanCode Velocity. To create this task type, specify the application's process, version, and environment. You can set the version and environment at design time or select them at run time. When you run this task, the application runs in the integrated UrbanCode Deploy instance. During deployments, UrbanCode Deploy tasks start automatically when they become eligible to run. To create an UrbanCode Deploy task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select UrbanCode Deploy . In the Name field, enter a name for the task. In the Application Name list, select an application. In the Process list, select an application process. Processes that belong to the selected UrbanCode Deploy application are available. In the Environment list, select an application environment. Environments that belong to the selected UrbanCode Deploy application are available. To postpone selecting an environment until you are ready to run the deployment, select Use Version tab. In the Version list, select an application version. Versions refer to IBM UrbanCode Deploy application snapshots. Versions that belong to the selected application are available. To postpone selecting a version, select Use Version Tab . If the application process does not require a version, select No Version . You might select this last option if you are running a configuration-type process that does not require components. In the Duration (minutes) field, enter the number of minutes that you expect the task to run until it is completed. The estimated duration is used to calculate expected deployment times. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. Click Save . The task is inserted into the deployment plan. After the task is created, the plan's Version tab is updated with information about the application. If you selected Use Version Tab for the application environment and version, use the Version tab to set those options before running the deployment. Parent topic: Tasks","title":"Creating UrbanCode Deploy tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_UCD/#creating-urbancode-deploy-tasks","text":"Use UrbanCode Deploy tasks to run UrbanCode Deploy applications. Before you can use UrbanCode Deploy tasks in pipelines and deployment plans, you must first configure an UrbanCode Deploy integration . The applications that are available to a deployment plan depend on the team that is assigned to the plan. The applications that are managed by the team in UrbanCode Deploy are also available in UrbanCode Velocity. To create this task type, specify the application's process, version, and environment. You can set the version and environment at design time or select them at run time. When you run this task, the application runs in the integrated UrbanCode Deploy instance. During deployments, UrbanCode Deploy tasks start automatically when they become eligible to run. To create an UrbanCode Deploy task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select UrbanCode Deploy . In the Name field, enter a name for the task. In the Application Name list, select an application. In the Process list, select an application process. Processes that belong to the selected UrbanCode Deploy application are available. In the Environment list, select an application environment. Environments that belong to the selected UrbanCode Deploy application are available. To postpone selecting an environment until you are ready to run the deployment, select Use Version tab. In the Version list, select an application version. Versions refer to IBM UrbanCode Deploy application snapshots. Versions that belong to the selected application are available. To postpone selecting a version, select Use Version Tab . If the application process does not require a version, select No Version . You might select this last option if you are running a configuration-type process that does not require components. In the Duration (minutes) field, enter the number of minutes that you expect the task to run until it is completed. The estimated duration is used to calculate expected deployment times. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. Click Save . The task is inserted into the deployment plan. After the task is created, the plan's Version tab is updated with information about the application. If you selected Use Version Tab for the application environment and version, use the Version tab to set those options before running the deployment. Parent topic: Tasks","title":"Creating UrbanCode Deploy tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_another/","text":"Creating run another plan tasks A run another plan task runs a deployment for another deployment plan. The targeted plan can be created from a template or a tag. If you use a template, the template and the targeted plan must be in the same release as the run another plan task. To create a run another plan task, complete the following steps: On the Deployment Plan Details page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before you use the Create Task action. The new task is inserted before the selected task. In the Create Task dialog box, in the Type list, select Run Run another plan . In the Name field, enter a name for the task. In the How do you want to choose another plan area, select an option. If you choose, By template , the template and associated deployment plan must be in the same release as the task's parent plan. If you choose, By tag , the tagged deployment plan must be in the same release as the task's parent plan. In the Plan Template Name list, select a deployment plan template. The template and associated deployment plan must be in the same release as the task's parent plan. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in text box. Click Save . The task is inserted into the deployment plan. When the task runs, a deployment starts for the deployment plan that was created from the selected template or tagged plan. If multiple plans in the release event are eligible, deployments start for all of them. While the other deployments run, status information is provided by the run another plan task. Expand the task to see the status information. You can open the other deployments by using links on the task. While the other deployments run, the run another plan task has a status of In Progress . Parent topic: Tasks","title":"Creating run another plan tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_another/#creating-run-another-plan-tasks","text":"A run another plan task runs a deployment for another deployment plan. The targeted plan can be created from a template or a tag. If you use a template, the template and the targeted plan must be in the same release as the run another plan task. To create a run another plan task, complete the following steps: On the Deployment Plan Details page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before you use the Create Task action. The new task is inserted before the selected task. In the Create Task dialog box, in the Type list, select Run Run another plan . In the Name field, enter a name for the task. In the How do you want to choose another plan area, select an option. If you choose, By template , the template and associated deployment plan must be in the same release as the task's parent plan. If you choose, By tag , the tagged deployment plan must be in the same release as the task's parent plan. In the Plan Template Name list, select a deployment plan template. The template and associated deployment plan must be in the same release as the task's parent plan. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in text box. Click Save . The task is inserted into the deployment plan. When the task runs, a deployment starts for the deployment plan that was created from the selected template or tagged plan. If multiple plans in the release event are eligible, deployments start for all of them. While the other deployments run, status information is provided by the run another plan task. Expand the task to see the status information. You can open the other deployments by using links on the task. While the other deployments run, the run another plan task has a status of In Progress . Parent topic: Tasks","title":"Creating run another plan tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_delay/","text":"Creating delay tasks Delayed-type tasks represent milestones or critical events during a deployment. With delayed tasks, you can ensure that important tasks start at the expected time. Typically, delayed tasks are prerequisites for other important tasks. A delayed task starts as soon as it is eligible to run, and it finishes at a user-specified time. A started delayed-type task has a status of `In Progress` until it reaches its planned-for time, when it then changes its status to `Complete`. When a delayed tasks completes, auto tasks that are dependent on it start running. Complete the following tasks to create a delayed task: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Delayed . In the Name field, enter a name for the task. In the Delay type field, select the method used to determine the length of the delay. If you select **Delay by selecting a time and time zone**, use the **Time** and **Time Zone** fields to specify when the task will complete. Otherwise, enter a property name in the **Delay property** field. The property value can be set at run-time when the deployment starts. [See the Properties reference for information about properties](/docs/services/UCCR/UCCR_property_ref.html#property_overview) Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating delay tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_delay/#creating-delay-tasks","text":"Delayed-type tasks represent milestones or critical events during a deployment. With delayed tasks, you can ensure that important tasks start at the expected time. Typically, delayed tasks are prerequisites for other important tasks. A delayed task starts as soon as it is eligible to run, and it finishes at a user-specified time. A started delayed-type task has a status of `In Progress` until it reaches its planned-for time, when it then changes its status to `Complete`. When a delayed tasks completes, auto tasks that are dependent on it start running. Complete the following tasks to create a delayed task: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Delayed . In the Name field, enter a name for the task. In the Delay type field, select the method used to determine the length of the delay. If you select **Delay by selecting a time and time zone**, use the **Time** and **Time Zone** fields to specify when the task will complete. Otherwise, enter a property name in the **Delay property** field. The property value can be set at run-time when the deployment starts. [See the Properties reference for information about properties](/docs/services/UCCR/UCCR_property_ref.html#property_overview) Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating delay tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_email/","text":"Creating email tasks An email task sends an email message when the task runs. You specify the email's recipients and message when you create the task. Email tasks are auto tasks and run as soon as they are eligible. Before using email tasks in your deployments, setup an email server. To create an email task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Email . In the Name field, enter a name for the task. In the Recipients field, enter or select the email's recipient. The list of available recipients includes the users and groups who are members the team that manages the task. You can also type the email addresses of non-team members. You can specify multiple recipients. In the Email subject field, enter the email topic. You can use properties in this field. In the Email message field, enter or paste the email message. You can use properties in this field. You example, you might notify email recipients that a release is started by using a message similar to this one, \"The ${sys:release.name} release has started.\" See the Properties reference for information about properties . Click Save . The task is inserted into the deployment plan. When the task runs, the recipients receive an email from UrbanCode Velocity with the subject you specified when you created the task. Parent topic: Tasks","title":"Creating email tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_email/#creating-email-tasks","text":"An email task sends an email message when the task runs. You specify the email's recipients and message when you create the task. Email tasks are auto tasks and run as soon as they are eligible. Before using email tasks in your deployments, setup an email server. To create an email task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Email . In the Name field, enter a name for the task. In the Recipients field, enter or select the email's recipient. The list of available recipients includes the users and groups who are members the team that manages the task. You can also type the email addresses of non-team members. You can specify multiple recipients. In the Email subject field, enter the email topic. You can use properties in this field. In the Email message field, enter or paste the email message. You can use properties in this field. You example, you might notify email recipients that a release is started by using a message similar to this one, \"The ${sys:release.name} release has started.\" See the Properties reference for information about properties . Click Save . The task is inserted into the deployment plan. When the task runs, the recipients receive an email from UrbanCode Velocity with the subject you specified when you created the task. Parent topic: Tasks","title":"Creating email tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_header/","text":"Creating header/note tasks Header tasks represent organization elements that you can add to deployment plans. If you create a task group, you might identify the group with a header task. Header tasks can have dependencies like any other task. You can organize task groups with header/note tasks. You can create a note by adding information about a group or task. When you import a deployment plan from IBM UrbanCode Release, segment tasks are bracketed by note-type Start Segment and End Segment tasks. Segment dependencies are represented by dependencies to End Segment tasks. To create a header task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Header . In the Name field, enter a name for the task. In the Description field, enter or paste a description. You might enter a note, a reminder, or other instructions in the field. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating header/note tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_header/#creating-headernote-tasks","text":"Header tasks represent organization elements that you can add to deployment plans. If you create a task group, you might identify the group with a header task. Header tasks can have dependencies like any other task. You can organize task groups with header/note tasks. You can create a note by adding information about a group or task. When you import a deployment plan from IBM UrbanCode Release, segment tasks are bracketed by note-type Start Segment and End Segment tasks. Segment dependencies are represented by dependencies to End Segment tasks. To create a header task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Header . In the Name field, enter a name for the task. In the Description field, enter or paste a description. You might enter a note, a reminder, or other instructions in the field. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating header/note tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_manual/","text":"Creating manual tasks Manual tasks represent some activity that is associated with a software release. Manual tasks have a start point, end point, and a measurable duration. To create a manual task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Manual . In the Name field, enter a name for the task. In the Duration (minutes) field, enter the number of minutes that you expect the task to run until it is completed. The estimated duration is used to calculate expected deployment times. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. In the Assigned groups and users list, select the task owner. The assigned user runs the task during deployment. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating manual tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_manual/#creating-manual-tasks","text":"Manual tasks represent some activity that is associated with a software release. Manual tasks have a start point, end point, and a measurable duration. To create a manual task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Manual . In the Name field, enter a name for the task. In the Duration (minutes) field, enter the number of minutes that you expect the task to run until it is completed. The estimated duration is used to calculate expected deployment times. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. In the Assigned groups and users list, select the task owner. The assigned user runs the task during deployment. Click Save . The task is inserted into the deployment plan. Parent topic: Tasks","title":"Creating manual tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_serviceNow/","text":"Creating ServiceNow tasks A ServiceNow task can create and update ServiceNow change requests. ServiceNow task prerequisites: ServiceNow tasks work with Internet-accessible instances of ServiceNow, such as my_instance.service-now.com . ServiceNow tasks work with the Jakarta release of ServiceNow, and references the current API version. The user supplying credentials for the task must have access to the ServiceNow API, and permission to see and modify all change request fields. At a minimum, the user must be in a ServiceNow role that has the Create Change permission. A ServiceNow task can perform one of the following actions: Create creates a ServiceNow change request. You can set the values for all request fields, and pass the request ID to update, and wait tasks. Update can update the values for any request field. Wait waits for a particular value in a specific field. The field can be any field on the change request. A ServiceNow task can include ServiceNow properties and UrbanCode Velocity properties. ServiceNow properties have the following syntax: propertyName=value . This short video describes how to use ServiceNow with UrbanCode Velocity. To create a ServiceNow task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select ServiceNow . In the Name field, enter a name for the task. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. In the Connection settings area, enter the URL of the ServiceNow instance, and the user ID, and password of the ServiceNow user. In the Action list, select the action type for the task. The action types are defined in this list: The create action creates a ServiceNow change request with the properties defined in the task. The update action modifies properties in change request. The wait action waits for a specific value in a change request field. Complete the action-specific parameters, as described in the following tables: Create action Description Request type You can use the ServiceNow default types or a user-created type. Default types are normal, emergency, and standard. Normal requests pass through all stages of the ServiceNow state model. Standard types are pre-authorized and skip the Assess and Authorize states. Emergency types skip the Assess state. Short description The text you enter is displayed in the Short description field of the ServiceNow change request. Assignment group The ServiceNow agent or group responsible for resolving the change request. Possible assignees include agents and groups available to the ServiceNow instance. Additional properties The ServiceNow properties set by this task. Each property must be on its own line. For example, a simple request might include the following fragments: `approval=requested`. Output property UrbanCode Velocity property that contains the change request ID. For example, if you specify service_now_stage_ticket_id , you can use the property with update and wait actions to identify the ticket. Update action Description System ID The ID of the ServiceNow change request. If you capture the ID with a create action Output property field, you can use it here. For example, if you specify service_now_stage_ticket_id in the Output property field of a create action, you can use the ID by specifying ${service_now_stage_ticket_id} . See the Properties reference for information about properties . Additional properties The ServiceNow properties set by this task. Each property must be on its own line. For example, to update the state of the change request, you can specify or state=-1 . Wait action Description System ID The ID of the ServiceNow change request. If you capture the ID with a create action Output property field, you can use it here. For example, if you specify service_now_stage_ticket_id in the Output property field of a create action, you can use the ID by specifying ${service_now_stage_ticket_id} . Field The name of the affected field in the ServiceNow change request. The value in the field is checked for updates by the interval defined by the Check request interval field. For example, if you are checking the approval field, you might specify approval . Value The value expected in the ServiceNow field as defined by the Field property. For example, if you are checking the approval field, you might specify approved . In this example, when the value in the approval field changes to approved , the task completes successfully. Check request interval The value defines how frequently ServiceNow is checked for updates. The value represents minutes. The default value is `1`, which mean ServiceNow is polled every minute. When the task starts, it has the status of In progress . The status changes to Complete when the related ServiceNow action is resolved. The ServiceNow change request life cycle is referred to as the state model. As a change request is used, it progresses through the various states of model. The state of a closed request is 'closed', for example. In UrbanCode Velocity, ServiceNow tasks are frequently used to change the state of a request. To modify a request state, you use the ServiceNow `state` property. For example, to change the state of a request to Review, you can specify `state=0` in the Additional properties field of an Update action. The following table provides the values for the default states for the normal request type. For more information, see the configure dictionary for the state property in the ServiceNow documentation. State Value New -5 Assess -4 Authorize -3 Scheduled -2 Implement -1 Review 0 Closed 3 Canceled 4 Parent topic: Tasks","title":"Creating ServiceNow tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_serviceNow/#creating-servicenow-tasks","text":"A ServiceNow task can create and update ServiceNow change requests. ServiceNow task prerequisites: ServiceNow tasks work with Internet-accessible instances of ServiceNow, such as my_instance.service-now.com . ServiceNow tasks work with the Jakarta release of ServiceNow, and references the current API version. The user supplying credentials for the task must have access to the ServiceNow API, and permission to see and modify all change request fields. At a minimum, the user must be in a ServiceNow role that has the Create Change permission. A ServiceNow task can perform one of the following actions: Create creates a ServiceNow change request. You can set the values for all request fields, and pass the request ID to update, and wait tasks. Update can update the values for any request field. Wait waits for a particular value in a specific field. The field can be any field on the change request. A ServiceNow task can include ServiceNow properties and UrbanCode Velocity properties. ServiceNow properties have the following syntax: propertyName=value . This short video describes how to use ServiceNow with UrbanCode Velocity. To create a ServiceNow task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select ServiceNow . In the Name field, enter a name for the task. In the Tags list, attach a tag to the task. You can select multiple tags. To create a tag, type the tag name in list's text field. In the Connection settings area, enter the URL of the ServiceNow instance, and the user ID, and password of the ServiceNow user. In the Action list, select the action type for the task. The action types are defined in this list: The create action creates a ServiceNow change request with the properties defined in the task. The update action modifies properties in change request. The wait action waits for a specific value in a change request field. Complete the action-specific parameters, as described in the following tables: Create action Description Request type You can use the ServiceNow default types or a user-created type. Default types are normal, emergency, and standard. Normal requests pass through all stages of the ServiceNow state model. Standard types are pre-authorized and skip the Assess and Authorize states. Emergency types skip the Assess state. Short description The text you enter is displayed in the Short description field of the ServiceNow change request. Assignment group The ServiceNow agent or group responsible for resolving the change request. Possible assignees include agents and groups available to the ServiceNow instance. Additional properties The ServiceNow properties set by this task. Each property must be on its own line. For example, a simple request might include the following fragments: `approval=requested`. Output property UrbanCode Velocity property that contains the change request ID. For example, if you specify service_now_stage_ticket_id , you can use the property with update and wait actions to identify the ticket. Update action Description System ID The ID of the ServiceNow change request. If you capture the ID with a create action Output property field, you can use it here. For example, if you specify service_now_stage_ticket_id in the Output property field of a create action, you can use the ID by specifying ${service_now_stage_ticket_id} . See the Properties reference for information about properties . Additional properties The ServiceNow properties set by this task. Each property must be on its own line. For example, to update the state of the change request, you can specify or state=-1 . Wait action Description System ID The ID of the ServiceNow change request. If you capture the ID with a create action Output property field, you can use it here. For example, if you specify service_now_stage_ticket_id in the Output property field of a create action, you can use the ID by specifying ${service_now_stage_ticket_id} . Field The name of the affected field in the ServiceNow change request. The value in the field is checked for updates by the interval defined by the Check request interval field. For example, if you are checking the approval field, you might specify approval . Value The value expected in the ServiceNow field as defined by the Field property. For example, if you are checking the approval field, you might specify approved . In this example, when the value in the approval field changes to approved , the task completes successfully. Check request interval The value defines how frequently ServiceNow is checked for updates. The value represents minutes. The default value is `1`, which mean ServiceNow is polled every minute. When the task starts, it has the status of In progress . The status changes to Complete when the related ServiceNow action is resolved. The ServiceNow change request life cycle is referred to as the state model. As a change request is used, it progresses through the various states of model. The state of a closed request is 'closed', for example. In UrbanCode Velocity, ServiceNow tasks are frequently used to change the state of a request. To modify a request state, you use the ServiceNow `state` property. For example, to change the state of a request to Review, you can specify `state=0` in the Additional properties field of an Update action. The following table provides the values for the default states for the normal request type. For more information, see the configure dictionary for the state property in the ServiceNow documentation. State Value New -5 Assess -4 Authorize -3 Scheduled -2 Implement -1 Review 0 Closed 3 Canceled 4 Parent topic: Tasks","title":"Creating ServiceNow tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_waitForApproval/","text":"Creating wait for approval tasks A Wait for approval task pauses a deployment until a designated user provides approval. Email notifications are sent to users when the task starts. Before using email tasks in your deployments, setup an email server. To create a wait for approval task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Wait for approval . In the Name field, enter a name for the task. In the Approval prompt field, enter the text that you want to include in the email message. The text is displayed in the Task Details section of the email. In the Approvers list, select the users or groups designated to approve the task. Team members and groups are available to choose. In the Required approver area, specify whether all the approvers must approve the task, or a single approver is sufficient. Click Save . The task is inserted into the deployment plan. When the task runs, email notifications are sent to the selected approvers. The deployment plan cannot progress until the task is approved or skipped. Approval is granted by completing the task in the deployment plan. Parent topic: Tasks","title":"Creating wait for approval tasks"},{"location":"com.ibm.crelease.doc/topics/cr_taskType_waitForApproval/#creating-wait-for-approval-tasks","text":"A Wait for approval task pauses a deployment until a designated user provides approval. Email notifications are sent to users when the task starts. Before using email tasks in your deployments, setup an email server. To create a wait for approval task, complete the following steps: On the Deployment plan detail page, click Create Task . If you want to insert a task at a specific position in the plan, select a task before using the Create Task . The new task is inserted above the selected task. On the Create Task dialog box, in the Type list, select Wait for approval . In the Name field, enter a name for the task. In the Approval prompt field, enter the text that you want to include in the email message. The text is displayed in the Task Details section of the email. In the Approvers list, select the users or groups designated to approve the task. Team members and groups are available to choose. In the Required approver area, specify whether all the approvers must approve the task, or a single approver is sufficient. Click Save . The task is inserted into the deployment plan. When the task runs, email notifications are sent to the selected approvers. The deployment plan cannot progress until the task is approved or skipped. Approval is granted by completing the task in the deployment plan. Parent topic: Tasks","title":"Creating wait for approval tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_create/","text":"Creating tasks By default, new tasks are inserted at the bottom of the deployment plan. After a task is created, you can move it, or copy it and paste it into another deployment plan. You can also create dependencies with other tasks . Tasks can be added to a deployment by creating a new task or importing an existing task. After you save a task, action icons are displayed for the task. You use action icons to change the task's status during a deployment. All tasks have the Skip action icon. Other icons, such as Start , are displayed when the context is appropriate for them. From the deployment detail page, click Create task to create one or more tasks. Select the type of task. This field is required. The following are values for this field. Delayed Deployment Risk Analysis Email Header / Note Jenkins Manual Run another plan ServiceNow UrbanCode Deploy Wait for approval Type a name for the task in the Name field. Complete other fields as appropriate. The required and optional fields are dependent on the type of task being created. Click Save and create another to create additional tasks. Click Save when finished. Parent topic: Tasks","title":"Creating tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_create/#creating-tasks","text":"By default, new tasks are inserted at the bottom of the deployment plan. After a task is created, you can move it, or copy it and paste it into another deployment plan. You can also create dependencies with other tasks . Tasks can be added to a deployment by creating a new task or importing an existing task. After you save a task, action icons are displayed for the task. You use action icons to change the task's status during a deployment. All tasks have the Skip action icon. Other icons, such as Start , are displayed when the context is appropriate for them. From the deployment detail page, click Create task to create one or more tasks. Select the type of task. This field is required. The following are values for this field. Delayed Deployment Risk Analysis Email Header / Note Jenkins Manual Run another plan ServiceNow UrbanCode Deploy Wait for approval Type a name for the task in the Name field. Complete other fields as appropriate. The required and optional fields are dependent on the type of task being created. Click Save and create another to create additional tasks. Click Save when finished. Parent topic: Tasks","title":"Creating tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_depend/","text":"Managing task dependencies You can make a task a prerequisite for other tasks. If a task is a prerequisite, dependent tasks cannot start, even if they are otherwise eligible, until the prerequisite task is resolved. A task can have multiple dependent tasks and multiple prerequisite tasks. You can define dependencies for a task with any other task in the deployment plan. However, you cannot create circular dependencies. You cannot, for example, make a task dependent on a task that itself depends on the first task. By controlling task dependencies, you can ensure that events occur in their expected order. To make a task a prerequisite for other tasks, complete the following steps: On the Deployment Plan Details page, select a task or task group, and then click Manage additional prerequisite . You can select multiple tasks and groups. In the Manage Prerequisites for Selected Tasks dialog box, in the Prerequisite tasks for selected tasks list, select the prerequisite task. Click Save . Task dependencies are shown in the Dependencies column on the Deployment Plan Detail page. Up arrows indicate task prerequisites; down arrows indicate task dependencies. In the following figure, the first task does not have any prerequisites and has two tasks dependent on it. The second task has one prerequisite task and there are no tasks dependent on it. To review or modify dependencies, select the task and then click Manage additional prerequisite . Use the Manage Prerequisites for Selected Tasks dialog box to modify or remove dependencies. Parent topic: Tasks","title":"Managing task dependencies"},{"location":"com.ibm.crelease.doc/topics/cr_task_depend/#managing-task-dependencies","text":"You can make a task a prerequisite for other tasks. If a task is a prerequisite, dependent tasks cannot start, even if they are otherwise eligible, until the prerequisite task is resolved. A task can have multiple dependent tasks and multiple prerequisite tasks. You can define dependencies for a task with any other task in the deployment plan. However, you cannot create circular dependencies. You cannot, for example, make a task dependent on a task that itself depends on the first task. By controlling task dependencies, you can ensure that events occur in their expected order. To make a task a prerequisite for other tasks, complete the following steps: On the Deployment Plan Details page, select a task or task group, and then click Manage additional prerequisite . You can select multiple tasks and groups. In the Manage Prerequisites for Selected Tasks dialog box, in the Prerequisite tasks for selected tasks list, select the prerequisite task. Click Save . Task dependencies are shown in the Dependencies column on the Deployment Plan Detail page. Up arrows indicate task prerequisites; down arrows indicate task dependencies. In the following figure, the first task does not have any prerequisites and has two tasks dependent on it. The second task has one prerequisite task and there are no tasks dependent on it. To review or modify dependencies, select the task and then click Manage additional prerequisite . Use the Manage Prerequisites for Selected Tasks dialog box to modify or remove dependencies. Parent topic: Tasks","title":"Managing task dependencies"},{"location":"com.ibm.crelease.doc/topics/cr_task_groups/","text":"Creating task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Tasks can run in a parallel or sequential pattern. When you create the task you, you decide the execution pattern. Tasks without dependencies can execute in any order or simultaneously which is parallel execution. Tasks that must execute in specific order are sequential execution. Tasks are done in list-order starting with the first or top-most task. You can embed groups within other groups. A sequential-pattern group can be embedded within a parallel-pattern group, and vice versa. However, you cannot embed a sequential-pattern group within another sequential group, or a parallel-pattern group within another parallel group. On the details page for a deployment, select two or more tasks. Depending on the type of group you want to create, complete one of the following. To create a parallel group, click the Parallel icon ) ). If you cannot create a parallel group with the selected tasks, the icon is disabled. For example, you cannot create a parallel group if all the selected tasks are already in a parallel group. To create a sequential group, click the Sequential icon ( ). The group is formed and a group select bar is added to the deployment plan. If you selected discontiguous tasks, the tasks form a contiguous list starting with the topmost selected task. Parent topic: Tasks","title":"Creating task groups"},{"location":"com.ibm.crelease.doc/topics/cr_task_groups/#creating-task-groups","text":"You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Tasks can run in a parallel or sequential pattern. When you create the task you, you decide the execution pattern. Tasks without dependencies can execute in any order or simultaneously which is parallel execution. Tasks that must execute in specific order are sequential execution. Tasks are done in list-order starting with the first or top-most task. You can embed groups within other groups. A sequential-pattern group can be embedded within a parallel-pattern group, and vice versa. However, you cannot embed a sequential-pattern group within another sequential group, or a parallel-pattern group within another parallel group. On the details page for a deployment, select two or more tasks. Depending on the type of group you want to create, complete one of the following. To create a parallel group, click the Parallel icon ) ). If you cannot create a parallel group with the selected tasks, the icon is disabled. For example, you cannot create a parallel group if all the selected tasks are already in a parallel group. To create a sequential group, click the Sequential icon ( ). The group is formed and a group select bar is added to the deployment plan. If you selected discontiguous tasks, the tasks form a contiguous list starting with the topmost selected task. Parent topic: Tasks","title":"Creating task groups"},{"location":"com.ibm.crelease.doc/topics/cr_task_groups_manage/","text":"Managing task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. You can recognize task groups in the list of task, there is a bar connects the grouped tasks and contains an icon to identify if it is a parallel or sequential group. parallel sequential The following image shows a parallel group. You can manage task groups in several ways: To move a group, select the group select bar or click anywhere on the group, and then drag it to a new location. To copy a group, select the group and click Copy , and then place the cursor where you want to insert the copied group and click Paste . To cut a group, select the group and click Cut . To ungroup a group, select the group and click the Ungroup icon on the group select bar. To delete the tasks in a group, select the group and click Delete . The tasks are removed from the deployment plan. Parent topic: Tasks","title":"Managing task groups"},{"location":"com.ibm.crelease.doc/topics/cr_task_groups_manage/#managing-task-groups","text":"You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. You can recognize task groups in the list of task, there is a bar connects the grouped tasks and contains an icon to identify if it is a parallel or sequential group. parallel sequential The following image shows a parallel group. You can manage task groups in several ways: To move a group, select the group select bar or click anywhere on the group, and then drag it to a new location. To copy a group, select the group and click Copy , and then place the cursor where you want to insert the copied group and click Paste . To cut a group, select the group and click Cut . To ungroup a group, select the group and click the Ungroup icon on the group select bar. To delete the tasks in a group, select the group and click Delete . The tasks are removed from the deployment plan. Parent topic: Tasks","title":"Managing task groups"},{"location":"com.ibm.crelease.doc/topics/cr_task_manage/","text":"Managing tasks A list of associated tasks can be viewed from a deployment plan page. The list of tasks include details about the task. You use action icons to change the task's status during a deployment, such as start or skip a task. Each task in a deployment plan is contained in a separate row. Use the show icon ( ) to show or remove associated tasks from the list. You can also show or hide tags with the tag icon ( ). The information that is displayed for each task is described in the following table. Property Description Name Task name Type Type of task: Delayed, Deployment Risk Analysis, Email, Header/Note, Jenkins, Manual, Run another plan, ServiceNow, UrbanCode Deploy, and Wait for approval. Status Task status: Not started, complete, failed, skipped, not applicable Owner Person to whom the task is assigned Start time Start time or expected start time based on scheduled start, or estimated duration of other tasks End time Time that the task resolved Duration Length of time in minutes from task start to task resolution. Dependencies Indicates the number of tasks that are prerequisites for the task, and dependent on the task Action icons One or more actions used to change the status of the task during a deployment Tasks are listed in the order that they run. The order of the tasks can be changed by selecting one or more task and dragging to the new location. At the end of each row are applicable action icons associated with the task. Depending on the task you can perform one or more of the following actions. Start task ( ) Skip task ( ) Re-run task ( ) Complete task ( ) Fail task ( ) You can manage the tasks in a deployment plan from the task bar above the table. When a task is selected, the task bar displays and you can perform the following actions. Edit To copy a task or group, select one or more tasks and click Copy , and then place the cursor where you want to insert the copied task and click Paste . To cut a task or group from a deployment plan, select the task and click Cut . To delete a task, select the task and click Delete . The task is removed from the deployment plan. To create a group of tasks that can run simultaneously, select the tasks and click Create parallel group . The group must consist of at least two tasks. To create a group of tasks that are to consecutively, select the tasks and click Create sequential group . This is the default execution pattern. To add and remove tasks that must complete first, select the task and click Manage additional prerequisites . In the dialog box, select or type the prerequisite task. Click X to remove a prerequisite. When finished, click Save . To add or remove tags, select the task and click Manage tags . In the dialog box, type or select tags to add. To remove a tag, click X . When finished, click Save . To view information about when the task started, completed, and errors, click View execution log . Parent topic: Tasks","title":"Managing tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_manage/#managing-tasks","text":"A list of associated tasks can be viewed from a deployment plan page. The list of tasks include details about the task. You use action icons to change the task's status during a deployment, such as start or skip a task. Each task in a deployment plan is contained in a separate row. Use the show icon ( ) to show or remove associated tasks from the list. You can also show or hide tags with the tag icon ( ). The information that is displayed for each task is described in the following table. Property Description Name Task name Type Type of task: Delayed, Deployment Risk Analysis, Email, Header/Note, Jenkins, Manual, Run another plan, ServiceNow, UrbanCode Deploy, and Wait for approval. Status Task status: Not started, complete, failed, skipped, not applicable Owner Person to whom the task is assigned Start time Start time or expected start time based on scheduled start, or estimated duration of other tasks End time Time that the task resolved Duration Length of time in minutes from task start to task resolution. Dependencies Indicates the number of tasks that are prerequisites for the task, and dependent on the task Action icons One or more actions used to change the status of the task during a deployment Tasks are listed in the order that they run. The order of the tasks can be changed by selecting one or more task and dragging to the new location. At the end of each row are applicable action icons associated with the task. Depending on the task you can perform one or more of the following actions. Start task ( ) Skip task ( ) Re-run task ( ) Complete task ( ) Fail task ( ) You can manage the tasks in a deployment plan from the task bar above the table. When a task is selected, the task bar displays and you can perform the following actions. Edit To copy a task or group, select one or more tasks and click Copy , and then place the cursor where you want to insert the copied task and click Paste . To cut a task or group from a deployment plan, select the task and click Cut . To delete a task, select the task and click Delete . The task is removed from the deployment plan. To create a group of tasks that can run simultaneously, select the tasks and click Create parallel group . The group must consist of at least two tasks. To create a group of tasks that are to consecutively, select the tasks and click Create sequential group . This is the default execution pattern. To add and remove tasks that must complete first, select the task and click Manage additional prerequisites . In the dialog box, select or type the prerequisite task. Click X to remove a prerequisite. When finished, click Save . To add or remove tags, select the task and click Manage tags . In the dialog box, type or select tags to add. To remove a tag, click X . When finished, click Save . To view information about when the task started, completed, and errors, click View execution log . Parent topic: Tasks","title":"Managing tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_ov/","text":"Tasks A task represents a business-meaningful activity that is associated with a software deployment. Each task is defined on a separate row in a deployment plan. During a deployment, you run tasks defined in the deployment plan to complete the deployment. Most tasks have a starting and ending point, and a measurable duration. A task can have other attributes depending on its type. A task can be of one of following types: Delayed Represents a critical event that happens at a specific time. Deployment Risk Analysis use the IBM Cloud service DevOps Insights..??? Email Sends an email message. Header/Note an organizational element. For example, you might use a header task to identify a task group. Jenkins Runs a Jenkins job or pipeline. Manual Represents any activity that is associated with a software deployment, such as taking a server offline or updating a database. Users assigned manual tasks can be sent email notifications when their tasks start or fail. Run another plan Runs deployments for other deployment plans participating in the same release event. This is an experimental task type. ServiceNow Creates and manages ServiceNow tickets. UrbanCode Deploy Represents an IBM UrbanCode Deploy application. Use this task to run UrbanCode Deploy applications. Wait for approval Pauses a deployment until the designated users approve the task. You can add tasks to deployment plans by one of the following methods: Create a new task Import from CSV files that are created by UrbanCode Release or another application Copy tasks from other deployment plans Additionally, tasks are auto-created when you add an application to a pipeline . Managing tasks A list of associated tasks can be viewed from a deployment plan page. The list of tasks include details about the task. You use action icons to change the task's status during a deployment, such as start or skip a task. Creating tasks By default, new tasks are inserted at the bottom of the deployment plan. After a task is created, you can move it, or copy it and paste it into another deployment plan. You can also create dependencies with other tasks . Managing task dependencies You can make a task a prerequisite for other tasks. If a task is a prerequisite, dependent tasks cannot start, even if they are otherwise eligible, until the prerequisite task is resolved. Creating task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Managing task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Managing task tags Tags are organizing elements that you can add to tasks. You can filter deployment plans by tag. For example, during a deployment to a production environment, you might disable tasks with the `DEV_only` tag, which is intended to be used only in development environments. Creating run another plan tasks A run another plan task runs a deployment for another deployment plan. Creating delay tasks Delayed-type tasks represent milestones or critical events during a deployment. With delayed tasks, you can ensure that important tasks start at the expected time. Typically, delayed tasks are prerequisites for other important tasks. Deployment risk analysis tasks Use deployment risk analysis (DRA) tasks to enforce quality standards and gates. Creating email tasks An email task sends an email message when the task runs. You specify the email's recipients and message when you create the task. Email tasks are auto tasks and run as soon as they are eligible. Creating header/note tasks Header tasks represent organization elements that you can add to deployment plans. If you create a task group, you might identify the group with a header task. Header tasks can have dependencies like any other task. Creating Jenkins tasks A Jenkins task runs a job in your integrated Jenkins instance. Creating manual tasks Manual tasks represent some activity that is associated with a software release. Manual tasks have a start point, end point, and a measurable duration. Creating ServiceNow tasks A ServiceNow task can create and update ServiceNow change requests. Creating UrbanCode Deploy tasks Use UrbanCode Deploy tasks to run UrbanCode Deploy applications. Creating wait for approval tasks A Wait for approval task pauses a deployment until a designated user provides approval. Email notifications are sent to users when the task starts. Parent topic: Release management","title":"Tasks overview"},{"location":"com.ibm.crelease.doc/topics/cr_task_ov/#tasks","text":"A task represents a business-meaningful activity that is associated with a software deployment. Each task is defined on a separate row in a deployment plan. During a deployment, you run tasks defined in the deployment plan to complete the deployment. Most tasks have a starting and ending point, and a measurable duration. A task can have other attributes depending on its type. A task can be of one of following types: Delayed Represents a critical event that happens at a specific time. Deployment Risk Analysis use the IBM Cloud service DevOps Insights..??? Email Sends an email message. Header/Note an organizational element. For example, you might use a header task to identify a task group. Jenkins Runs a Jenkins job or pipeline. Manual Represents any activity that is associated with a software deployment, such as taking a server offline or updating a database. Users assigned manual tasks can be sent email notifications when their tasks start or fail. Run another plan Runs deployments for other deployment plans participating in the same release event. This is an experimental task type. ServiceNow Creates and manages ServiceNow tickets. UrbanCode Deploy Represents an IBM UrbanCode Deploy application. Use this task to run UrbanCode Deploy applications. Wait for approval Pauses a deployment until the designated users approve the task. You can add tasks to deployment plans by one of the following methods: Create a new task Import from CSV files that are created by UrbanCode Release or another application Copy tasks from other deployment plans Additionally, tasks are auto-created when you add an application to a pipeline . Managing tasks A list of associated tasks can be viewed from a deployment plan page. The list of tasks include details about the task. You use action icons to change the task's status during a deployment, such as start or skip a task. Creating tasks By default, new tasks are inserted at the bottom of the deployment plan. After a task is created, you can move it, or copy it and paste it into another deployment plan. You can also create dependencies with other tasks . Managing task dependencies You can make a task a prerequisite for other tasks. If a task is a prerequisite, dependent tasks cannot start, even if they are otherwise eligible, until the prerequisite task is resolved. Creating task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Managing task groups You can combine two or more tasks into a task group. When you create a group, you define the whether the group task are executed sequentially or in parallel. Managing task tags Tags are organizing elements that you can add to tasks. You can filter deployment plans by tag. For example, during a deployment to a production environment, you might disable tasks with the `DEV_only` tag, which is intended to be used only in development environments. Creating run another plan tasks A run another plan task runs a deployment for another deployment plan. Creating delay tasks Delayed-type tasks represent milestones or critical events during a deployment. With delayed tasks, you can ensure that important tasks start at the expected time. Typically, delayed tasks are prerequisites for other important tasks. Deployment risk analysis tasks Use deployment risk analysis (DRA) tasks to enforce quality standards and gates. Creating email tasks An email task sends an email message when the task runs. You specify the email's recipients and message when you create the task. Email tasks are auto tasks and run as soon as they are eligible. Creating header/note tasks Header tasks represent organization elements that you can add to deployment plans. If you create a task group, you might identify the group with a header task. Header tasks can have dependencies like any other task. Creating Jenkins tasks A Jenkins task runs a job in your integrated Jenkins instance. Creating manual tasks Manual tasks represent some activity that is associated with a software release. Manual tasks have a start point, end point, and a measurable duration. Creating ServiceNow tasks A ServiceNow task can create and update ServiceNow change requests. Creating UrbanCode Deploy tasks Use UrbanCode Deploy tasks to run UrbanCode Deploy applications. Creating wait for approval tasks A Wait for approval task pauses a deployment until a designated user provides approval. Email notifications are sent to users when the task starts. Parent topic: Release management","title":"Tasks"},{"location":"com.ibm.crelease.doc/topics/cr_task_tags/","text":"Managing task tags Tags are organizing elements that you can add to tasks. You can filter deployment plans by tag. For example, during a deployment to a production environment, you might disable tasks with the `DEV_only` tag, which is intended to be used only in development environments. To add a tag to a task, complete the following steps: On the Deployment Plan Details page, select a task or task group, and then click Manage Tags . You can select multiple tasks and groups. In the Manage Tags for Selected Tasks dialog box, in the Common Tags list, select tags. You can create a new tag by typing a name in the list's text box. Click Save . Tags are displayed on the task rows in the Deployment Plan Detail page. In the following figure, the Deploy WAR task has two tags assigned to it, Deployment , and Critical . The tags used by a deployment plan are displayed on the Deployment Plan Detail page Versions tab. To render tasks with a specific tag Not Applicable for a deployment, clear the tag. Tasks with the Not Applicable status cannot be started. Parent topic: Tasks","title":"Managing task tags"},{"location":"com.ibm.crelease.doc/topics/cr_task_tags/#managing-task-tags","text":"Tags are organizing elements that you can add to tasks. You can filter deployment plans by tag. For example, during a deployment to a production environment, you might disable tasks with the `DEV_only` tag, which is intended to be used only in development environments. To add a tag to a task, complete the following steps: On the Deployment Plan Details page, select a task or task group, and then click Manage Tags . You can select multiple tasks and groups. In the Manage Tags for Selected Tasks dialog box, in the Common Tags list, select tags. You can create a new tag by typing a name in the list's text box. Click Save . Tags are displayed on the task rows in the Deployment Plan Detail page. In the following figure, the Deploy WAR task has two tags assigned to it, Deployment , and Critical . The tags used by a deployment plan are displayed on the Deployment Plan Detail page Versions tab. To render tasks with a specific tag Not Applicable for a deployment, clear the tag. Tasks with the Not Applicable status cannot be started. Parent topic: Tasks","title":"Managing task tags"},{"location":"com.ibm.insights.doc/topics/c_install_kubernetes_config/","text":"Kubernetes configuration properties There are a number of configuration properties that can be specified during the install process. Configuration properties can be specified on the helm install command. Property Default Description adminpassword admin Required. The password for the built-in admin user ID used to perform administrator tasks. access.key Required. The access key that was obtain when registering for the product. To obtain a free key go the Request access key page encrypt.key Required. A unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on and specify a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. mongo.url Required. The URL and login credentials for the MongoDB container, specified in the following format:``` mongodb://username:password@service_name/URL:port/database_name ``` | |url.domain| |Required. The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name.| |consumer.image.repository|velocity-conusmer|The name of the consumer node image.| |consumer.image.tag|latest|The tag of the consumer node image.| |consumer.image.pullPolicy|Always|Pull the consumer node image before starting the container.| |consumer.service.type|NodePort|The Kubernetes service type for the consumer node.| |consumer.service.nodePort|32004|Maps the Kubernetes internal service port (internalPort) to the Kubernetes service node port ( NodePort).| |consumer.service.externalPort|6004|Maps the Kubernetes internal service port (internalPort) to the Kubernetes external service port ( externalPort).| |ingress.enabled|false|Specify whether Ingress is enabled or not.| |loglevel|error|The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off.| |prefixname|velocity|The prefix to be added to all pods, services and Ingress names. The value is limited to 20 characters.| |ui.image.repository|velocity-ui|The name of the user interface image.| |ui.image.tag|latest|The user interface image tag.| |ui.image.pullPolicy|Always|Pull the user interface node image before starting the container.| |ui.service.type|NodePort|The type of service of the user interface node.| |ui.service.nodePort|32080|Maps the user interface node internal port to the NodePort.| |ui.service.nodeSSLPort|32443|Maps the user interface node internal SSL port to the NodePort.| |ui.service.externalPort|6005|Maps the user interface node internalPort to the externalPort.| |ui.service.externalSSLPort|6443|Maps the user interface node internal SSL port to the external SSL port.| |url.protocol|https|The type of protocol.| Parent topic: Installing into a Kubernetes cluster","title":"Kubernetes configuration properties"},{"location":"com.ibm.insights.doc/topics/c_install_kubernetes_config/#kubernetes-configuration-properties","text":"There are a number of configuration properties that can be specified during the install process. Configuration properties can be specified on the helm install command. Property Default Description adminpassword admin Required. The password for the built-in admin user ID used to perform administrator tasks. access.key Required. The access key that was obtain when registering for the product. To obtain a free key go the Request access key page encrypt.key Required. A unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on and specify a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. mongo.url Required. The URL and login credentials for the MongoDB container, specified in the following format:``` mongodb://username:password@service_name/URL:port/database_name ``` | |url.domain| |Required. The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name.| |consumer.image.repository|velocity-conusmer|The name of the consumer node image.| |consumer.image.tag|latest|The tag of the consumer node image.| |consumer.image.pullPolicy|Always|Pull the consumer node image before starting the container.| |consumer.service.type|NodePort|The Kubernetes service type for the consumer node.| |consumer.service.nodePort|32004|Maps the Kubernetes internal service port (internalPort) to the Kubernetes service node port ( NodePort).| |consumer.service.externalPort|6004|Maps the Kubernetes internal service port (internalPort) to the Kubernetes external service port ( externalPort).| |ingress.enabled|false|Specify whether Ingress is enabled or not.| |loglevel|error|The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off.| |prefixname|velocity|The prefix to be added to all pods, services and Ingress names. The value is limited to 20 characters.| |ui.image.repository|velocity-ui|The name of the user interface image.| |ui.image.tag|latest|The user interface image tag.| |ui.image.pullPolicy|Always|Pull the user interface node image before starting the container.| |ui.service.type|NodePort|The type of service of the user interface node.| |ui.service.nodePort|32080|Maps the user interface node internal port to the NodePort.| |ui.service.nodeSSLPort|32443|Maps the user interface node internal SSL port to the NodePort.| |ui.service.externalPort|6005|Maps the user interface node internalPort to the externalPort.| |ui.service.externalSSLPort|6443|Maps the user interface node internal SSL port to the external SSL port.| |url.protocol|https|The type of protocol.| Parent topic: Installing into a Kubernetes cluster","title":"Kubernetes configuration properties"},{"location":"com.ibm.insights.doc/topics/c_install_requirements/","text":"System requirements Before starting the installation process verify that the necessary requirements are met. UrbanCode\u2122 Velocity can be installed in one of the following container management systems. Kubernetes 1.4+ with Beta APIs enabled MongoDB with persistent volume Docker Compose version 17.09.0-ce, build afdb6d4 and later MongoDB document database For Kubernetes environment a MongoDB with persistent volume IBM UrbanCode\u2122 Deploy Version 6.2.3 and later If using a version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. Helm if installing in a Kubernetes system You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool. Parent topic: Installation roadmap","title":"System requirements"},{"location":"com.ibm.insights.doc/topics/c_install_requirements/#system-requirements","text":"Before starting the installation process verify that the necessary requirements are met. UrbanCode\u2122 Velocity can be installed in one of the following container management systems. Kubernetes 1.4+ with Beta APIs enabled MongoDB with persistent volume Docker Compose version 17.09.0-ce, build afdb6d4 and later MongoDB document database For Kubernetes environment a MongoDB with persistent volume IBM UrbanCode\u2122 Deploy Version 6.2.3 and later If using a version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. Helm if installing in a Kubernetes system You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool. Parent topic: Installation roadmap","title":"System requirements"},{"location":"com.ibm.insights.doc/topics/c_install_roadmap/","text":"Installation roadmap The installation roadmap is a description of the high-level steps for installing UrbanCode\u2122 Velocity. Each of these tasks must be performed to complete the install process. However, the actual process is different depending on whether you are installing in a Kubernetes cluster or as a Docker Compose application. Obtain an access key An access key is required to start the install process. If you have not already requested an access key, visit the Request access key website page to complete a customer profile. The access key will be sent to your email. The key will expire in seven days. If the key expires, you will need to complete the registration form information and request another key. You'll also be required to read the Terms and Conditions agreement from the registration page. The license must be accepted to complete the install process. Verify requirements Verify that your computer meets the minimum hardware and software requirements for installing the product. Make sure that your user ID meets the requirements for installing and configuring the product. The user ID being used must be able to make changes to the computer. Verify internet connection The installation process requires internet connection. The commands used during the install process pull the install images to be placed into containers. If you are unable to access the internet during the installation, the install images will need to have been previously downloaded and placed in a docker repository that the installation commands have accessed. Verify the container management system Verify that one of the supported container management systems is available. The installation process is different depending on the management system that you use. If you do not currently have a system, follow the Docker Compose installation instructions because it includes installing a Docker Compose system. If using the Kubernetes cluster management system, verify that a MongoDB is included. Install UrbanCode Velocity into your environment. The install process depends on whether the container management system is Kubernetes or Docker Compose. If you do not have either available, follow the installation instructions for installing as a Docker Compose application which includes installing Docker Compose. Installing into a Kubernetes cluster Installing as a Docker Compose application Integrate with source repository and authenticate users After the installation is complete, you can access the configuration pages to integrate with UrbanCode Deploy and authenticate users. The integration process is required. No report data is available until the integration process is complete. Authenticating users to access reports is not required. However; until users are authenticated only the administrator user has access. Parent topic: Installation roadmap","title":"Installation roadmap"},{"location":"com.ibm.insights.doc/topics/c_install_roadmap/#installation-roadmap","text":"The installation roadmap is a description of the high-level steps for installing UrbanCode\u2122 Velocity. Each of these tasks must be performed to complete the install process. However, the actual process is different depending on whether you are installing in a Kubernetes cluster or as a Docker Compose application. Obtain an access key An access key is required to start the install process. If you have not already requested an access key, visit the Request access key website page to complete a customer profile. The access key will be sent to your email. The key will expire in seven days. If the key expires, you will need to complete the registration form information and request another key. You'll also be required to read the Terms and Conditions agreement from the registration page. The license must be accepted to complete the install process. Verify requirements Verify that your computer meets the minimum hardware and software requirements for installing the product. Make sure that your user ID meets the requirements for installing and configuring the product. The user ID being used must be able to make changes to the computer. Verify internet connection The installation process requires internet connection. The commands used during the install process pull the install images to be placed into containers. If you are unable to access the internet during the installation, the install images will need to have been previously downloaded and placed in a docker repository that the installation commands have accessed. Verify the container management system Verify that one of the supported container management systems is available. The installation process is different depending on the management system that you use. If you do not currently have a system, follow the Docker Compose installation instructions because it includes installing a Docker Compose system. If using the Kubernetes cluster management system, verify that a MongoDB is included. Install UrbanCode Velocity into your environment. The install process depends on whether the container management system is Kubernetes or Docker Compose. If you do not have either available, follow the installation instructions for installing as a Docker Compose application which includes installing Docker Compose. Installing into a Kubernetes cluster Installing as a Docker Compose application Integrate with source repository and authenticate users After the installation is complete, you can access the configuration pages to integrate with UrbanCode Deploy and authenticate users. The integration process is required. No report data is available until the integration process is complete. Authenticating users to access reports is not required. However; until users are authenticated only the administrator user has access. Parent topic: Installation roadmap","title":"Installation roadmap"},{"location":"com.ibm.insights.doc/topics/c_overview_concepts/","text":"Concepts The UrbanCode\u2122 Velocity Community Edition architecture allows for continuable access to your UrbanCode Deploy deployment data without impacting its performance. UrbanCode Velocity is installed in a Docker Compose or Kubernetes container management system. A MongoDB database is also required and installed in a separate container. After a connection is made to a source-control repository, the data is mined automatically from the repository and maintained on the MongoDB. There are two UrbanCode Velocity components and each resides in a separate container. The User Interface node which provides access UrbanCode Velocity features. The Consumer node which serves as the communication vehicle between the repository and the MongoDB database. A typical flow includes the following: A defined user requests a report using the UrbanCode Velocity user interface available through a web browser. The request is sent to the MongoDB database to format the report and return it to the user interface. The report is viewed from the interface and filters can be applied to focus on specific portions of the data. Reports can also be based on logical grouping of applications and lines of businesses. The MongoDB database is refreshed every fifteen minutes with updates from the UrbanCode Deploy server. The Consumer Node provides communication between UrbanCode Deploy server and the MongoDB database and ensures that data is synchronized on a fifteen minute interval. The synchronized data is maintained in the MongoDB database ready for the next report request, which eliminates performance issues for the UrbanCode Deploy server. Home page You access the UrbanCode Velocity interface using a web browser. The user interface URL is provided by your administrator. To have access to the interface, the administrator must have authenticated your access. After providing your credentials, the Home page displays. From the Home page, you can request and create a report. For a report to contain data, the administrator must have completed integration with one or more UrbanCode Deploy servers. Each report is represented by a tile on the Home page. You have access to the predefined reports, reports that you create, and reports that other users have shared with you. All these will be available from your Home page. Any report that you have access to, you also have the ability to customize the data viewed using filters. The available filters depend on the report. Clicking the tile provides associated details and allows you to work the pipeline, release, or report selected. Use the icon o rename or remove the report. If you have administrator privileges, there are several functions available by clicking Settings on the task bar. Administrators can: Integrate repositories Authenticate users Map environments into groups Create logical line of business groups Parent topic: Overview","title":"Concepts"},{"location":"com.ibm.insights.doc/topics/c_overview_concepts/#concepts","text":"The UrbanCode\u2122 Velocity Community Edition architecture allows for continuable access to your UrbanCode Deploy deployment data without impacting its performance. UrbanCode Velocity is installed in a Docker Compose or Kubernetes container management system. A MongoDB database is also required and installed in a separate container. After a connection is made to a source-control repository, the data is mined automatically from the repository and maintained on the MongoDB. There are two UrbanCode Velocity components and each resides in a separate container. The User Interface node which provides access UrbanCode Velocity features. The Consumer node which serves as the communication vehicle between the repository and the MongoDB database. A typical flow includes the following: A defined user requests a report using the UrbanCode Velocity user interface available through a web browser. The request is sent to the MongoDB database to format the report and return it to the user interface. The report is viewed from the interface and filters can be applied to focus on specific portions of the data. Reports can also be based on logical grouping of applications and lines of businesses. The MongoDB database is refreshed every fifteen minutes with updates from the UrbanCode Deploy server. The Consumer Node provides communication between UrbanCode Deploy server and the MongoDB database and ensures that data is synchronized on a fifteen minute interval. The synchronized data is maintained in the MongoDB database ready for the next report request, which eliminates performance issues for the UrbanCode Deploy server.","title":"Concepts"},{"location":"com.ibm.insights.doc/topics/c_overview_concepts/#home-page","text":"You access the UrbanCode Velocity interface using a web browser. The user interface URL is provided by your administrator. To have access to the interface, the administrator must have authenticated your access. After providing your credentials, the Home page displays. From the Home page, you can request and create a report. For a report to contain data, the administrator must have completed integration with one or more UrbanCode Deploy servers. Each report is represented by a tile on the Home page. You have access to the predefined reports, reports that you create, and reports that other users have shared with you. All these will be available from your Home page. Any report that you have access to, you also have the ability to customize the data viewed using filters. The available filters depend on the report. Clicking the tile provides associated details and allows you to work the pipeline, release, or report selected. Use the icon o rename or remove the report. If you have administrator privileges, there are several functions available by clicking Settings on the task bar. Administrators can: Integrate repositories Authenticate users Map environments into groups Create logical line of business groups Parent topic: Overview","title":"Home page"},{"location":"com.ibm.insights.doc/topics/c_overview_report/","text":"Report overview Reports provide deployment metrics about your continuous delivery process. Giving you insights into how efficient the deployment processes and resources are performing. The historical information contained in a report is dependent on the parameters selected for the report. For example, you may elect to gather only data about deployment duration and volume over time or deployment failure rate by application and environment or both. The data provided in a report is aggregated from the UrbanCode Deploy servers that are integrated with UrbanCode Velocity. There are several predefined reports which are ready to use after installation and setup has been completed. You can modify the predefined reports or create your own based on your requirements. Audit Use this report to prepare for an audit or to answer an auditor's questions and requests, such as: Where was application ABC deployed last quarter? Show me all deployments to production last month . Custom Use this report to gather any type of information about your pipeline. Large amounts of data are presented in a custom report based on defined criteria. You can provide focus to a specific area by using filters, for example: Find teams that are more error prone when deploying to production. Identify which business units are the biggest customers. Monitor a critical application to show all of its activity. Delivery Transformation Use this report to show the history of key deployment metrics over time and changes over time, for example: Map DevOps processes changes to deployment trends and track improvements over a time frame. View statistics about deployment duration and volume over time. Gather statistics about deployment failure rate by application and environment. Recent Activity Use this report to view changes that occurred recently. The default is the latest twenty-four hours, however; the time frame can be set need time frame . View changes that occurred over time away . Team Performance Use the team performance report to compare one or all of teams that you are a member performance against other teams in the organization. Compare the average time it took for deployments within a 90 day cycle period. Compare a single team deployment frequency against another team. Report data is displayed using line graphs, bar graphs, or tables. The format presented is dependent on the data being displayed. Hovering your pointer in various points in the line and bar graphs displays data details. Parent topic: Overview","title":"Report overview"},{"location":"com.ibm.insights.doc/topics/c_overview_report/#report-overview","text":"Reports provide deployment metrics about your continuous delivery process. Giving you insights into how efficient the deployment processes and resources are performing. The historical information contained in a report is dependent on the parameters selected for the report. For example, you may elect to gather only data about deployment duration and volume over time or deployment failure rate by application and environment or both. The data provided in a report is aggregated from the UrbanCode Deploy servers that are integrated with UrbanCode Velocity. There are several predefined reports which are ready to use after installation and setup has been completed. You can modify the predefined reports or create your own based on your requirements. Audit Use this report to prepare for an audit or to answer an auditor's questions and requests, such as: Where was application ABC deployed last quarter? Show me all deployments to production last month . Custom Use this report to gather any type of information about your pipeline. Large amounts of data are presented in a custom report based on defined criteria. You can provide focus to a specific area by using filters, for example: Find teams that are more error prone when deploying to production. Identify which business units are the biggest customers. Monitor a critical application to show all of its activity. Delivery Transformation Use this report to show the history of key deployment metrics over time and changes over time, for example: Map DevOps processes changes to deployment trends and track improvements over a time frame. View statistics about deployment duration and volume over time. Gather statistics about deployment failure rate by application and environment. Recent Activity Use this report to view changes that occurred recently. The default is the latest twenty-four hours, however; the time frame can be set need time frame . View changes that occurred over time away . Team Performance Use the team performance report to compare one or all of teams that you are a member performance against other teams in the organization. Compare the average time it took for deployments within a 90 day cycle period. Compare a single team deployment frequency against another team. Report data is displayed using line graphs, bar graphs, or tables. The format presented is dependent on the data being displayed. Hovering your pointer in various points in the line and bar graphs displays data details. Parent topic: Overview","title":"Report overview"},{"location":"com.ibm.insights.doc/topics/c_reports_card/","text":"Cards The Highlights section of the Custom and Recent activity reports displays a series of cards. A card is a summary of metrics for a specific deployment data. Each card focuses on a specific set of metrics. You can select any number of cards to display in a report. Detail information for each card can be view by clicking the horizontal dots ( ) at the top right of the card. Select Report data to view the details. The details allow you to drill down into the summary metric provided on the card. To remove a card, click the icon and select Delete card . The following types of cards are available and can be based on application or component deployments. Deployment count The number of deployments that ran during a specified reporting period. The report provides both a tabular presentation and a line graph of the data. Successful deployments count The number of successful deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Failed deployments count The number of failed deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Deployment success rate The percentage of successful deployments based on the total number of deployments in the specified time frame. Deployment failure rate The percentage of failed deployments based on the total number of deployments in the specified time frame. Deployment duration The average deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Parent topic: Custom reports","title":"Cards"},{"location":"com.ibm.insights.doc/topics/c_reports_card/#cards","text":"The Highlights section of the Custom and Recent activity reports displays a series of cards. A card is a summary of metrics for a specific deployment data. Each card focuses on a specific set of metrics. You can select any number of cards to display in a report. Detail information for each card can be view by clicking the horizontal dots ( ) at the top right of the card. Select Report data to view the details. The details allow you to drill down into the summary metric provided on the card. To remove a card, click the icon and select Delete card . The following types of cards are available and can be based on application or component deployments. Deployment count The number of deployments that ran during a specified reporting period. The report provides both a tabular presentation and a line graph of the data. Successful deployments count The number of successful deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Failed deployments count The number of failed deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Deployment success rate The percentage of successful deployments based on the total number of deployments in the specified time frame. Deployment failure rate The percentage of failed deployments based on the total number of deployments in the specified time frame. Deployment duration The average deployment times during a specified reporting period. The report provides both a tabular presentation and line graph of the data. Parent topic: Custom reports","title":"Cards"},{"location":"com.ibm.insights.doc/topics/c_reports_charts/","text":"Charts The Report details section of a report displays the various elements containing report details. Each element is referred to as a chart. A chart is a physical representation of data for a specified reporting period. Charts can be a line graph, bar chart, or a table depending on the data gathered. You can select any number of charts to display in a report. The following types of charts are available. Application deploys Total application deployment counts by environment Total application deployment counts by team and environment Application deployment failure counts by environment Application deployment success counts by environment Application deployment failure counts by team and environment Application deployment volume by environment over time Application deployment volume by team over time Recent application deployment activity Application deployment volume by line of business over time Component deploys Total component deployment count by application and environment Total component deployment count by team and environment Component deployment failure count by application and environment Component deployment failure count by team and environment Component deployment success count by application and environment Component deployment volume by environment over time Component deployment volume by team over time Recent component deployments by environment Applications Application onboarded over time Each line graph chart contains a header with a number of tasks that can be performed on the chart. At the left of the task bar are the following icons: Edit the filters to narrow or broaden the data in the chart. You can filter data by time, environment, application, team, line of business, and deployment results. View the actual data used to create the chart. Delete the chart. Additional tasks are available when the cursor is within the graph itself. You can download the graph as a PNG filetype, pan the graph, zoom in and out, scale the graph, and toggle spike lines using the icons that appear within the graph ( ). When hovering the cursor at various locations on the graph, information about the lines is displayed, such what each line represents and the value at the cursor location. Detail pages For the line graph charts, you can view the data details in a table format. The table can be re-formatted to hide columns that are not important at the time and column reordered. Click the table design icon ( ) to hide and show the defined columns. Data can be filtered, CSV files download detail data Parent topic: Custom reports","title":"Charts"},{"location":"com.ibm.insights.doc/topics/c_reports_charts/#charts","text":"The Report details section of a report displays the various elements containing report details. Each element is referred to as a chart. A chart is a physical representation of data for a specified reporting period. Charts can be a line graph, bar chart, or a table depending on the data gathered. You can select any number of charts to display in a report. The following types of charts are available. Application deploys Total application deployment counts by environment Total application deployment counts by team and environment Application deployment failure counts by environment Application deployment success counts by environment Application deployment failure counts by team and environment Application deployment volume by environment over time Application deployment volume by team over time Recent application deployment activity Application deployment volume by line of business over time Component deploys Total component deployment count by application and environment Total component deployment count by team and environment Component deployment failure count by application and environment Component deployment failure count by team and environment Component deployment success count by application and environment Component deployment volume by environment over time Component deployment volume by team over time Recent component deployments by environment Applications Application onboarded over time Each line graph chart contains a header with a number of tasks that can be performed on the chart. At the left of the task bar are the following icons: Edit the filters to narrow or broaden the data in the chart. You can filter data by time, environment, application, team, line of business, and deployment results. View the actual data used to create the chart. Delete the chart. Additional tasks are available when the cursor is within the graph itself. You can download the graph as a PNG filetype, pan the graph, zoom in and out, scale the graph, and toggle spike lines using the icons that appear within the graph ( ). When hovering the cursor at various locations on the graph, information about the lines is displayed, such what each line represents and the value at the cursor location.","title":"Charts"},{"location":"com.ibm.insights.doc/topics/c_reports_charts/#detail-pages","text":"For the line graph charts, you can view the data details in a table format. The table can be re-formatted to hide columns that are not important at the time and column reordered. Click the table design icon ( ) to hide and show the defined columns. Data can be filtered, CSV files download detail data Parent topic: Custom reports","title":"Detail pages"},{"location":"com.ibm.insights.doc/topics/c_reports_custom/","text":"Custom reports Custom reports can provide a wide spectrum of data. It is the most diverse of the available report types. The report displays information in two sections: Highlights This section is a series of cards each providing metrics for a specified set of deployment data. Report Details This section contains one or more select charts based on desired data to view. Cards The Highlights section of the Custom and Recent activity reports displays a series of cards. Charts The Report details section of a report displays the various elements containing report details. Each element is referred to as a chart. Parent topic: Reports","title":"Custom reports"},{"location":"com.ibm.insights.doc/topics/c_reports_custom/#custom-reports","text":"Custom reports can provide a wide spectrum of data. It is the most diverse of the available report types. The report displays information in two sections: Highlights This section is a series of cards each providing metrics for a specified set of deployment data. Report Details This section contains one or more select charts based on desired data to view. Cards The Highlights section of the Custom and Recent activity reports displays a series of cards. Charts The Report details section of a report displays the various elements containing report details. Each element is referred to as a chart. Parent topic: Reports","title":"Custom reports"},{"location":"com.ibm.insights.doc/topics/c_reports_efficiency/","text":"Delivery Transformation reports Delivery Transformation reports focus on deployment trends. The Delivery Transformation report contains the following graphs: deployment frequency, deployment success, deployment cycle duration, and application promotion times. Additionally, events can be tracked on the graphs. You can add multiple events to view in each of the graphs. Events Delivery transformation reports can highlight deployment events. Events are triggers in the deployment process. Parent topic: Reports","title":"Delivery Transformation reports"},{"location":"com.ibm.insights.doc/topics/c_reports_efficiency/#delivery-transformation-reports","text":"Delivery Transformation reports focus on deployment trends. The Delivery Transformation report contains the following graphs: deployment frequency, deployment success, deployment cycle duration, and application promotion times. Additionally, events can be tracked on the graphs. You can add multiple events to view in each of the graphs. Events Delivery transformation reports can highlight deployment events. Events are triggers in the deployment process. Parent topic: Reports","title":"Delivery Transformation reports"},{"location":"com.ibm.insights.doc/topics/c_reports_events/","text":"Events Delivery transformation reports can highlight deployment events. Events are triggers in the deployment process. Events can be added and removed from the report by clicking Manage events on the Show DevOps events page. You can select from the already added events and add additional events to select from. The charts in the report show a horizontal line for the selected events. Parent topic: Delivery Transformation reports","title":"Events"},{"location":"com.ibm.insights.doc/topics/c_reports_events/#events","text":"Delivery transformation reports can highlight deployment events. Events are triggers in the deployment process. Events can be added and removed from the report by clicking Manage events on the Show DevOps events page. You can select from the already added events and add additional events to select from. The charts in the report show a horizontal line for the selected events. Parent topic: Delivery Transformation reports","title":"Events"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_contactsupport/","text":"Contacting support For assistance with IBM UrbanCode\u2122 Velocity, you can post questions on the Developer Center. Use the UrbanCode\u2122 forum and tag your question with velocity. The forum is located at https://developer.ibm.com/answers/smart-spaces/23/urbancode.html . Parent topic: Troubleshooting","title":"Contacting support"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_contactsupport/#contacting-support","text":"For assistance with IBM UrbanCode\u2122 Velocity, you can post questions on the Developer Center. Use the UrbanCode\u2122 forum and tag your question with velocity. The forum is located at https://developer.ibm.com/answers/smart-spaces/23/urbancode.html . Parent topic: Troubleshooting","title":"Contacting support"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_problemtypes/","text":"Types of problems and checks to perform This topic contains tips for troubleshooting Images are not displaying If there was an error pulling the images, there might be a network issue. Verify that the cluster can pull images from docker-hub and install the product again. MongoDB connection error If there is a MongoDB connection error, verify that the MongoDB is active and accessible from the Kubernetes cluster. This chart does not install MongoDB. Domain cannot be accessed Verify that the value for the url.domain is correct in the value file. The value is usually the Ingress host name or the hostname of your Kubernetes master node. If you have any reverse proxy in front of your Kubernetes cluster, that becomes your domain. Do not use the IP address. Parent topic: Troubleshooting","title":"Types of problems and checks to perform"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_problemtypes/#types-of-problems-and-checks-to-perform","text":"This topic contains tips for troubleshooting","title":"Types of problems and checks to perform"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_problemtypes/#images-are-not-displaying","text":"If there was an error pulling the images, there might be a network issue. Verify that the cluster can pull images from docker-hub and install the product again.","title":"Images are not displaying"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_problemtypes/#mongodb-connection-error","text":"If there is a MongoDB connection error, verify that the MongoDB is active and accessible from the Kubernetes cluster. This chart does not install MongoDB.","title":"MongoDB connection error"},{"location":"com.ibm.insights.doc/topics/c_troubleshoot_problemtypes/#domain-cannot-be-accessed","text":"Verify that the value for the url.domain is correct in the value file. The value is usually the Ingress host name or the hostname of your Kubernetes master node. If you have any reverse proxy in front of your Kubernetes cluster, that becomes your domain. Do not use the IP address. Parent topic: Troubleshooting","title":"Domain cannot be accessed"},{"location":"com.ibm.insights.doc/topics/t_admin_environments/","text":"Managing logical environments Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. This task requires that you are a member of an UrbanCode Deploy system team. A logical environment is collections of UrbanCode\u2122 Deploy environments. You can group your environments into logical environments in any way that makes sense for your organization. For example, mapping all of your production environments into a single logical environment, you can view aggregate information about all of your production environments in one report or chart. A set of predefined logical environments are available to use. You can add, edit, and remove logical environments to match your environment. To remove a logical environment, click the delete icon next to the name of the logical environment to be removed. To add to the list of predefined logical environments, complete the following steps. Click Create In the Create logical environment window, type a name for the logical environment in the Logical environment name field. Optionally, you can add a description. Click Save . The new logical environment displays in the list and you can add patterns to map environments. Mapping environments Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. Parent topic: Administration Changing the logical environment name To add to the list of predefined logical environments, complete the following steps. Click the name of the logical environment that you want to rename. The selected names displays in the Edit logical environment field. In the Edit logical environment field, type the new name. Click Confirm .","title":"Managing logical environments"},{"location":"com.ibm.insights.doc/topics/t_admin_environments/#managing-logical-environments","text":"Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. This task requires that you are a member of an UrbanCode Deploy system team. A logical environment is collections of UrbanCode\u2122 Deploy environments. You can group your environments into logical environments in any way that makes sense for your organization. For example, mapping all of your production environments into a single logical environment, you can view aggregate information about all of your production environments in one report or chart. A set of predefined logical environments are available to use. You can add, edit, and remove logical environments to match your environment. To remove a logical environment, click the delete icon next to the name of the logical environment to be removed. To add to the list of predefined logical environments, complete the following steps. Click Create In the Create logical environment window, type a name for the logical environment in the Logical environment name field. Optionally, you can add a description. Click Save . The new logical environment displays in the list and you can add patterns to map environments. Mapping environments Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. Parent topic: Administration","title":"Managing logical environments"},{"location":"com.ibm.insights.doc/topics/t_admin_environments/#changing-the-logical-environment-name","text":"To add to the list of predefined logical environments, complete the following steps. Click the name of the logical environment that you want to rename. The selected names displays in the Edit logical environment field. In the Edit logical environment field, type the new name. Click Confirm .","title":"Changing the logical environment name"},{"location":"com.ibm.insights.doc/topics/t_admin_environments_map/","text":"Mapping environments Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. This task requires that you are a member of an UrbanCode Deploy system team. The Environment mapping settings page displays a list of defined logical environments and the number of environments mapped to it. Click the logical environment name to display details and environments mapped to it on the right side of the workspace. Environments are mapped to the line of business individually or based on patterns that you specify. Complete the following steps to map your UrbanCode environments to a logical environment. To access the Environment mapping settings page, click Settings > Environment mapping . Click the logical environment name to map environments. You can map environments by using patterns or individually. To map by pattern, complete the following tasks. Click Include patterns > Add pattern . On the Add new pattern window, type the pattern to map environments that match the pattern. Click Add . The environments mapped are displayed. To increase or reduce environments, change increase or reduce the pattern characters. To map by individual environment, complete the following tasks: Click Individually mapped environments > Add environments . On the Add individual patterns window, you can select individual environments. Use the Filter environment and Filter application fields at the top of the page to narrow the list. You can use them individually or at the same time. Click the check box next to the environment name to add or select all check box at the top of the list. Click Add . The environments mapped are displayed. Select a color to represent the environment in reports. Click the menu arrow in the Choose Color field. Move the slide bar to the color family. Move the cursor to the point in the box for the color. Optionally, you can type the HTML color code. After you have selected a color, click Choose . Parent topic: Managing logical environments","title":"Environment mapping"},{"location":"com.ibm.insights.doc/topics/t_admin_environments_map/#mapping-environments","text":"Use the Environment mapping settings page to group together a set of UrbanCode Deploy environments into a logical environment. This task requires that you are a member of an UrbanCode Deploy system team. The Environment mapping settings page displays a list of defined logical environments and the number of environments mapped to it. Click the logical environment name to display details and environments mapped to it on the right side of the workspace. Environments are mapped to the line of business individually or based on patterns that you specify. Complete the following steps to map your UrbanCode environments to a logical environment. To access the Environment mapping settings page, click Settings > Environment mapping . Click the logical environment name to map environments. You can map environments by using patterns or individually. To map by pattern, complete the following tasks. Click Include patterns > Add pattern . On the Add new pattern window, type the pattern to map environments that match the pattern. Click Add . The environments mapped are displayed. To increase or reduce environments, change increase or reduce the pattern characters. To map by individual environment, complete the following tasks: Click Individually mapped environments > Add environments . On the Add individual patterns window, you can select individual environments. Use the Filter environment and Filter application fields at the top of the page to narrow the list. You can use them individually or at the same time. Click the check box next to the environment name to add or select all check box at the top of the list. Click Add . The environments mapped are displayed. Select a color to represent the environment in reports. Click the menu arrow in the Choose Color field. Move the slide bar to the color family. Move the cursor to the point in the box for the color. Optionally, you can type the HTML color code. After you have selected a color, click Choose . Parent topic: Managing logical environments","title":"Mapping environments"},{"location":"com.ibm.insights.doc/topics/t_admin_linesofbusiness/","text":"Managing lines of businesses Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. This task requires that you are a member of an UrbanCode Deploy system team. The Line of business settings page displays a list of currently defined line of businesses and the number of applications mapped to each line of business. You can add, edit, and remove lines of businesses from this page. Click the name of the line of business to view details on the right side of the page. To remove a line of business, click the delete icon next to the line of business name to be removed. Click Settings > Line of business mapping to access the Line of business settings page. To create a new line of business, type a name in the Create business field and click Create . The new line of business displays in the list. You can map applications to it. Mapping lines of business Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. Parent topic: Administration Changing the line of business name To add to the list of predefined logical environments, complete the following steps. Click the name of the logical environment that you want to rename. The selected name displays in the Edit logical environment field. In the Edit logical environment field, type the new name. Click Confirm .","title":"Managing lines of businesses"},{"location":"com.ibm.insights.doc/topics/t_admin_linesofbusiness/#managing-lines-of-businesses","text":"Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. This task requires that you are a member of an UrbanCode Deploy system team. The Line of business settings page displays a list of currently defined line of businesses and the number of applications mapped to each line of business. You can add, edit, and remove lines of businesses from this page. Click the name of the line of business to view details on the right side of the page. To remove a line of business, click the delete icon next to the line of business name to be removed. Click Settings > Line of business mapping to access the Line of business settings page. To create a new line of business, type a name in the Create business field and click Create . The new line of business displays in the list. You can map applications to it. Mapping lines of business Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. Parent topic: Administration","title":"Managing lines of businesses"},{"location":"com.ibm.insights.doc/topics/t_admin_linesofbusiness/#changing-the-line-of-business-name","text":"To add to the list of predefined logical environments, complete the following steps. Click the name of the logical environment that you want to rename. The selected name displays in the Edit logical environment field. In the Edit logical environment field, type the new name. Click Confirm .","title":"Changing the line of business name"},{"location":"com.ibm.insights.doc/topics/t_admin_linesofbusiness_map/","text":"Mapping lines of business Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. This task requires that you are a member of an UrbanCode Deploy system team. Mapping lines of business can make it easier to view information of related applications that satisfy a business need. The Line of business settings page displays a list of defined lines of businesses and the number of applications mapped to it. Applications are mapped to a line of business individually or based on patterns that you specify. To view mapping details, click the name of the line of business. To remove a mapping, click Remove next to the application or pattern name. You can change a pattern by clicking Edit next to the pattern. To access the Line of business settings page, click Settings > Line of business mapping . Click the line of business name to add mappings. You can map applications by using patterns or individually. To map by pattern, complete the following tasks. Each line of business can have one or more patterns associated with it. Click Include patterns > Add pattern . On the Add new pattern window, type the pattern to map applications that match the pattern. The applications that are mapped based on the pattern are displayed. You can make the pattern weaker or stronger to change the list. Click Add to add the pattern to the line of business. Close the window and the pattern is displayed in the Pattern list. To map individual applications, complete the following tasks: To select by pattern, click Individually mapped applications > Add application . On the Add Individual Applications window, you can select individual environments. Use the Filter application field at the top of the page to narrow the list of applications. Click the check box next to the application name to add or select all check box at the top of the list. Click Add . Close the window when finished. The applications mapped are displayed. Select a color to represent the line of business in reports. Click the color menu in the Choose Color field. Move the slide bar to the color family. Move the cursor to the point in the box for the color. Optionally, you can type the HTML color code. After you have selected a color, click Choose . Parent topic: Managing lines of businesses","title":"Mapping lines of business"},{"location":"com.ibm.insights.doc/topics/t_admin_linesofbusiness_map/#mapping-lines-of-business","text":"Use the Line of business settings page to create groups of applications into lines of business (LOBs) that serve a common business purpose. This task requires that you are a member of an UrbanCode Deploy system team. Mapping lines of business can make it easier to view information of related applications that satisfy a business need. The Line of business settings page displays a list of defined lines of businesses and the number of applications mapped to it. Applications are mapped to a line of business individually or based on patterns that you specify. To view mapping details, click the name of the line of business. To remove a mapping, click Remove next to the application or pattern name. You can change a pattern by clicking Edit next to the pattern. To access the Line of business settings page, click Settings > Line of business mapping . Click the line of business name to add mappings. You can map applications by using patterns or individually. To map by pattern, complete the following tasks. Each line of business can have one or more patterns associated with it. Click Include patterns > Add pattern . On the Add new pattern window, type the pattern to map applications that match the pattern. The applications that are mapped based on the pattern are displayed. You can make the pattern weaker or stronger to change the list. Click Add to add the pattern to the line of business. Close the window and the pattern is displayed in the Pattern list. To map individual applications, complete the following tasks: To select by pattern, click Individually mapped applications > Add application . On the Add Individual Applications window, you can select individual environments. Use the Filter application field at the top of the page to narrow the list of applications. Click the check box next to the application name to add or select all check box at the top of the list. Click Add . Close the window when finished. The applications mapped are displayed. Select a color to represent the line of business in reports. Click the color menu in the Choose Color field. Move the slide bar to the color family. Move the cursor to the point in the box for the color. Optionally, you can type the HTML color code. After you have selected a color, click Choose . Parent topic: Managing lines of businesses","title":"Mapping lines of business"},{"location":"com.ibm.insights.doc/topics/t_filter_data/","text":"Filtering report data Use filters to drill down into or broaden the information in the report. There are many reasons why you might not want to view all available information in a report. For example, you might want to view data in a specific date range or for a specific team. You can focus on specific data in a report by using filters. Selected filters apply to the current data in the report. When the filter is changed or removed the report data reflects the change. From the Reports page, click at the top of the report or chart within a custom report. Available filters for the report or chart are displayed across the top of the Filters page. Click a filter to see the filter details and make changes. Click Apply to save your changes. Parent topic: How to","title":"Filter report data"},{"location":"com.ibm.insights.doc/topics/t_filter_data/#filtering-report-data","text":"Use filters to drill down into or broaden the information in the report. There are many reasons why you might not want to view all available information in a report. For example, you might want to view data in a specific date range or for a specific team. You can focus on specific data in a report by using filters. Selected filters apply to the current data in the report. When the filter is changed or removed the report data reflects the change. From the Reports page, click at the top of the report or chart within a custom report. Available filters for the report or chart are displayed across the top of the Filters page. Click a filter to see the filter details and make changes. Click Apply to save your changes. Parent topic: How to","title":"Filtering report data"},{"location":"com.ibm.insights.doc/topics/t_install_docker/","text":"Installing as a Docker Compose application You must have an access key to complete the install process. To obtain a key go the the Request access key page and complete information. The access key is sent to your email. It is important that you have reviewed the System requirements before starting to ensure all requirements are met. UrbanCode\u2122 Velocity is installed as a Docker Compose application using the command line. You will use commands to pull the UrbanCode Velocity images from Dock Hub and a configuration files from a GitHub repository over an internet connection. Commands are also used to places the container image in the containers defined in the docker-compose.yml file. The installation instructions are specific to the Linux\u2122 operating system. Ensure that the computer system software is current. Open a command line and issue the following commands. The commands fetches a list of available updates and any updates needed for the machine to be current are installed. sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade If you do not have Docker installed, install it now. Go to the Install Docker website to download and install Docker. If Docker is already installed, proceed to the next step. Verify that your Docker installation is at the required level, by issuing the following command. docker-compose --version The response should indicated Docker version 17.09.0-ce, build afdb6d4 or later is installed. If you do not have Docker Compose installed, install it now. Go to Install Docker Compose website to download and install Docker Compose . If Docker Compose is already installed, proceed to the next step. Verify that your Docker installation is at the required level, by issuing the following command. Issue the following command. docker-compose The response should indicated that version 1.8.0 or later is installed. Prepare the docker volume A docker volume is required for the MongoDB. Create a docker volume with name velocity-mongo . docker volume create velocity-mongo Download the docker-compose.yml. wget https://raw.githubusercontent.com/IBM/velocity/master/docker-compose/docker-compose.yml Issue the following commands to set the required environment variables. export ACCESS_KEY=access\\_key export URL_DOMAIN=hostname export ENCRYPT_KEY=encryption\\_key access_key The access key that was obtain when registering for the product. hostname The hostname of computer the product is installed. Specify only the host name and not the URL. encryption_key Specify a unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. Optionally, you can edit the docker-compose.yml file to change the administrator password and other configuration properties. Run the following command to install the UrbanCode Velocity container images into containers. docker-compose up -d After the installation is complete, access the administrator user interface to complete the configuration. The default URL is https://hostname/admin, where hostname is the host name of the computer where the server is running. The user name is admin and the default password is admin. A different password can be specified in the docker-compose.yml file. Parent topic: Installation roadmap","title":"Installing as a Docker Compose application"},{"location":"com.ibm.insights.doc/topics/t_install_docker/#installing-as-a-docker-compose-application","text":"You must have an access key to complete the install process. To obtain a key go the the Request access key page and complete information. The access key is sent to your email. It is important that you have reviewed the System requirements before starting to ensure all requirements are met. UrbanCode\u2122 Velocity is installed as a Docker Compose application using the command line. You will use commands to pull the UrbanCode Velocity images from Dock Hub and a configuration files from a GitHub repository over an internet connection. Commands are also used to places the container image in the containers defined in the docker-compose.yml file. The installation instructions are specific to the Linux\u2122 operating system. Ensure that the computer system software is current. Open a command line and issue the following commands. The commands fetches a list of available updates and any updates needed for the machine to be current are installed. sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade If you do not have Docker installed, install it now. Go to the Install Docker website to download and install Docker. If Docker is already installed, proceed to the next step. Verify that your Docker installation is at the required level, by issuing the following command. docker-compose --version The response should indicated Docker version 17.09.0-ce, build afdb6d4 or later is installed. If you do not have Docker Compose installed, install it now. Go to Install Docker Compose website to download and install Docker Compose . If Docker Compose is already installed, proceed to the next step. Verify that your Docker installation is at the required level, by issuing the following command. Issue the following command. docker-compose The response should indicated that version 1.8.0 or later is installed. Prepare the docker volume A docker volume is required for the MongoDB. Create a docker volume with name velocity-mongo . docker volume create velocity-mongo Download the docker-compose.yml. wget https://raw.githubusercontent.com/IBM/velocity/master/docker-compose/docker-compose.yml Issue the following commands to set the required environment variables. export ACCESS_KEY=access\\_key export URL_DOMAIN=hostname export ENCRYPT_KEY=encryption\\_key access_key The access key that was obtain when registering for the product. hostname The hostname of computer the product is installed. Specify only the host name and not the URL. encryption_key Specify a unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. Optionally, you can edit the docker-compose.yml file to change the administrator password and other configuration properties. Run the following command to install the UrbanCode Velocity container images into containers. docker-compose up -d After the installation is complete, access the administrator user interface to complete the configuration. The default URL is https://hostname/admin, where hostname is the host name of the computer where the server is running. The user name is admin and the default password is admin. A different password can be specified in the docker-compose.yml file. Parent topic: Installation roadmap","title":"Installing as a Docker Compose application"},{"location":"com.ibm.insights.doc/topics/t_install_kubernetes/","text":"Installing into a Kubernetes cluster You must have the access key to complete the install process. To obtain a key go the Request access key page and complete information to obtain an access key. The access key is sent to your email. It is important that you have reviewed the System requirements before starting to ensure all requirements are met. Install UrbanCode\u2122 Velocity into a Kubernetes cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the Kubernetes clusters defined in Helm Charts. Helm v2.6.0 is required. Verify that both the Helm client and server are at the same version level. Issue the following command to verify. helm version If you do not have a MongoDB database installed, you can install one now. Go to MongoDB GitHub repository to install. Issue the following command to obtain the Helm charts used for the installation. ``` helm init helm repo add urbancode https://raw.githubusercontent.com/IBM/velocity/master/kubernetes/repo helm fetch urbancode/velocity ``` Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment, for example if you are using Ingres there are a few related properties. There are several required properties that must be specified. Below are the required properties. adminpassword The password for the built-in admin user ID used to perform administrator tasks. The default value for this property is admin. access.key The access key that was obtain when registering for the product. encrypt.key A unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on and specify a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. url.domain The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name. mongo.url The URL of the MongDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. See Kubernetes configuration properties for the complete list to determine which other properties to specify for your environment. Run the helm install command to install the UrbanCode Velocity images into your Kubernetes cluster. The following example shows the required configuration properties, depending on your environment other might be required. helm install \\ --set access.key=access\\_key \\ --set url.domain=hostname \\ --set mongo.url=mongodb://username:password@service\\_name:27017/database\\_name \\ --set encrypt.key=encryption\\_key \\ --set adminpassword=admin \\ --name my-release urbancode/velocity Access the administrator user interface to complete the configuration. Refer to the NOTES section displayed after the helm install command completes for the location of the administrator user interface. Kubernetes configuration properties There are a number of configuration properties that can be specified during the install process. Parent topic: Installation roadmap","title":"Installing into a Kubernetes cluster"},{"location":"com.ibm.insights.doc/topics/t_install_kubernetes/#installing-into-a-kubernetes-cluster","text":"You must have the access key to complete the install process. To obtain a key go the Request access key page and complete information to obtain an access key. The access key is sent to your email. It is important that you have reviewed the System requirements before starting to ensure all requirements are met. Install UrbanCode\u2122 Velocity into a Kubernetes cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the Kubernetes clusters defined in Helm Charts. Helm v2.6.0 is required. Verify that both the Helm client and server are at the same version level. Issue the following command to verify. helm version If you do not have a MongoDB database installed, you can install one now. Go to MongoDB GitHub repository to install. Issue the following command to obtain the Helm charts used for the installation. ``` helm init helm repo add urbancode https://raw.githubusercontent.com/IBM/velocity/master/kubernetes/repo helm fetch urbancode/velocity ``` Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment, for example if you are using Ingres there are a few related properties. There are several required properties that must be specified. Below are the required properties. adminpassword The password for the built-in admin user ID used to perform administrator tasks. The default value for this property is admin. access.key The access key that was obtain when registering for the product. encrypt.key A unique ID that is used to encrypt user names, tokens and any email addresses in the mongoDB. You must decide on and specify a key when you install the product for the first time. If you install again, do not change the key. Changing the key can cause you to lose access to existing data. url.domain The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name. mongo.url The URL of the MongDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. See Kubernetes configuration properties for the complete list to determine which other properties to specify for your environment. Run the helm install command to install the UrbanCode Velocity images into your Kubernetes cluster. The following example shows the required configuration properties, depending on your environment other might be required. helm install \\ --set access.key=access\\_key \\ --set url.domain=hostname \\ --set mongo.url=mongodb://username:password@service\\_name:27017/database\\_name \\ --set encrypt.key=encryption\\_key \\ --set adminpassword=admin \\ --name my-release urbancode/velocity Access the administrator user interface to complete the configuration. Refer to the NOTES section displayed after the helm install command completes for the location of the administrator user interface. Kubernetes configuration properties There are a number of configuration properties that can be specified during the install process. Parent topic: Installation roadmap","title":"Installing into a Kubernetes cluster"},{"location":"com.ibm.insights.doc/topics/t_report_create/","text":"Create a report Use the Home page to create one of the following reports. Custom Delivery Transformation Recent Activity Team Performance From the Home page, click . On the New report page select the type of report, type a name for the report, description, and select an icon to associate with the report. Click Add . After the report is created you can immediately run, edit, and share the report with other users. Parent topic: How to","title":"Create a report"},{"location":"com.ibm.insights.doc/topics/t_report_create/#create-a-report","text":"Use the Home page to create one of the following reports. Custom Delivery Transformation Recent Activity Team Performance From the Home page, click . On the New report page select the type of report, type a name for the report, description, and select an icon to associate with the report. Click Add . After the report is created you can immediately run, edit, and share the report with other users. Parent topic: How to","title":"Create a report"},{"location":"com.ibm.insights.doc/topics/t_report_manage/","text":"Managing reports Use the Home page to view, modify, and remove existing report. You can also create reports from this page. Available reports are listed on the Home page. This page includes several predefined reports, reports that you created, and those other shared with you. Click the card with the name of the report to view the report. For reports that you have write access to, you can edit or delete them. Click Home to view the available reports. Click the icon next to the report to be edited or deleted. Click Delete to remove a report. Click Edit to modify the report definitions. Parent topic: How to","title":"Manage reports"},{"location":"com.ibm.insights.doc/topics/t_report_manage/#managing-reports","text":"Use the Home page to view, modify, and remove existing report. You can also create reports from this page. Available reports are listed on the Home page. This page includes several predefined reports, reports that you created, and those other shared with you. Click the card with the name of the report to view the report. For reports that you have write access to, you can edit or delete them. Click Home to view the available reports. Click the icon next to the report to be edited or deleted. Click Delete to remove a report. Click Edit to modify the report definitions. Parent topic: How to","title":"Managing reports"},{"location":"com.ibm.insights.doc/topics/t_reports_format/","text":"Formatting Custom reports You can organize the layout of report charts in custom reports to put information into a meaningful order. The order of charts in a custom report can be changed using the Chart Layout editor. From the Custom Report page, click the chart layout editor icon at the top right corner . The current layout is shown in the editor. Select the chart to move, drag it into the desired position. Your changes are reflected immediately. Use the browser back navigation arrow to return to the Custom Report page. Parent topic: How to","title":"Format Custom reports"},{"location":"com.ibm.insights.doc/topics/t_reports_format/#formatting-custom-reports","text":"You can organize the layout of report charts in custom reports to put information into a meaningful order. The order of charts in a custom report can be changed using the Chart Layout editor. From the Custom Report page, click the chart layout editor icon at the top right corner . The current layout is shown in the editor. Select the chart to move, drag it into the desired position. Your changes are reflected immediately. Use the browser back navigation arrow to return to the Custom Report page. Parent topic: How to","title":"Formatting Custom reports"},{"location":"com.ibm.insights.doc/topics/t_reports_share/","text":"Sharing reports You can share reports with others in your organization and who are authenticated to UrbanCode\u2122 Velocity. By default, you see only the reports that you create. When you share a report, the users you are sharing the report with are able to access the report from their Home page. Depending on the access level that you provide, they can modify the report or only view report data. Note: The data users can view is restricted to data from the teams of which they are a member. You can remove access at any time by clicking the delete icon next to the email address on the Share Report page. From the Reports page, click at the top right corner . On the Share Report page, type one or more email addresses of the people you want to have access to the report. Select the type of access given to the listed people. Click Add . Use the web browser navigation to return to the Reports page. Parent topic: How to","title":"Share reports"},{"location":"com.ibm.insights.doc/topics/t_reports_share/#sharing-reports","text":"You can share reports with others in your organization and who are authenticated to UrbanCode\u2122 Velocity. By default, you see only the reports that you create. When you share a report, the users you are sharing the report with are able to access the report from their Home page. Depending on the access level that you provide, they can modify the report or only view report data. Note: The data users can view is restricted to data from the teams of which they are a member. You can remove access at any time by clicking the delete icon next to the email address on the Share Report page. From the Reports page, click at the top right corner . On the Share Report page, type one or more email addresses of the people you want to have access to the report. Select the type of access given to the listed people. Click Add . Use the web browser navigation to return to the Reports page. Parent topic: How to","title":"Sharing reports"},{"location":"com.ibm.insights.doc/topics/t_setup_gettingstarted/","text":"Getting started The administrator must complete several tasks before users can access and run reports. Making UrbanCode\u2122 Velocity available to you environment involves three tasks: Installation Install the UrbanCode\u2122 Velocity installation image into the appropriate containers and ensure that requirements are met in the environment. Integration Define credentials to communicate with one or more UrbanCode\u2122 Deploy servers. You\u2019ll need the server location and an UrbanCode\u2122 Deploy token to complete the integration. The token must be an administrator user token. When more than one server is integrated, the data that is gathered for reports is aggregated from all servers. The data is not displayed by server. Authentication Provide access to users who are defined in UrbanCode\u2122 Deploy to the UrbanCode\u2122 Velocity user interface. Users can be authenticated using either LDAP, OAuth, or SSO. After the administrator authenticates and completes the integration with UrbanCode Deploy, the administrator can map environments and applications at the business level by using a pattern to create logical groupings that provide a focus to report data. Install UrbanCode Velocity. Start the installation by running installation commands for the container manager system that is being used to download the product image into containers on your computer. For details about requirements and install process, see Installation roadmap . Integrate with a source repository. Access the administrator console to complete integration with the UrbanCode Deploy server. The location and administrator credentials are provided at the end of the installation process. This task must be completed to continue with the user interface. After the integration is complete, synchronization between the repository and the MongoDB starts. Additional integrations can be added at any time by any user with administrator access. Authenticate users to access reports. Users who are defined to UrbanCode Deploy can be authenticated. You can complete this step now or later. If you complete the step later, only the administrator ID has access to the reports. This situation may be desirable providing the administrator time to verify and explore reports before giving access to other users. Authenticated users access the user interface with the URL that the administrator provides. Parent topic: Setup the environment","title":"Getting started"},{"location":"com.ibm.insights.doc/topics/t_setup_gettingstarted/#getting-started","text":"The administrator must complete several tasks before users can access and run reports. Making UrbanCode\u2122 Velocity available to you environment involves three tasks: Installation Install the UrbanCode\u2122 Velocity installation image into the appropriate containers and ensure that requirements are met in the environment. Integration Define credentials to communicate with one or more UrbanCode\u2122 Deploy servers. You\u2019ll need the server location and an UrbanCode\u2122 Deploy token to complete the integration. The token must be an administrator user token. When more than one server is integrated, the data that is gathered for reports is aggregated from all servers. The data is not displayed by server. Authentication Provide access to users who are defined in UrbanCode\u2122 Deploy to the UrbanCode\u2122 Velocity user interface. Users can be authenticated using either LDAP, OAuth, or SSO. After the administrator authenticates and completes the integration with UrbanCode Deploy, the administrator can map environments and applications at the business level by using a pattern to create logical groupings that provide a focus to report data. Install UrbanCode Velocity. Start the installation by running installation commands for the container manager system that is being used to download the product image into containers on your computer. For details about requirements and install process, see Installation roadmap . Integrate with a source repository. Access the administrator console to complete integration with the UrbanCode Deploy server. The location and administrator credentials are provided at the end of the installation process. This task must be completed to continue with the user interface. After the integration is complete, synchronization between the repository and the MongoDB starts. Additional integrations can be added at any time by any user with administrator access. Authenticate users to access reports. Users who are defined to UrbanCode Deploy can be authenticated. You can complete this step now or later. If you complete the step later, only the administrator ID has access to the reports. This situation may be desirable providing the administrator time to verify and explore reports before giving access to other users. Authenticated users access the user interface with the URL that the administrator provides. Parent topic: Setup the environment","title":"Getting started"},{"location":"com.ibm.insights.doc/topics/t_troubleshoot_logfiles/","text":"Viewing log files To view the logs in either a Docker or Kubernetes environment, use commands associated with the environment. In either environment you need to know the names of the UrbanCode Velocity containers. velocity-consumer velocity-ui Parent topic: Troubleshooting Viewing logs in a Kubernetes environment To view the logs in a Kubernets environment, you need to know the pod name that the UrbanCode Velocity containers are located. A pod is a collection of one or more containers that are deployed together, and are started, stopped, and replicated as a group. The default log level is error . The level of logging can be changed on the log.level configuration property. Other logging levels are: all, debug, info, warn, error, and fatal. Logging can also be turned off on the configuration property. From a command line window, run the following command to obtain the pod names containing the UrbanCode Velocity containers. kubectl get pods Run the following command to view the logs. kubectl logs pod\\_name Viewing logs in a Docker Compose environment To view the logs in a Docker container, you need to know the container ID for the UrbanCode Velocity containers. From a command line window, run the following command to list containers. docker ps -a The command output displays the containers and its ID. To view the logs, use the docker logs command. Run a separate command for each container. docker logs velocity\\_userinterface\\_container\\_id docker logs velocity\\_consumercontainer\\_id","title":"Viewing log files"},{"location":"com.ibm.insights.doc/topics/t_troubleshoot_logfiles/#viewing-log-files","text":"To view the logs in either a Docker or Kubernetes environment, use commands associated with the environment. In either environment you need to know the names of the UrbanCode Velocity containers. velocity-consumer velocity-ui Parent topic: Troubleshooting","title":"Viewing log files"},{"location":"com.ibm.insights.doc/topics/t_troubleshoot_logfiles/#viewing-logs-in-a-kubernetes-environment","text":"To view the logs in a Kubernets environment, you need to know the pod name that the UrbanCode Velocity containers are located. A pod is a collection of one or more containers that are deployed together, and are started, stopped, and replicated as a group. The default log level is error . The level of logging can be changed on the log.level configuration property. Other logging levels are: all, debug, info, warn, error, and fatal. Logging can also be turned off on the configuration property. From a command line window, run the following command to obtain the pod names containing the UrbanCode Velocity containers. kubectl get pods Run the following command to view the logs. kubectl logs pod\\_name","title":"Viewing logs in a Kubernetes environment"},{"location":"com.ibm.insights.doc/topics/t_troubleshoot_logfiles/#viewing-logs-in-a-docker-compose-environment","text":"To view the logs in a Docker container, you need to know the container ID for the UrbanCode Velocity containers. From a command line window, run the following command to list containers. docker ps -a The command output displays the containers and its ID. To view the logs, use the docker logs command. Run a separate command for each container. docker logs velocity\\_userinterface\\_container\\_id docker logs velocity\\_consumercontainer\\_id","title":"Viewing logs in a Docker Compose environment"},{"location":"com.ibm.insights.doc/topics/t_ui_access/","text":"Accessing the user interface The user interface provides access to reports. You do not have to be authenticated to access the user interface. However, without authentication you cannot view report data, you can see only the demo reports. The UrbanCode Velocity administrator can authenticate users. If you require access, you must contact an administrator. After you are authenticated, the data that is gathered in reports you request is the data that you have authorization to view. This authorization is based on your UrbanCode\u2122 Deploy privileges. When you view reports that pull system wide data and you\u2019re focusing on details, data that you do not have authorization to view is not displayed. However, the data is figured into the metrics. Open a web browser. Go to the URL for the user interface. The default URLs follow. The administrator might change the URL from the default value. Contact the administrator for the URL if the default URL does not work. Docker Compose: http://hostname/velocity/home Kubernetes: http://hostname/velocity/home Parent topic: How to","title":"Access the user interface"},{"location":"com.ibm.insights.doc/topics/t_ui_access/#accessing-the-user-interface","text":"The user interface provides access to reports. You do not have to be authenticated to access the user interface. However, without authentication you cannot view report data, you can see only the demo reports. The UrbanCode Velocity administrator can authenticate users. If you require access, you must contact an administrator. After you are authenticated, the data that is gathered in reports you request is the data that you have authorization to view. This authorization is based on your UrbanCode\u2122 Deploy privileges. When you view reports that pull system wide data and you\u2019re focusing on details, data that you do not have authorization to view is not displayed. However, the data is figured into the metrics. Open a web browser. Go to the URL for the user interface. The default URLs follow. The administrator might change the URL from the default value. Contact the administrator for the URL if the default URL does not work. Docker Compose: http://hostname/velocity/home Kubernetes: http://hostname/velocity/home Parent topic: How to","title":"Accessing the user interface"},{"location":"com.ibm.uvelocity.doc/","text":"UrbanCode Velocity V1.1.0 documentation Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity. Getting started Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0 Using UrbanCode Velocity Administration Reports How to Copyright HCL 2018","title":"UrbanCode Velocity V1.1.0 documentation"},{"location":"com.ibm.uvelocity.doc/#urbancode-velocity-v110-documentation","text":"Welcome to the IBM UrbanCode Velocity V1.1.0 documentation, where you can find information about how to install, maintain, and use IBM UrbanCode Velocity.","title":"UrbanCode Velocity V1.1.0 documentation"},{"location":"com.ibm.uvelocity.doc/#getting-started","text":"Product overview Getting started What's new Notices Installing the community edition Installing Version 1.1.0","title":"Getting started"},{"location":"com.ibm.uvelocity.doc/#using-urbancode-velocity","text":"Administration Reports How to Copyright HCL 2018","title":"Using UrbanCode Velocity"},{"location":"com.ibm.uvelocity.doc/topics/c_admin_roles/","text":"Roles and permissions A number of roles are defined in the product that can be assigned to an user or group. Roles set boundaries on the release tasks that an user or group member can perform. Roles are assigned to users and groups within the team context. Roles are not directly assigned to users and groups of users. Users or groups are assigned to a team with a specific role. The role assigned to a user is only for the team that the user is a member. A user can be a member of multiple teams and have a different role on each. The interlocking concept of teams, roles, and permissions ensures that users have the appropriate permissions to perform their work and not affect processes outside of their assigned scope. The interaction of these three concepts provides the mechanisms to create an infrastructure that is secure and flexible. The following table shows the available roles. Role Permissions Viewer - View pipelines | |Developer| - Manage templates - Create templates - Edit templates - Delete templates - Pipelines - Schedule pipelines - Plans pipelines - Tasks - Create tasks - Edit tasks - Remove tasks - Stories - Create tasks - Edit tasks - Remove stories | |Lead Developer| - Pipelines - Create pipelines - Applications - Add applications to pipelines - Edit pipeline applications - Remove pipeline applications, - Environments - Create pipelines environments - Edit pipeline environments - Remove pipeline environments - Deployment templates - Create - Edit - Remove - Deployment plans - Create deployment plans - Modify deployment plans - Delete deployment plans - Schedule deployments in pipelines - Tasks - Create tasks - Modify tasks - Delete task - Environments - Create target environments - Modify target environments - Delete target environments - Releases - Create releases - Modify releases - Delete releases - Archive releases - Stories - Create stories - Modify stories - Delete stories - Archive stories - Members - Create members - Modify members - Delete members - Archive members - Assign roles - Teams - Create teams - Modify teams - Groups - Create groups - Modify groups - Delete groups | |Release participant|Create new tasks and run assigned tasks.- Tasks - Create tasks - Modify tasks - Delete task - Stories - Create tasks - Edit tasks - Remove stories | |Release manager|- CreateEditRemovePlansWithTemplates - SchedulePlansInPipelines - CreateEditRemoveTasks - CreateEditReleases - ArchiveReleases - CreateEditRemoveUserStories - ModifyCalendarSettings Schedule releases, and run releases and calendar events using pre-defined templates.| |Lead release manager| - CreateEditRemovePlanTemplates - CreateEditRemovePlansWithTemplates - CreateEditRemovePlansWithoutTemplates - SchedulePlansInPipelines - CreateEditRemoveTasks - ChangeTaskTargetEnvironments - CreateEditReleases - ArchiveReleases - CreateEditRemoveUserStories - AssignRoles - ApproveProtectedEnvironments - AddEditRemoveMembers - CreateTeams - RemoveTeams - EditTeams - CreateEditRemoveGroups - ModifyCalendarSettings | |Team Administrator| - AssignRoles - AddEditRemoveMembers - CreateTeams - RemoveTeams - EditTeams - CreateEditRemoveGroups Note: Members assigned the Lead Developer and Lead Release Manager roles can also perform the tasks assigned to the team administrator. | |Product administrator| - ModifySettings - AddEditRemoveMembers - AssignRoles - CreateEditRemoveIntegrations - CreateTeams, RemoveTeams - EditTeams - CreateEditRemoveGroups - ManageLocalUsers | Global administrator vs team administrator.... Parent topic: Security","title":"Roles and permissions"},{"location":"com.ibm.uvelocity.doc/topics/c_admin_roles/#roles-and-permissions","text":"A number of roles are defined in the product that can be assigned to an user or group. Roles set boundaries on the release tasks that an user or group member can perform. Roles are assigned to users and groups within the team context. Roles are not directly assigned to users and groups of users. Users or groups are assigned to a team with a specific role. The role assigned to a user is only for the team that the user is a member. A user can be a member of multiple teams and have a different role on each. The interlocking concept of teams, roles, and permissions ensures that users have the appropriate permissions to perform their work and not affect processes outside of their assigned scope. The interaction of these three concepts provides the mechanisms to create an infrastructure that is secure and flexible. The following table shows the available roles. Role Permissions Viewer - View pipelines | |Developer| - Manage templates - Create templates - Edit templates - Delete templates - Pipelines - Schedule pipelines - Plans pipelines - Tasks - Create tasks - Edit tasks - Remove tasks - Stories - Create tasks - Edit tasks - Remove stories | |Lead Developer| - Pipelines - Create pipelines - Applications - Add applications to pipelines - Edit pipeline applications - Remove pipeline applications, - Environments - Create pipelines environments - Edit pipeline environments - Remove pipeline environments - Deployment templates - Create - Edit - Remove - Deployment plans - Create deployment plans - Modify deployment plans - Delete deployment plans - Schedule deployments in pipelines - Tasks - Create tasks - Modify tasks - Delete task - Environments - Create target environments - Modify target environments - Delete target environments - Releases - Create releases - Modify releases - Delete releases - Archive releases - Stories - Create stories - Modify stories - Delete stories - Archive stories - Members - Create members - Modify members - Delete members - Archive members - Assign roles - Teams - Create teams - Modify teams - Groups - Create groups - Modify groups - Delete groups | |Release participant|Create new tasks and run assigned tasks.- Tasks - Create tasks - Modify tasks - Delete task - Stories - Create tasks - Edit tasks - Remove stories | |Release manager|- CreateEditRemovePlansWithTemplates - SchedulePlansInPipelines - CreateEditRemoveTasks - CreateEditReleases - ArchiveReleases - CreateEditRemoveUserStories - ModifyCalendarSettings Schedule releases, and run releases and calendar events using pre-defined templates.| |Lead release manager| - CreateEditRemovePlanTemplates - CreateEditRemovePlansWithTemplates - CreateEditRemovePlansWithoutTemplates - SchedulePlansInPipelines - CreateEditRemoveTasks - ChangeTaskTargetEnvironments - CreateEditReleases - ArchiveReleases - CreateEditRemoveUserStories - AssignRoles - ApproveProtectedEnvironments - AddEditRemoveMembers - CreateTeams - RemoveTeams - EditTeams - CreateEditRemoveGroups - ModifyCalendarSettings | |Team Administrator| - AssignRoles - AddEditRemoveMembers - CreateTeams - RemoveTeams - EditTeams - CreateEditRemoveGroups Note: Members assigned the Lead Developer and Lead Release Manager roles can also perform the tasks assigned to the team administrator. | |Product administrator| - ModifySettings - AddEditRemoveMembers - AssignRoles - CreateEditRemoveIntegrations - CreateTeams, RemoveTeams - EditTeams - CreateEditRemoveGroups - ManageLocalUsers | Global administrator vs team administrator.... Parent topic: Security","title":"Roles and permissions"},{"location":"com.ibm.uvelocity.doc/topics/c_install_se_requirements/","text":"System requirements Installation requirements for all installation scenarios. You can install UrbanCode\u2122 Velocity into environments that support Docker Compose or Kubernetes, including the following environments: The tools that are required for all installation scenarios are described here. Make sure that your user ID meets the requirements for installing and configuring the product. The user ID must be able to make changes to the host environment. In addition, you need user accounts for the tools specific to your installation scenario. The tools required by all installation scenarios include the following items: Docker IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. Note: The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a docker repository that the installation commands have accessed. You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool.","title":"System requirements"},{"location":"com.ibm.uvelocity.doc/topics/c_install_se_requirements/#system-requirements","text":"Installation requirements for all installation scenarios. You can install UrbanCode\u2122 Velocity into environments that support Docker Compose or Kubernetes, including the following environments: The tools that are required for all installation scenarios are described here. Make sure that your user ID meets the requirements for installing and configuring the product. The user ID must be able to make changes to the host environment. In addition, you need user accounts for the tools specific to your installation scenario. The tools required by all installation scenarios include the following items: Docker IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. Note: The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a docker repository that the installation commands have accessed. You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool.","title":"System requirements"},{"location":"com.ibm.uvelocity.doc/topics/c_install_se_roadmap/","text":"Installation roadmap The installation roadmap is a description of the high-level steps for installing UrbanCode\u2122 Velocity. UrbanCode Velocity is provided in two versions. The full-featured Standard Edition (SE) is free to use for 60 days, at which time you need a license. You can also install the free-to-use Community Edition (CE) , which contains many UrbanCode Velocity features. Both editions of consist of services and other tools that are stored in Docker containers. You can install the containers in one of the container orchestrators, such as Docker Compose, Kubernetes, or any environment that supports the container orchestrators, including bare-metal servers and cloud-based platforms, such as the environments listed here: Windows Linux MacOS IBM Cloud Private IBM Cloud services OpenShift Both editions require an access key. You apply the free access key during installation. When you license the SE version, in addition to you license key, your receive a permanent access key. If you are evaluating UrbanCode Velocity and are unsure about which versions to install, many users find the Docker Compose installation process to be easiest because it is the most automated. In outline, the installation process consists of the following general steps: Review the system requirements The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool. Install UrbanCode Velocity for your target environment: Installing UrbanCode Velocity with Docker Compose . Installing into a Kubernetes cluster . Installing as an OpenShift application Installing on IBM Cloud Private Integrate with external tools After the installation is complete, you can access the configuration pages to integrate with UrbanCode Deploy and other external tools, such as Jenkins . Only sample report data is available until the integration process is complete. Authenticate users After the installation is complete, you can authenticate users . Authenticating users to access reports is not required. However; until users are authenticated, only the administrator user has access to reports and product features. Installation roadmap The installation roadmap is a description of the high-level steps for installing UrbanCode Velocity. Installing UrbanCode Velocity with Docker Compose Install UrbanCode Velocity into the Docker Compose container orchestrator. Installing on Minikube You can install UrbanCode Velocity onto a Minikube cluster on your local machine. Installing on IBM Cloud Private Install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private (ICP). Installing as an OpenShift application Uninstalling the server You can uninstall UrbanCode Velocity by stopping the server and removing the product containers. Parent topic: Installation roadmap","title":"Installing UrbanCode Velocity SE"},{"location":"com.ibm.uvelocity.doc/topics/c_install_se_roadmap/#installation-roadmap","text":"The installation roadmap is a description of the high-level steps for installing UrbanCode\u2122 Velocity. UrbanCode Velocity is provided in two versions. The full-featured Standard Edition (SE) is free to use for 60 days, at which time you need a license. You can also install the free-to-use Community Edition (CE) , which contains many UrbanCode Velocity features. Both editions of consist of services and other tools that are stored in Docker containers. You can install the containers in one of the container orchestrators, such as Docker Compose, Kubernetes, or any environment that supports the container orchestrators, including bare-metal servers and cloud-based platforms, such as the environments listed here: Windows Linux MacOS IBM Cloud Private IBM Cloud services OpenShift Both editions require an access key. You apply the free access key during installation. When you license the SE version, in addition to you license key, your receive a permanent access key. If you are evaluating UrbanCode Velocity and are unsure about which versions to install, many users find the Docker Compose installation process to be easiest because it is the most automated. In outline, the installation process consists of the following general steps: Review the system requirements The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. You can dynamically generate a system requirements report using the Software Product Compatibility Reports (SPCR) tool. Install UrbanCode Velocity for your target environment: Installing UrbanCode Velocity with Docker Compose . Installing into a Kubernetes cluster . Installing as an OpenShift application Installing on IBM Cloud Private Integrate with external tools After the installation is complete, you can access the configuration pages to integrate with UrbanCode Deploy and other external tools, such as Jenkins . Only sample report data is available until the integration process is complete. Authenticate users After the installation is complete, you can authenticate users . Authenticating users to access reports is not required. However; until users are authenticated, only the administrator user has access to reports and product features. Installation roadmap The installation roadmap is a description of the high-level steps for installing UrbanCode Velocity. Installing UrbanCode Velocity with Docker Compose Install UrbanCode Velocity into the Docker Compose container orchestrator. Installing on Minikube You can install UrbanCode Velocity onto a Minikube cluster on your local machine. Installing on IBM Cloud Private Install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private (ICP). Installing as an OpenShift application Uninstalling the server You can uninstall UrbanCode Velocity by stopping the server and removing the product containers. Parent topic: Installation roadmap","title":"Installation roadmap"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_dra/","text":"Integrating deployment risk analysis Add the results from unit tests, security scans, and other code coverage tools to your DevOps pipeline. Reduce risk by using test results as quality gates in your delivery pipeline. Configure a Jenkins job that uses the IBM Cloud DevOps Insights service . Reference that job with the DRA task . Parent topic: Managing integrations","title":"Integrating deployment risk analysis"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_dra/#integrating-deployment-risk-analysis","text":"Add the results from unit tests, security scans, and other code coverage tools to your DevOps pipeline. Reduce risk by using test results as quality gates in your delivery pipeline. Configure a Jenkins job that uses the IBM Cloud DevOps Insights service . Reference that job with the DRA task . Parent topic: Managing integrations","title":"Integrating deployment risk analysis"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_jira/","text":"Integrating with JIRA Seamlessly incorporate Jira projects into your releases. In Jira, the Accept remote API calls configuration option must be set to ON . Jira integrations are configured on the release level. The first time you configure an integration, you supply connection information to your Jira server, map Jira projects to the issue tracking tool. After an integration is configured, you can reuse it with other releases. To configure a Jira integration, complete the following steps: On the Release detail page, click Release stories , and then click Configure story integration . In the Add Integration to Issue Tracking Tool window, specify how issues are found: If you want to configure a new integration, select I have the URL for an issue assigned to the release , and then complete the following steps: Enter the URL of your Jira server, and the Jira user credentials, and then click Continue . In the Add Integration to Issue Tracking Tool window, click Add , and then select the Jira project, field name, and value. Click Continue . If issues are found, click Save . Matching Jira issues are imported and displayed on the Release stories tab. If you want to use an existing integration, select I'll directly enter all the info to connect to my issue tracker , and click Continue . Complete the integration by following step b. . The number of imported issues is displayed in the release status area. To see the release, click Release stories . You can use the links on the Release stories tab to open the issues in Jira. Parent topic: Managing integrations","title":"Integrating with JIRA"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_jira/#integrating-with-jira","text":"Seamlessly incorporate Jira projects into your releases. In Jira, the Accept remote API calls configuration option must be set to ON . Jira integrations are configured on the release level. The first time you configure an integration, you supply connection information to your Jira server, map Jira projects to the issue tracking tool. After an integration is configured, you can reuse it with other releases. To configure a Jira integration, complete the following steps: On the Release detail page, click Release stories , and then click Configure story integration . In the Add Integration to Issue Tracking Tool window, specify how issues are found: If you want to configure a new integration, select I have the URL for an issue assigned to the release , and then complete the following steps: Enter the URL of your Jira server, and the Jira user credentials, and then click Continue . In the Add Integration to Issue Tracking Tool window, click Add , and then select the Jira project, field name, and value. Click Continue . If issues are found, click Save . Matching Jira issues are imported and displayed on the Release stories tab. If you want to use an existing integration, select I'll directly enter all the info to connect to my issue tracker , and click Continue . Complete the integration by following step b. . The number of imported issues is displayed in the release status area. To see the release, click Release stories . You can use the links on the Release stories tab to open the issues in Jira. Parent topic: Managing integrations","title":"Integrating with JIRA"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_servicenow/","text":"Integrating with ServiceNow Create and manage ServiceNow change requests with UrbanCode Velocity. Update change requests with Velocity tasks and then react to status changes. Control deployment progress with change request updates. ServiceNow integrations are managed on the task level. You configure an integration when you add a ServiceNow task to a deployment plan . After an integration is configured, other ServiceNow tasks can use the same instance. Parent topic: Managing integrations","title":"Integrating with ServiceNow"},{"location":"com.ibm.uvelocity.doc/topics/c_integration_servicenow/#integrating-with-servicenow","text":"Create and manage ServiceNow change requests with UrbanCode Velocity. Update change requests with Velocity tasks and then react to status changes. Control deployment progress with change request updates. ServiceNow integrations are managed on the task level. You configure an integration when you add a ServiceNow task to a deployment plan . After an integration is configured, other ServiceNow tasks can use the same instance. Parent topic: Managing integrations","title":"Integrating with ServiceNow"},{"location":"com.ibm.uvelocity.doc/topics/c_node_admin/","text":"Administration A default UrbanCode Velocity administrator ID is included as part of UrbanCode\u2122 Velocity. It is used to install and complete initial configuration tasks. The UrbanCode Velocity administrator can perform the following tasks from the administrator user interface: Integrations User authentication Environment mapping Line of business mapping Users who are part of the UrbanCode Deploy system team can perform the following tasks: Environment mapping Line of business mapping Security considerations To ensure user data security, specify a logout url when authenticating users. This ensures that the user is logged out of the system and prevents another person to access their account through the cached browser data. Managing integrations Using UrbanCode Velocity you can run deployments and request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, you can use data from other external tools, such as Jenkins, ServiceNow, and the IBM Cloud DevOps Insights service. Configuring an email server Configure an email server. Setting up the calendar Use the Calendar Settings page to manage the appearance of calendar events. Security The UrbanCode Velocity security model is organization- and team-based. The organization is the base element; teams belong to organizations. Team members manage releases, events, and deployments. Administrators manage teams and assign users to them. License management UrbanCode Velocity Standard Edition provides a 60-day license-free evaluation period.","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_admin/#administration","text":"A default UrbanCode Velocity administrator ID is included as part of UrbanCode\u2122 Velocity. It is used to install and complete initial configuration tasks. The UrbanCode Velocity administrator can perform the following tasks from the administrator user interface: Integrations User authentication Environment mapping Line of business mapping Users who are part of the UrbanCode Deploy system team can perform the following tasks: Environment mapping Line of business mapping","title":"Administration"},{"location":"com.ibm.uvelocity.doc/topics/c_node_admin/#security-considerations","text":"To ensure user data security, specify a logout url when authenticating users. This ensures that the user is logged out of the system and prevents another person to access their account through the cached browser data. Managing integrations Using UrbanCode Velocity you can run deployments and request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, you can use data from other external tools, such as Jenkins, ServiceNow, and the IBM Cloud DevOps Insights service. Configuring an email server Configure an email server. Setting up the calendar Use the Calendar Settings page to manage the appearance of calendar events. Security The UrbanCode Velocity security model is organization- and team-based. The organization is the base element; teams belong to organizations. Team members manage releases, events, and deployments. Administrators manage teams and assign users to them. License management UrbanCode Velocity Standard Edition provides a 60-day license-free evaluation period.","title":"Security considerations"},{"location":"com.ibm.uvelocity.doc/topics/c_node_howto/","text":"How to The topics in this section describe how to work with UrbanCode\u2122 Velocity features. Accessing the user interface The user interface provides access to reports. Create a report Use the Home page to create one of the following reports. Filtering report data Use filters to drill down into or broaden the information in the report. Formatting Custom reports You can organize the layout of report charts in custom reports to put information into a meaningful order. Managing reports Use the Home page to view, modify, and remove existing report. You can also create reports from this page. Sharing reports You can share reports with others in your organization and who are authenticated to UrbanCode Velocity. By default, you see only the reports that you create.","title":"About"},{"location":"com.ibm.uvelocity.doc/topics/c_node_howto/#how-to","text":"The topics in this section describe how to work with UrbanCode\u2122 Velocity features. Accessing the user interface The user interface provides access to reports. Create a report Use the Home page to create one of the following reports. Filtering report data Use filters to drill down into or broaden the information in the report. Formatting Custom reports You can organize the layout of report charts in custom reports to put information into a meaningful order. Managing reports Use the Home page to view, modify, and remove existing report. You can also create reports from this page. Sharing reports You can share reports with others in your organization and who are authenticated to UrbanCode Velocity. By default, you see only the reports that you create.","title":"How to"},{"location":"com.ibm.uvelocity.doc/topics/c_node_integrations/","text":"Managing integrations Using UrbanCode Velocity you can run deployments and request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, you can use data from other external tools, such as Jenkins, ServiceNow, and the IBM Cloud DevOps Insights service. Add integrations with external tools to extend your pipelines, releases, and reports. With UrbanCode Deploy integrations , you can request reports and add applications to pipelines and deployment plans. Add ServiceNow tasks Jenkins integrations enable you to add Jenkins Jobs to pipelines deployments. to deployment plans and manage ServiceNow change requests. Add Jira projects to releases and use the issue track to manage Jira issues. Integrate with IBM Cloud Insights and use deployment risk analysis tasks, DRA , with your pipelines to provide quality gates between stages. Configuring UrbanCode Deploy integrations Use UrbanCode Deploy applications in your deployments and pipelines. Configuring Jenkins integrations Manage Jenkins jobs with your deployments and pipelines. Integrating deployment risk analysis Add the results from unit tests, security scans, and other code coverage tools to your DevOps pipeline. Reduce risk by using test results as quality gates in your delivery pipeline. Integrating with JIRA Seamlessly incorporate Jira projects into your releases. Integrating with ServiceNow Create and manage ServiceNow change requests with UrbanCode Velocity. Update change requests with Velocity tasks and then react to status changes. Control deployment progress with change request updates. Parent topic: Administration","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_integrations/#managing-integrations","text":"Using UrbanCode Velocity you can run deployments and request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, you can use data from other external tools, such as Jenkins, ServiceNow, and the IBM Cloud DevOps Insights service. Add integrations with external tools to extend your pipelines, releases, and reports. With UrbanCode Deploy integrations , you can request reports and add applications to pipelines and deployment plans. Add ServiceNow tasks Jenkins integrations enable you to add Jenkins Jobs to pipelines deployments. to deployment plans and manage ServiceNow change requests. Add Jira projects to releases and use the issue track to manage Jira issues. Integrate with IBM Cloud Insights and use deployment risk analysis tasks, DRA , with your pipelines to provide quality gates between stages. Configuring UrbanCode Deploy integrations Use UrbanCode Deploy applications in your deployments and pipelines. Configuring Jenkins integrations Manage Jenkins jobs with your deployments and pipelines. Integrating deployment risk analysis Add the results from unit tests, security scans, and other code coverage tools to your DevOps pipeline. Reduce risk by using test results as quality gates in your delivery pipeline. Integrating with JIRA Seamlessly incorporate Jira projects into your releases. Integrating with ServiceNow Create and manage ServiceNow change requests with UrbanCode Velocity. Update change requests with Velocity tasks and then react to status changes. Control deployment progress with change request updates. Parent topic: Administration","title":"Managing integrations"},{"location":"com.ibm.uvelocity.doc/topics/c_node_overview/","text":"Overview Using UrbanCode Velocity you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports UrbanCode Velocity you can create and manage pipelines and releases. Overview of UrbanCode Velocity Use UrbanCode Velocity to standardize and automate processes in your release lifecycle and gather insights into your UrbanCode Deploy environment. Introduction to releases and pipelines A release represents the delivery of multiple application through one or more phases of a lifecycle. A typical release includes many deployments to test environments and a small number of highly orchestrated deployments to staging and production. Release managers can define milestones that lead up to the release, as well as a plan to deliver participating applications to each phase of the lifecycle. Home page Use the Home page to view pipelines, releases, and reports defined in your environment. Key terminology This topic included terms and concepts used within the UrbanCode Velocity environment. Notices","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_overview/#overview","text":"Using UrbanCode Velocity you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports UrbanCode Velocity you can create and manage pipelines and releases. Overview of UrbanCode Velocity Use UrbanCode Velocity to standardize and automate processes in your release lifecycle and gather insights into your UrbanCode Deploy environment. Introduction to releases and pipelines A release represents the delivery of multiple application through one or more phases of a lifecycle. A typical release includes many deployments to test environments and a small number of highly orchestrated deployments to staging and production. Release managers can define milestones that lead up to the release, as well as a plan to deliver participating applications to each phase of the lifecycle. Home page Use the Home page to view pipelines, releases, and reports defined in your environment. Key terminology This topic included terms and concepts used within the UrbanCode Velocity environment. Notices","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_reports/","text":"Reports The Home page displays reports that are available to you. Each report is listed as a separate tile. For quick reference, you can see the last time that you accessed a report. The Home page is also where you can create reports. Custom reports Custom reports can provide a wide spectrum of data. It is the most diverse of the available report types. Delivery Transformation reports Delivery Transformation reports focus on deployment trends.","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_reports/#reports","text":"The Home page displays reports that are available to you. Each report is listed as a separate tile. For quick reference, you can see the last time that you accessed a report. The Home page is also where you can create reports. Custom reports Custom reports can provide a wide spectrum of data. It is the most diverse of the available report types. Delivery Transformation reports Delivery Transformation reports focus on deployment trends.","title":"Reports"},{"location":"com.ibm.uvelocity.doc/topics/c_node_security/","text":"Security The UrbanCode Velocity security model is organization- and team-based. The organization is the base element; teams belong to organizations. Team members manage releases, events, and deployments. Administrators manage teams and assign users to them. The team-based security model means that teams manage releases, reports, pipelines, events, and run deployments. Only team members can create or modify team-managed objects. Users can be assigned to more than one team. Users are identified by email address. The UrbanCode Velocity administrator manages the security system and manages teams and users. After UrbanCode Velocity is integrated with IBM UrbanCode Deploy , UrbanCode Deploy teams and applications can be imported into UrbanCode Velocity. When a team is imported, all team members are imported. Users are identified by email address. Administrators can also create users. Roles and permissions A number of roles are defined in the product that can be assigned to an user or group. Roles set boundaries on the release tasks that an user or group member can perform. Managing users Use the User authentication settings page to manage user authentication. Managing user groups You can combine users into groups. When you grant permissions to the group, you simultaneously grant them to the group members. When you assign a group to a team, all group members are simultaneously assigned to the team. Managing teams To prepare a team, you create the team and then add users or user groups to it. After you add users, you assign permissions to them. Managing user permissions Permissions define the scope of user actions. Administrators assign permissions when they add users to teams. Permissions are granted to individual users or user groups. Users can have different permissions for different teams. Managing UrbanCode Deploy teams When an UrbanCode Deploy team is imported, in addition to the roster of team members, all applications that are managed by the team are also imported. Imported applications can be used in any deployment that is managed by the team. Parent topic: Administration","title":"Security overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_security/#security","text":"The UrbanCode Velocity security model is organization- and team-based. The organization is the base element; teams belong to organizations. Team members manage releases, events, and deployments. Administrators manage teams and assign users to them. The team-based security model means that teams manage releases, reports, pipelines, events, and run deployments. Only team members can create or modify team-managed objects. Users can be assigned to more than one team. Users are identified by email address. The UrbanCode Velocity administrator manages the security system and manages teams and users. After UrbanCode Velocity is integrated with IBM UrbanCode Deploy , UrbanCode Deploy teams and applications can be imported into UrbanCode Velocity. When a team is imported, all team members are imported. Users are identified by email address. Administrators can also create users. Roles and permissions A number of roles are defined in the product that can be assigned to an user or group. Roles set boundaries on the release tasks that an user or group member can perform. Managing users Use the User authentication settings page to manage user authentication. Managing user groups You can combine users into groups. When you grant permissions to the group, you simultaneously grant them to the group members. When you assign a group to a team, all group members are simultaneously assigned to the team. Managing teams To prepare a team, you create the team and then add users or user groups to it. After you add users, you assign permissions to them. Managing user permissions Permissions define the scope of user actions. Administrators assign permissions when they add users to teams. Permissions are granted to individual users or user groups. Users can have different permissions for different teams. Managing UrbanCode Deploy teams When an UrbanCode Deploy team is imported, in addition to the roster of team members, all applications that are managed by the team are also imported. Imported applications can be used in any deployment that is managed by the team. Parent topic: Administration","title":"Security"},{"location":"com.ibm.uvelocity.doc/topics/c_node_setup/","text":"Setup the environment After UrbanCode\u2122 Velocity installation is complete, there are two tasks that must be performed: integrating with a source repository and authenticating users. Getting started The administrator must complete several tasks before users can access and run reports.","title":"Setup the environment"},{"location":"com.ibm.uvelocity.doc/topics/c_node_setup/#setup-the-environment","text":"After UrbanCode\u2122 Velocity installation is complete, there are two tasks that must be performed: integrating with a source repository and authenticating users. Getting started The administrator must complete several tasks before users can access and run reports.","title":"Setup the environment"},{"location":"com.ibm.uvelocity.doc/topics/c_node_troubleshoot/","text":"Troubleshooting Before you contacting support, gather background information and perform tasks that will assist in solving the problem. It helps to be as specific as possible and include all relevant information. Contacting support Viewing log files Types of problems and checks to perform This topic contains tips for troubleshooting","title":"Overview"},{"location":"com.ibm.uvelocity.doc/topics/c_node_troubleshoot/#troubleshooting","text":"Before you contacting support, gather background information and perform tasks that will assist in solving the problem. It helps to be as specific as possible and include all relevant information. Contacting support Viewing log files Types of problems and checks to perform This topic contains tips for troubleshooting","title":"Troubleshooting"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_ce/","text":"Overview of the community edition Using UrbanCode Velocity Community Edition you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports that your create there are several out-of-the-box reports that you can use right away. Using filters, you can customize the data to view. The information you learn from reports gives you insights into your development processes. There are number of advantages for gathering reports. You can use the information whether your environment is new to DevOps, making changes, or you have a mature DevOps process. Staying ahead means constant monitoring and improving. New applications to deploy, team changes, environment changes, and other things that worked well in the past might not function well today. Historical data about your DevOps processes allows you to do the following and more: Explore a project's development maturity Identify files with high error tendency Determine compliance of a project against development practices Learn how your team collaborates and how it can work better Analyze results from unit tests, functional tests, security scans, application scans, and code coverage tools at specified gates in your deployment process View trends in code coverage, builds and deployments View deployment statistics, metrics, and other information about deployment duration, successes, and failures Reports display in graphical charts and tables making it easy to view trends. And, you can focus in on details. Parent topic: Overview","title":"Overview of the community edition"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_ce/#overview-of-the-community-edition","text":"Using UrbanCode Velocity Community Edition you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports that your create there are several out-of-the-box reports that you can use right away. Using filters, you can customize the data to view. The information you learn from reports gives you insights into your development processes. There are number of advantages for gathering reports. You can use the information whether your environment is new to DevOps, making changes, or you have a mature DevOps process. Staying ahead means constant monitoring and improving. New applications to deploy, team changes, environment changes, and other things that worked well in the past might not function well today. Historical data about your DevOps processes allows you to do the following and more: Explore a project's development maturity Identify files with high error tendency Determine compliance of a project against development practices Learn how your team collaborates and how it can work better Analyze results from unit tests, functional tests, security scans, application scans, and code coverage tools at specified gates in your deployment process View trends in code coverage, builds and deployments View deployment statistics, metrics, and other information about deployment duration, successes, and failures Reports display in graphical charts and tables making it easy to view trends. And, you can focus in on details. Parent topic: Overview","title":"Overview of the community edition"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_release/","text":"Introduction to releases and pipelines A release represents the delivery of multiple application through one or more phases of a lifecycle. A typical release includes many deployments to test environments and a small number of highly orchestrated deployments to staging and production. Release managers can define milestones that lead up to the release, as well as a plan to deliver participating applications to each phase of the lifecycle. Releases can represent all kinds of events, from major events in the life of your company to comparatively minor events, like recurring maintenance. You assign the applications, which are business-meaningful pieces of a system or software that can be independently deployed, to the release. You create deployment plans, which define the tasks that must be completed when a deployment runs, for your release. Pipelines automate releases. Pipeline stages organize input and jobs as your code is built, deployed, and tested. Stages accept input from either source control repositories (SCM) or other external applications, such as UrbanCode Deploy. Stages and jobs run serially; they enable flow control for your work. Parent topic: Overview","title":"Introduction to releases and pipelines"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_release/#introduction-to-releases-and-pipelines","text":"A release represents the delivery of multiple application through one or more phases of a lifecycle. A typical release includes many deployments to test environments and a small number of highly orchestrated deployments to staging and production. Release managers can define milestones that lead up to the release, as well as a plan to deliver participating applications to each phase of the lifecycle. Releases can represent all kinds of events, from major events in the life of your company to comparatively minor events, like recurring maintenance. You assign the applications, which are business-meaningful pieces of a system or software that can be independently deployed, to the release. You create deployment plans, which define the tasks that must be completed when a deployment runs, for your release. Pipelines automate releases. Pipeline stages organize input and jobs as your code is built, deployed, and tested. Stages accept input from either source control repositories (SCM) or other external applications, such as UrbanCode Deploy. Stages and jobs run serially; they enable flow control for your work. Parent topic: Overview","title":"Introduction to releases and pipelines"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_se/","text":"Overview of UrbanCode Velocity Use UrbanCode Velocity to standardize and automate processes in your release lifecycle and gather insights into your UrbanCode Deploy environment. It allow you to move releases through your development cycle's phases, from preproduction to production. You create and implement a predictable schedule of releases for your software applications. If you use team-based planning software, you can integrate related changes to your release plan to make your plan comprehensive and clear. Your release plan and status can be shared with all stakeholders so that they know the schedule and the key milestones and can identify issues that might delay releases. UrbanCode Velocity is an enterprise-scale release management service that supports both cloud-native and on-premises deployment tools. You can integrate your release with Jira, ServiceNow, and deployment risk analysis tasks. Integrating with your UrbanCode Deploy environments, you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports that your create there are several out-of-the-box reports that you can use right away. Using filters, you can customize the data to view. Parent topic: Overview","title":"Overview of UrbanCode Velocity"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_se/#overview-of-urbancode-velocity","text":"Use UrbanCode Velocity to standardize and automate processes in your release lifecycle and gather insights into your UrbanCode Deploy environment. It allow you to move releases through your development cycle's phases, from preproduction to production. You create and implement a predictable schedule of releases for your software applications. If you use team-based planning software, you can integrate related changes to your release plan to make your plan comprehensive and clear. Your release plan and status can be shared with all stakeholders so that they know the schedule and the key milestones and can identify issues that might delay releases. UrbanCode Velocity is an enterprise-scale release management service that supports both cloud-native and on-premises deployment tools. You can integrate your release with Jira, ServiceNow, and deployment risk analysis tasks. Integrating with your UrbanCode Deploy environments, you can request reports based on your criterion from data retrieved from your UrbanCode Deploy environment. In addition, to reports that your create there are several out-of-the-box reports that you can use right away. Using filters, you can customize the data to view. Parent topic: Overview","title":"Overview of UrbanCode Velocity"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_se_homepage/","text":"Home page Use the Home page to view pipelines, releases, and reports defined in your environment. Access the Home page and user interface using the user interface URL provided by your administrator. To have access to the interface, the administrator must have authenticated your access. After providing your credentials, the Home page displays. From the Home page, you can view pipelines, releases, and reports. The Home page task bar allows you to access details and work with pipelines, releases, and reports. Clicking Pipelines , Releases , or Reports takes you to its home page where you can view all, create, or modify. If you have administrator privileges, there are several functions available by clicking the Settings icon ( ) on the task bar to perform the following tasks. Setup the presentation style for the calendar Integrate repositories Authenticate and authorize users Setup an email server The Home also contains recently accessed pipelines, releases, and reports. Each is represented by a tile. Clicking the tile provides associated details and allows you to work the pipeline, release, or report selected. Use the taskbar or click View all to access the Pipelines, Releases, or Reports pages. Parent topic: Overview","title":"Home page"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_se_homepage/#home-page","text":"Use the Home page to view pipelines, releases, and reports defined in your environment. Access the Home page and user interface using the user interface URL provided by your administrator. To have access to the interface, the administrator must have authenticated your access. After providing your credentials, the Home page displays. From the Home page, you can view pipelines, releases, and reports. The Home page task bar allows you to access details and work with pipelines, releases, and reports. Clicking Pipelines , Releases , or Reports takes you to its home page where you can view all, create, or modify. If you have administrator privileges, there are several functions available by clicking the Settings icon ( ) on the task bar to perform the following tasks. Setup the presentation style for the calendar Integrate repositories Authenticate and authorize users Setup an email server The Home also contains recently accessed pipelines, releases, and reports. Each is represented by a tile. Clicking the tile provides associated details and allows you to work the pipeline, release, or report selected. Use the taskbar or click View all to access the Pipelines, Releases, or Reports pages. Parent topic: Overview","title":"Home page"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_terms/","text":"Key terminology This topic included terms and concepts used within the UrbanCode Velocity environment. Activities Refer to item such as: releases, events, and deployment plans. Application Refers to the UrbanCode Deploy applications. Applications have processes, their steps usually start processes or modify resources. An application contains environments, which describe all the deployment locations that are needed in your deployment process, and you run application processes to deploy components to environments. Auto task Refers to task that start automatically as soon as they are eligible to run. Examples of auto task types include: UrbanCode Deploy, Continuous Delivery pipeline, email, and Slack. Dependent task A task that is dependent on another task to complete before it starts. The task that a dependent task waits for is called a prerequisite task. Dependent tasks cannot start until all its prerequisite tasks are resolved. Dependent tasks are used to ensure that tasks run in the expected order. Deployment The activities used to deliver a software project to a deployment target. Typically, you run deployments for each stage of your release lifecycle, ending with the production stage when the software becomes generally available. The activities that are performed during a deployment, called tasks, are defined in deployment plans. You start a deployment by starting one of the plan's eligible tasks. You complete a deployment by resolving all the tasks in the deployment plan. Duration The time a task takes to run. Duration is measured from the time a task starts until it is resolved. When you create some task types, you can estimate its expected duration. Duration is reported in minutes. Environment A collection of resources that identify the components that can be deployed by the parent application, along with the agents that do the work. Events Events are release-related activities that are applied to releases and tracked with the calendar. You can use events to organize your releases and other time-dependent activities, such as holidays and blackouts. Execution pattern Refers to the order in which tasks in a deployment plan become eligible to run. By default, a plan's execution pattern is sequential. Sequential tasks run in order beginning with the first task in the plan. You can combine tasks into groups and assign the parallel execution pattern to the group. Parallel tasks can run in any order and run simultaneously. Integration Refers to regularized communication between UrbanCode Velocity and external products and services. Communication with integrated products can be bidirectional. Process In UrbanCode Deploy, processes define automation activities, such as deploying components. Tag A label that you can apply to tasks or releases. When applied to tasks, tags can determine task applicability for a given deployment. When applied to releases, tags can be used to organize and filter releases. Task Represents a business-meaningful activity that has starting and ending points and a measurable duration. Durations are used to estimate deployment times. You add tasks to deployment plans. When you run a deployment, you complete the tasks in the plan Task group You can combine two or more tasks into a task group. When you form a group, you define the group's execution pattern, either sequential or parallel. Team A team is a collection of users and groups. Version Represents an UrbanCode Deploy application snapshot. Parent topic: Overview","title":"Key terminology"},{"location":"com.ibm.uvelocity.doc/topics/c_overview_terms/#key-terminology","text":"This topic included terms and concepts used within the UrbanCode Velocity environment. Activities Refer to item such as: releases, events, and deployment plans. Application Refers to the UrbanCode Deploy applications. Applications have processes, their steps usually start processes or modify resources. An application contains environments, which describe all the deployment locations that are needed in your deployment process, and you run application processes to deploy components to environments. Auto task Refers to task that start automatically as soon as they are eligible to run. Examples of auto task types include: UrbanCode Deploy, Continuous Delivery pipeline, email, and Slack. Dependent task A task that is dependent on another task to complete before it starts. The task that a dependent task waits for is called a prerequisite task. Dependent tasks cannot start until all its prerequisite tasks are resolved. Dependent tasks are used to ensure that tasks run in the expected order. Deployment The activities used to deliver a software project to a deployment target. Typically, you run deployments for each stage of your release lifecycle, ending with the production stage when the software becomes generally available. The activities that are performed during a deployment, called tasks, are defined in deployment plans. You start a deployment by starting one of the plan's eligible tasks. You complete a deployment by resolving all the tasks in the deployment plan. Duration The time a task takes to run. Duration is measured from the time a task starts until it is resolved. When you create some task types, you can estimate its expected duration. Duration is reported in minutes. Environment A collection of resources that identify the components that can be deployed by the parent application, along with the agents that do the work. Events Events are release-related activities that are applied to releases and tracked with the calendar. You can use events to organize your releases and other time-dependent activities, such as holidays and blackouts. Execution pattern Refers to the order in which tasks in a deployment plan become eligible to run. By default, a plan's execution pattern is sequential. Sequential tasks run in order beginning with the first task in the plan. You can combine tasks into groups and assign the parallel execution pattern to the group. Parallel tasks can run in any order and run simultaneously. Integration Refers to regularized communication between UrbanCode Velocity and external products and services. Communication with integrated products can be bidirectional. Process In UrbanCode Deploy, processes define automation activities, such as deploying components. Tag A label that you can apply to tasks or releases. When applied to tasks, tags can determine task applicability for a given deployment. When applied to releases, tags can be used to organize and filter releases. Task Represents a business-meaningful activity that has starting and ending points and a measurable duration. Durations are used to estimate deployment times. You add tasks to deployment plans. When you run a deployment, you complete the tasks in the plan Task group You can combine two or more tasks into a task group. When you form a group, you define the group's execution pattern, either sequential or parallel. Team A team is a collection of users and groups. Version Represents an UrbanCode Deploy application snapshot. Parent topic: Overview","title":"Key terminology"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_UCDteams/","text":"Managing UrbanCode Deploy teams When an UrbanCode Deploy team is imported, in addition to the roster of team members, all applications that are managed by the team are also imported. Imported applications can be used in any deployment that is managed by the team. If a user is a member of more than one team, they can use the applications from all of their teams. [Imported applications are managed with UrbanCode Deploy tasks](UCCR_tasks.html#tasks_UDTasks). If an imported application has a protected environment, the environment cannot be used until a team member is granted the **ADMIN** permission. If several imported users have the same email address, such as admins, only one user is created in UrbanCode Velocity. Parent topic: Security","title":"Managing UrbanCode Deploy teams"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_UCDteams/#managing-urbancode-deploy-teams","text":"When an UrbanCode Deploy team is imported, in addition to the roster of team members, all applications that are managed by the team are also imported. Imported applications can be used in any deployment that is managed by the team. If a user is a member of more than one team, they can use the applications from all of their teams. [Imported applications are managed with UrbanCode Deploy tasks](UCCR_tasks.html#tasks_UDTasks). If an imported application has a protected environment, the environment cannot be used until a team member is granted the **ADMIN** permission. If several imported users have the same email address, such as admins, only one user is created in UrbanCode Velocity. Parent topic: Security","title":"Managing UrbanCode Deploy teams"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_groups/","text":"Managing user groups You can combine users into groups. When you grant permissions to the group, you simultaneously grant them to the group members. When you assign a group to a team, all group members are simultaneously assigned to the team. Note: Groups cannot be imported from UrbanCode Deploy. To create a group, complete the following steps: On the Releases page, click **Settings** <img class=\"inline\" src=\"images/cal-set.png\" alt=\"Settings icon\">, and then click **Groups**. On the Groups page, click **New Group**, and in the Add New Group window, enter a name for the group, and then click **Save**. With the group selected, click **Add user**. In the **User** list, select a user, and then click **Save**. The user is added to the **Members** list. You can add a user by typing the user's email address. The email address is used as the user name. Parent topic: Security","title":"Managing user groups"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_groups/#managing-user-groups","text":"You can combine users into groups. When you grant permissions to the group, you simultaneously grant them to the group members. When you assign a group to a team, all group members are simultaneously assigned to the team. Note: Groups cannot be imported from UrbanCode Deploy. To create a group, complete the following steps: On the Releases page, click **Settings** <img class=\"inline\" src=\"images/cal-set.png\" alt=\"Settings icon\">, and then click **Groups**. On the Groups page, click **New Group**, and in the Add New Group window, enter a name for the group, and then click **Save**. With the group selected, click **Add user**. In the **User** list, select a user, and then click **Save**. The user is added to the **Members** list. You can add a user by typing the user's email address. The email address is used as the user name. Parent topic: Security","title":"Managing user groups"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_permissions/","text":"Managing user permissions Permissions define the scope of user actions. Administrators assign permissions when they add users to teams. Permissions are granted to individual users or user groups. Users can have different permissions for different teams. New users have no granted permissions. Before users can do any meaningful work, they must be granted permissions. The permission types are described in this list: The Participant permission enables users to perform all product functions except manage the security system. Users with this permission can create releases and deployment plans, and run deployments. The Admin permission enables users to perform all product functions and manage the UrbanCode Velocity security system. Note: To use UrbanCode Deploy applications with protected environments , a user must have the Admin permission. Parent topic: Security","title":"Managing user permissions"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_permissions/#managing-user-permissions","text":"Permissions define the scope of user actions. Administrators assign permissions when they add users to teams. Permissions are granted to individual users or user groups. Users can have different permissions for different teams. New users have no granted permissions. Before users can do any meaningful work, they must be granted permissions. The permission types are described in this list: The Participant permission enables users to perform all product functions except manage the security system. Users with this permission can create releases and deployment plans, and run deployments. The Admin permission enables users to perform all product functions and manage the UrbanCode Velocity security system. Note: To use UrbanCode Deploy applications with protected environments , a user must have the Admin permission. Parent topic: Security","title":"Managing user permissions"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_teams/","text":"Managing teams To prepare a team, you create the team and then add users or user groups to it. After you add users, you assign permissions to them. To create a team and assign users, complete the following steps: Click Settings , and then click User authorization > Teams . On the Teams page, click Create team , and in the Add new team window, enter a name for the team, and then click Save . With the team selected, click Add member to add a user or group. In the Member field, enter or select the user, and then click Save . The user is added to the Member list. New team members have no permissions. To grant permissions to a user, with the team displayed, click the permission that you want to grant. After a team is created, any team member can assign it to releases, pipelines, reports, and deployment plans. Parent topic: Security","title":"Managing teams"},{"location":"com.ibm.uvelocity.doc/topics/cr_security_teams/#managing-teams","text":"To prepare a team, you create the team and then add users or user groups to it. After you add users, you assign permissions to them. To create a team and assign users, complete the following steps: Click Settings , and then click User authorization > Teams . On the Teams page, click Create team , and in the Add new team window, enter a name for the team, and then click Save . With the team selected, click Add member to add a user or group. In the Member field, enter or select the user, and then click Save . The user is added to the Member list. New team members have no permissions. To grant permissions to a user, with the team displayed, click the permission that you want to grant. After a team is created, any team member can assign it to releases, pipelines, reports, and deployment plans. Parent topic: Security","title":"Managing teams"},{"location":"com.ibm.uvelocity.doc/topics/licenseManage/","text":"License management UrbanCode\u2122 Velocity Standard Edition provides a 60-day license-free evaluation period. Unless you configure a license when you install UrbanCode Velocity Standard Edition, a 60-day evaluation period begins. During evaluation, you can use all product features. By the end of the 60-day trial, you must configure a license. You can apply a license at any time. Note: The UrbanCode Velocity Community Edition is free to use and does not require a license. For more information about setting up a Rational\u00ae Common Licensing server and applying licenses, see the Rational Common Licensing help: Rational Common Licensing documentation The Rational License Key Center is an online licensing tool. You can use this tool to generate or return your IBM Rational product license keys. License scenarios To continue using the product after the evaluation period, you must acquire a license. Managing licenses To use licenses, you install a Rational Common Licensing server, import your license keys, and link UrbanCode Velocity to the license server. Parent topic: Administration","title":"License overview"},{"location":"com.ibm.uvelocity.doc/topics/licenseManage/#license-management","text":"UrbanCode\u2122 Velocity Standard Edition provides a 60-day license-free evaluation period. Unless you configure a license when you install UrbanCode Velocity Standard Edition, a 60-day evaluation period begins. During evaluation, you can use all product features. By the end of the 60-day trial, you must configure a license. You can apply a license at any time. Note: The UrbanCode Velocity Community Edition is free to use and does not require a license. For more information about setting up a Rational\u00ae Common Licensing server and applying licenses, see the Rational Common Licensing help: Rational Common Licensing documentation The Rational License Key Center is an online licensing tool. You can use this tool to generate or return your IBM Rational product license keys. License scenarios To continue using the product after the evaluation period, you must acquire a license. Managing licenses To use licenses, you install a Rational Common Licensing server, import your license keys, and link UrbanCode Velocity to the license server. Parent topic: Administration","title":"License management"},{"location":"com.ibm.uvelocity.doc/topics/license_apply/","text":"Managing licenses To use licenses, you install a Rational\u00ae Common Licensing server, import your license keys, and link UrbanCode\u2122 Velocity to the license server. Ensure that you have a Rational Common Licensing server with licenses for UrbanCode Velocity. The user applying the license must be in a role with administrative privileges. For information about the types of licenses, see License scenarios . On the UrbanCode Velocity Web application, click Settings , and then, on the Settings page, select License Management . On the License management page, click Connect Server . On the License server connection page, in the License server field, specify the connection information for the license server, and then click Save . You can specify the port and host name or IP address for the license server, such as 27000@RCLServer.example.com . To avoid problems when a license server is not available, you can specify multiple license servers. In this case, separate each address with colons on Linux and UNIX or semicolons on Windows, as in the following example: 27000@RCLServer.example.com;27000@backupRCLServer.example.com . Click Save . The License management page displays license usage for your license types. To modify, add, or remove license servers, click Edit . Parent topic: License management","title":"Managing licenses"},{"location":"com.ibm.uvelocity.doc/topics/license_apply/#managing-licenses","text":"To use licenses, you install a Rational\u00ae Common Licensing server, import your license keys, and link UrbanCode\u2122 Velocity to the license server. Ensure that you have a Rational Common Licensing server with licenses for UrbanCode Velocity. The user applying the license must be in a role with administrative privileges. For information about the types of licenses, see License scenarios . On the UrbanCode Velocity Web application, click Settings , and then, on the Settings page, select License Management . On the License management page, click Connect Server . On the License server connection page, in the License server field, specify the connection information for the license server, and then click Save . You can specify the port and host name or IP address for the license server, such as 27000@RCLServer.example.com . To avoid problems when a license server is not available, you can specify multiple license servers. In this case, separate each address with colons on Linux and UNIX or semicolons on Windows, as in the following example: 27000@RCLServer.example.com;27000@backupRCLServer.example.com . Click Save . The License management page displays license usage for your license types. To modify, add, or remove license servers, click Edit . Parent topic: License management","title":"Managing licenses"},{"location":"com.ibm.uvelocity.doc/topics/license_scenarios/","text":"License scenarios To continue using the product after the evaluation period, you must acquire a license. UrbanCode\u2122 Velocity supports floating- and token-type licenses. You can see the type of license that the server is using by logging onto the UrbanCode Velocity server, and accessing the License Management page, Settings > License management . Note: UrbanCode Velocity is also available as a hosted service. In this case, IBM hosts the server for you. For more information, see the IBM Marketplace . If both license types are available, UrbanCode Velocity uses the type of license with the highest priority. The license scenarios have the following priority, from highest to lowest: Concurrent sessions (floating licenses) Concurrent sessions (token licenses) Concurrent sessions (floating licenses) An IBM Rational floating license is a license for a single software product that can be shared among multiple team members. However, the total number of concurrent users cannot exceed the number of floating licenses you purchase. In this scenario, when a user logs on to UrbanCode Velocity, a license is retrieved from a license server. If the first license server does not have available licenses, UrbanCode Velocity attempts to retrieve a license from the other license servers. 15 minutes after the user logs off, the server returns the license to the license server. For this type of licensing, the Floating Licenses card on the License Management page displays license usage statistics . Concurrent sessions (token licenses) The token-based license model means that you can buy a certain number of token licenses. In this scenario, when a user logs on, UrbanCode Velocity retrieves thirteen tokens from a license server. If the first license server does not have enough tokens available, the UrbanCode Velocity server attempts to retrieve licenses from the other license servers. Each user requires thirteen tokens. 15 minutes after the user logs off, the server returns the licenses to the license server. For this type of licensing, the Token Licenses card on the License Management page displays license usage statistics . Parent topic: License management","title":"License scenarios"},{"location":"com.ibm.uvelocity.doc/topics/license_scenarios/#license-scenarios","text":"To continue using the product after the evaluation period, you must acquire a license. UrbanCode\u2122 Velocity supports floating- and token-type licenses. You can see the type of license that the server is using by logging onto the UrbanCode Velocity server, and accessing the License Management page, Settings > License management . Note: UrbanCode Velocity is also available as a hosted service. In this case, IBM hosts the server for you. For more information, see the IBM Marketplace . If both license types are available, UrbanCode Velocity uses the type of license with the highest priority. The license scenarios have the following priority, from highest to lowest: Concurrent sessions (floating licenses) Concurrent sessions (token licenses)","title":"License scenarios"},{"location":"com.ibm.uvelocity.doc/topics/license_scenarios/#concurrent-sessions-40floating-licenses41","text":"An IBM Rational floating license is a license for a single software product that can be shared among multiple team members. However, the total number of concurrent users cannot exceed the number of floating licenses you purchase. In this scenario, when a user logs on to UrbanCode Velocity, a license is retrieved from a license server. If the first license server does not have available licenses, UrbanCode Velocity attempts to retrieve a license from the other license servers. 15 minutes after the user logs off, the server returns the license to the license server. For this type of licensing, the Floating Licenses card on the License Management page displays license usage statistics .","title":"Concurrent sessions (floating licenses)"},{"location":"com.ibm.uvelocity.doc/topics/license_scenarios/#concurrent-sessions-40token-licenses41","text":"The token-based license model means that you can buy a certain number of token licenses. In this scenario, when a user logs on, UrbanCode Velocity retrieves thirteen tokens from a license server. If the first license server does not have enough tokens available, the UrbanCode Velocity server attempts to retrieve licenses from the other license servers. Each user requires thirteen tokens. 15 minutes after the user logs off, the server returns the licenses to the license server. For this type of licensing, the Token Licenses card on the License Management page displays license usage statistics . Parent topic: License management","title":"Concurrent sessions (token licenses)"},{"location":"com.ibm.uvelocity.doc/topics/notices/","text":"Notices \u00a9 Copyright IBM\u00ae Corporation 2018. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp. Programming interfaces: Intended programming interfaces allow the customer to write programs to obtain the services of IBM UrbanCode Velocity . This information was developed for products and services offered in the U.S.A. IBM may not offer the products, services, or features discussed in this document in other countries. Consult your local IBM representative for information on the products and services currently available in your area. Any reference to an IBM product, program, or service is not intended to state or imply that only that IBM product, program, or service may be used. Any functionally equivalent product, program, or service that does not infringe any IBM intellectual property right may be used instead. However, it is the user's responsibility to evaluate and verify the operation of any non-IBM product, program, or service. IBM may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not grant you any license to these patents. You can send license inquiries, in writing, to: IBM Director of Licensing IBM Corporation North Castle Drive Armonk, NY 10504-1785 U.S.A. For license inquiries regarding double-byte character set (DBCS) information, contact the IBM Intellectual Property Department in your country or send inquiries, in writing, to: Intellectual Property Licensing Legal and Intellectual Property Law IBM Japan, Ltd. 19-21, Nihonbashi-Hakozakicho, Chuo-ku Tokyo 103-8510, Japan The following paragraph does not apply to the United Kingdom or any other country where such provisions are inconsistent with local law: INTERNATIONAL BUSINESS MACHINES CORPORATION PROVIDES THIS PUBLICATION \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some states do not allow disclaimer of express or implied warranties in certain transactions, therefore, this statement may not apply to you. This information could include technical inaccuracies or typographical errors. Changes are periodically made to the information herein; these changes will be incorporated in new editions of the publication. IBM may make improvements and/or changes in the product(s) and/or the program(s) described in this publication at any time without notice. Any references in this information to non-IBM websites are provided for convenience only and do not in any manner serve as an endorsement of those websites. The materials at those websites are not part of the materials for this IBM product and use of those websites is at your own risk. IBM may use or distribute any of the information you supply in any way it believes appropriate without incurring any obligation to you. Licensees of this program who wish to have information about it for the purpose of enabling: (i) the exchange of information between independently created programs and other programs (including this one) and (ii) the mutual use of the information which has been exchanged, should contact: Intellectual Property Dept. for Rational\u00ae Software IBM Corporation 5 Technology Park Drive Westford, MA 01886 U.S.A. Such information may be available, subject to appropriate terms and conditions, including in some cases, payment of a fee. The licensed program described in this document and all licensed material available for it are provided by IBM under terms of the IBM Customer Agreement, IBM International Program License Agreement or any equivalent agreement between us. Any performance data contained herein was determined in a controlled environment. Therefore, the results obtained in other operating environments may vary significantly. Some measurements may have been made on development-level systems and there is no guarantee that these measurements will be the same on generally available systems. Furthermore, some measurements may have been estimated through extrapolation. Actual results may vary. Users of this document should verify the applicable data for their specific environment. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements or other publicly available sources. IBM has not tested those products and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. All statements regarding IBM's future direction or intent are subject to change or withdrawal without notice, and represent goals and objectives only. This information contains examples of data and reports used in daily business operations. To illustrate them as completely as possible, the examples include the names of individuals, companies, brands, and products. All of these names are fictitious and any similarity to the names and addresses used by an actual business enterprise is entirely coincidental. Copyright license This information contains sample application programs in source language, which illustrate programming techniques on various operating platforms. You may copy, modify, and distribute these sample programs in any form without payment to IBM, for the purposes of developing, using, marketing or distributing application programs conforming to the application programming interface for the operating platform for which the sample programs are written. These examples have not been thoroughly tested under all conditions. IBM, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs. The sample programs are provided \"AS IS\", without warranty of any kind. IBM shall not be liable for any damages arising out of your use of the sample programs. Each copy or any portion of these sample programs or any derivative work, must include a copyright notice as follows: \u00a9 (your company name) (year). Portions of this code are derived from IBM Corp. Sample Programs. \u00a9 Copyright IBM Corp. 2011, 2015 If you are viewing this information in softcopy, the photographs and color illustrations may not appear. Privacy policy considerations IBM Software products, including software as a service solutions, (\u201cSoftware Offerings\u201d) may use cookies or other technologies to collect product usage information, to help improve the end user experience, or to tailor interactions with the end user, or for other purposes. In many cases no personally identifiable information is collected by the Software Offerings. Some of our Software Offerings can help enable you to collect personally identifiable information. If this Software Offering uses cookies to collect personally identifiable information, specific information about this offering\u2019s use of cookies is set forth below. Depending upon the configurations deployed, this Software Offering may use persistent cookies that collect each user\u2019s user name and password for purposes of authentication and enhanced user usability. These cookies cannot be disabled. If the configurations deployed for this Software Offering provide you as customer the ability to collect personally identifiable information from end users via cookies and other technologies, you should seek your own legal advice about any laws applicable to such data collection, including any requirements for notice and consent. For more information about the use of various technologies, including cookies, for these purposes, see IBM\u2019s Privacy Policy at http://www.ibm.com/privacy and IBM\u2019s Online Privacy Statement at http://www.ibm.com/privacy/details in the section entitled \u201cCookies, Web Beacons and Other Technologies,\u201d and the \u201cIBM Software Products and Software-as-a-Service Privacy Statement\u201d at http://www.ibm.com/software/info/product-privacy . Trademarks IBM, the IBM logo, and ibm.com\u00ae are trademarks or registered trademarks of International Business Machines Corp., registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the web at \"Copyright and trademark information\" at www.ibm.com/legal/copytrade.shtml . Terms and conditions for product documentation Applicability These terms and conditions are in addition to any terms of use for the IBM website. Personal use You may reproduce these publications for your personal, noncommercial use provided that all proprietary notices are preserved. You may not distribute, display or make derivative work of these publications, or any portion thereof, without the express consent of IBM. Commercial use You may reproduce, distribute and display these publications solely within your enterprise provided that all proprietary notices are preserved. You may not make derivative works of these publications, or reproduce, distribute or display these publications or any portion thereof outside your enterprise, without the express consent of IBM. Rights Except as expressly granted in this permission, no other permissions, licenses or rights are granted, either express or implied, to the publications or any information, data, software or other intellectual property contained therein. IBM reserves the right to withdraw the permissions granted herein whenever, in its discretion, the use of the publications is detrimental to its interest or, as determined by IBM, the above instructions are not being properly followed. You may not download, export or re-export this information except in full compliance with all applicable laws and regulations, including all United States export laws and regulations. IBM MAKES NO GUARANTEE ABOUT THE CONTENT OF THESE PUBLICATIONS. THE PUBLICATIONS ARE PROVIDED \u201cAS-IS\u201d AND WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. Parent topic: Overview","title":"Notices"},{"location":"com.ibm.uvelocity.doc/topics/notices/#notices","text":"\u00a9 Copyright IBM\u00ae Corporation 2018. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp. Programming interfaces: Intended programming interfaces allow the customer to write programs to obtain the services of IBM UrbanCode Velocity . This information was developed for products and services offered in the U.S.A. IBM may not offer the products, services, or features discussed in this document in other countries. Consult your local IBM representative for information on the products and services currently available in your area. Any reference to an IBM product, program, or service is not intended to state or imply that only that IBM product, program, or service may be used. Any functionally equivalent product, program, or service that does not infringe any IBM intellectual property right may be used instead. However, it is the user's responsibility to evaluate and verify the operation of any non-IBM product, program, or service. IBM may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not grant you any license to these patents. You can send license inquiries, in writing, to: IBM Director of Licensing IBM Corporation North Castle Drive Armonk, NY 10504-1785 U.S.A. For license inquiries regarding double-byte character set (DBCS) information, contact the IBM Intellectual Property Department in your country or send inquiries, in writing, to: Intellectual Property Licensing Legal and Intellectual Property Law IBM Japan, Ltd. 19-21, Nihonbashi-Hakozakicho, Chuo-ku Tokyo 103-8510, Japan The following paragraph does not apply to the United Kingdom or any other country where such provisions are inconsistent with local law: INTERNATIONAL BUSINESS MACHINES CORPORATION PROVIDES THIS PUBLICATION \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some states do not allow disclaimer of express or implied warranties in certain transactions, therefore, this statement may not apply to you. This information could include technical inaccuracies or typographical errors. Changes are periodically made to the information herein; these changes will be incorporated in new editions of the publication. IBM may make improvements and/or changes in the product(s) and/or the program(s) described in this publication at any time without notice. Any references in this information to non-IBM websites are provided for convenience only and do not in any manner serve as an endorsement of those websites. The materials at those websites are not part of the materials for this IBM product and use of those websites is at your own risk. IBM may use or distribute any of the information you supply in any way it believes appropriate without incurring any obligation to you. Licensees of this program who wish to have information about it for the purpose of enabling: (i) the exchange of information between independently created programs and other programs (including this one) and (ii) the mutual use of the information which has been exchanged, should contact: Intellectual Property Dept. for Rational\u00ae Software IBM Corporation 5 Technology Park Drive Westford, MA 01886 U.S.A. Such information may be available, subject to appropriate terms and conditions, including in some cases, payment of a fee. The licensed program described in this document and all licensed material available for it are provided by IBM under terms of the IBM Customer Agreement, IBM International Program License Agreement or any equivalent agreement between us. Any performance data contained herein was determined in a controlled environment. Therefore, the results obtained in other operating environments may vary significantly. Some measurements may have been made on development-level systems and there is no guarantee that these measurements will be the same on generally available systems. Furthermore, some measurements may have been estimated through extrapolation. Actual results may vary. Users of this document should verify the applicable data for their specific environment. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements or other publicly available sources. IBM has not tested those products and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. All statements regarding IBM's future direction or intent are subject to change or withdrawal without notice, and represent goals and objectives only. This information contains examples of data and reports used in daily business operations. To illustrate them as completely as possible, the examples include the names of individuals, companies, brands, and products. All of these names are fictitious and any similarity to the names and addresses used by an actual business enterprise is entirely coincidental.","title":"Notices"},{"location":"com.ibm.uvelocity.doc/topics/notices/#copyright-license","text":"This information contains sample application programs in source language, which illustrate programming techniques on various operating platforms. You may copy, modify, and distribute these sample programs in any form without payment to IBM, for the purposes of developing, using, marketing or distributing application programs conforming to the application programming interface for the operating platform for which the sample programs are written. These examples have not been thoroughly tested under all conditions. IBM, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs. The sample programs are provided \"AS IS\", without warranty of any kind. IBM shall not be liable for any damages arising out of your use of the sample programs. Each copy or any portion of these sample programs or any derivative work, must include a copyright notice as follows: \u00a9 (your company name) (year). Portions of this code are derived from IBM Corp. Sample Programs. \u00a9 Copyright IBM Corp. 2011, 2015 If you are viewing this information in softcopy, the photographs and color illustrations may not appear.","title":"Copyright license"},{"location":"com.ibm.uvelocity.doc/topics/notices/#privacy-policy-considerations","text":"IBM Software products, including software as a service solutions, (\u201cSoftware Offerings\u201d) may use cookies or other technologies to collect product usage information, to help improve the end user experience, or to tailor interactions with the end user, or for other purposes. In many cases no personally identifiable information is collected by the Software Offerings. Some of our Software Offerings can help enable you to collect personally identifiable information. If this Software Offering uses cookies to collect personally identifiable information, specific information about this offering\u2019s use of cookies is set forth below. Depending upon the configurations deployed, this Software Offering may use persistent cookies that collect each user\u2019s user name and password for purposes of authentication and enhanced user usability. These cookies cannot be disabled. If the configurations deployed for this Software Offering provide you as customer the ability to collect personally identifiable information from end users via cookies and other technologies, you should seek your own legal advice about any laws applicable to such data collection, including any requirements for notice and consent. For more information about the use of various technologies, including cookies, for these purposes, see IBM\u2019s Privacy Policy at http://www.ibm.com/privacy and IBM\u2019s Online Privacy Statement at http://www.ibm.com/privacy/details in the section entitled \u201cCookies, Web Beacons and Other Technologies,\u201d and the \u201cIBM Software Products and Software-as-a-Service Privacy Statement\u201d at http://www.ibm.com/software/info/product-privacy .","title":"Privacy policy considerations"},{"location":"com.ibm.uvelocity.doc/topics/notices/#trademarks","text":"IBM, the IBM logo, and ibm.com\u00ae are trademarks or registered trademarks of International Business Machines Corp., registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the web at \"Copyright and trademark information\" at www.ibm.com/legal/copytrade.shtml .","title":"Trademarks"},{"location":"com.ibm.uvelocity.doc/topics/notices/#terms-and-conditions-for-product-documentation","text":"Applicability These terms and conditions are in addition to any terms of use for the IBM website. Personal use You may reproduce these publications for your personal, noncommercial use provided that all proprietary notices are preserved. You may not distribute, display or make derivative work of these publications, or any portion thereof, without the express consent of IBM. Commercial use You may reproduce, distribute and display these publications solely within your enterprise provided that all proprietary notices are preserved. You may not make derivative works of these publications, or reproduce, distribute or display these publications or any portion thereof outside your enterprise, without the express consent of IBM. Rights Except as expressly granted in this permission, no other permissions, licenses or rights are granted, either express or implied, to the publications or any information, data, software or other intellectual property contained therein. IBM reserves the right to withdraw the permissions granted herein whenever, in its discretion, the use of the publications is detrimental to its interest or, as determined by IBM, the above instructions are not being properly followed. You may not download, export or re-export this information except in full compliance with all applicable laws and regulations, including all United States export laws and regulations. IBM MAKES NO GUARANTEE ABOUT THE CONTENT OF THESE PUBLICATIONS. THE PUBLICATIONS ARE PROVIDED \u201cAS-IS\u201d AND WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. Parent topic: Overview","title":"Terms and conditions for product documentation"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_authentication/","text":"Managing users Use the User authentication settings page to manage user authentication. This task requires that you are an UrbanCode Velocity administrator. Users can be authenticated from an LDAP, OAuth, or SSO system. You can defined multiple authentications, but only one can be enabled at a time. Users who are not part of an UrbanCode\u2122 Deploy team can also be authenticated. However, they will have access only to demo reports. Use the User authentication settings page to add, edit, and remove authentications. To remove an authentication, click the delete icon next to the user. To modify an authentication, click the edit icon next to the user. To access the User authentication settings page, click Settings > User authentication . To add users and select the method of authentication, click Add . Complete the required fields. Click Save . Parent topic: Security","title":"Managing users"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_authentication/#managing-users","text":"Use the User authentication settings page to manage user authentication. This task requires that you are an UrbanCode Velocity administrator. Users can be authenticated from an LDAP, OAuth, or SSO system. You can defined multiple authentications, but only one can be enabled at a time. Users who are not part of an UrbanCode\u2122 Deploy team can also be authenticated. However, they will have access only to demo reports. Use the User authentication settings page to add, edit, and remove authentications. To remove an authentication, click the delete icon next to the user. To modify an authentication, click the edit icon next to the user. To access the User authentication settings page, click Settings > User authentication . To add users and select the method of authentication, click Add . Complete the required fields. Click Save . Parent topic: Security","title":"Managing users"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_calendar/","text":"Setting up the calendar Use the Calendar Settings page to manage the appearance of calendar events. This task requires that you are an UrbanCode Velocity administrator. Use the Calendar Settings page to add, remove, and set the presentation style such as color for events displayed in the calendar. You can define presentation order of events for days with multiple event types. Events types include the following. Release events and activities Financial blackouts, maintenance windows, release opportunities Holidays The Preview portion of the page displays all the defined events. To access the User authentication settings page, click the Settings icon ( ) at the top right of the user interface. Click Calendar . To create an event, click Add event type for the type of event to be added. There is an Add event type for each event type. Type the name of the event and click the check mark icon. To change the presentation style and color, place the cursor over the default style created and right-mouse click. Optionally, click the edit icon ( ). Use the left and right arrow to set the priority for the event. The left arrow moves the event up and the right arrow moves it down. To remove an event, move the cursor to the event and click the delete icon ( ). To modify an event, move the cursor to the event and click the edit icon ( ). There are separate edit icons for changing the event name and presentation style. Parent topic: Administration","title":"Calendar settings"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_calendar/#setting-up-the-calendar","text":"Use the Calendar Settings page to manage the appearance of calendar events. This task requires that you are an UrbanCode Velocity administrator. Use the Calendar Settings page to add, remove, and set the presentation style such as color for events displayed in the calendar. You can define presentation order of events for days with multiple event types. Events types include the following. Release events and activities Financial blackouts, maintenance windows, release opportunities Holidays The Preview portion of the page displays all the defined events. To access the User authentication settings page, click the Settings icon ( ) at the top right of the user interface. Click Calendar . To create an event, click Add event type for the type of event to be added. There is an Add event type for each event type. Type the name of the event and click the check mark icon. To change the presentation style and color, place the cursor over the default style created and right-mouse click. Optionally, click the edit icon ( ). Use the left and right arrow to set the priority for the event. The left arrow moves the event up and the right arrow moves it down. To remove an event, move the cursor to the event and click the delete icon ( ). To modify an event, move the cursor to the event and click the edit icon ( ). There are separate edit icons for changing the event name and presentation style. Parent topic: Administration","title":"Setting up the calendar"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_emailServer/","text":"Configuring an email server Configure an email server. Obtain a token from your Urban Code Deploy server. When you create the UrbanCode\u2122 Deploy token, specify admin as the user. This task requires that you are an UrbanCode Velocity administrator. After you configure an integration, create tasks to run UrbanCode Deploy applications during your deployments . You can also add applications to your pipeline stages and run them that way. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select UrbanCode Deploy . In the Add UrbanCode Deploy Integration window, enter a name for the integrations, and in the UrbanCode Deploy server URL field, define the URL. The format is HTTPS://hostname:port . For example, HTTPS://sampleUCD:8443 . Note: If you are running UrbanCode Deploy locally, you can substitute HTTPS://host.docker.internal:port in place of localhost . In the UrbanCode Deploy access token field, paste the token from UrbanCode Deploy. Click Save . The initial synchronization includes four months of data. Depending on the amount of data, this process can take some time. Synchronization occurs every fifteen minutes but you can synchronize any time by selecting Resync on the Integration page. To prevent synchronization, select Disable on the Integration page. Parent topic: Administration","title":"Configuring an email server"},{"location":"com.ibm.uvelocity.doc/topics/t_admin_emailServer/#configuring-an-email-server","text":"Configure an email server. Obtain a token from your Urban Code Deploy server. When you create the UrbanCode\u2122 Deploy token, specify admin as the user. This task requires that you are an UrbanCode Velocity administrator. After you configure an integration, create tasks to run UrbanCode Deploy applications during your deployments . You can also add applications to your pipeline stages and run them that way. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select UrbanCode Deploy . In the Add UrbanCode Deploy Integration window, enter a name for the integrations, and in the UrbanCode Deploy server URL field, define the URL. The format is HTTPS://hostname:port . For example, HTTPS://sampleUCD:8443 . Note: If you are running UrbanCode Deploy locally, you can substitute HTTPS://host.docker.internal:port in place of localhost . In the UrbanCode Deploy access token field, paste the token from UrbanCode Deploy. Click Save . The initial synchronization includes four months of data. Depending on the amount of data, this process can take some time. Synchronization occurs every fifteen minutes but you can synchronize any time by selecting Resync on the Integration page. To prevent synchronization, select Disable on the Integration page. Parent topic: Administration","title":"Configuring an email server"},{"location":"com.ibm.uvelocity.doc/topics/t_install_ICP/","text":"Installing on IBM Cloud Private Install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private (ICP). The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. Before starting installation, ensure that the following applications are installed in the target environment: Kubectl installed on the client Helm v2.6.0 or later on client IBM Cloud Private account and a client instance ready to use You will install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the ICP clusters. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Download the helm chart . The file name is velocity-1-1-0-helm.tgz You can use a shell command to download the file. For example, if you are installing the product on Linux\u00ae, you can download the file with a command like this one: wget https://github.com/IBM/velocity-se/releases/velocity-1-1-0-helm.tgz . On you ICP Dashboard, select Configure Client , and then paste the provided Kubectl commands into a command shell on your client and run them. The Kubectl commands define your Kuberbetes context. Test the configuration by running the following commands: kubectl get nodes kubectl get pods --all-namespaces If you see messages like the following examples, your configuration is ready to use. 10.134.119.132 Ready <none> 151d v1.10.0+icp-ee 10.134.119.24 Ready <none> 151d v1.10.0+icp-ee 10.134.119.65 Ready <none> 151d v1.10.0+icp-ee 10.134.119.9 Ready <none> 151d v1.10.0+icp-ee On ICP dashboard, click Manage > Namespaces > Create Namespace > ****, and enter a name for the name space. Create MongoDB in the new namespace by completing the following steps: On the ICP dashboard, select Catalog > ibm-mongodb-dev . On the ibm-mongodb-dev page, select Configure , and then, from the Target namespace list, select the namespace you created earlier. Complete configuration by entering a release name, and password for the MongoDB admin user, and then click Install . This creates a persistent volume claim. Click Platform > Storage > ****, and then create a persistent volume for your claim by completing the following steps: On Storage page, click Create Persistent Volume . On the Create Persistent Volume window, enter a name for the volume. Turn JSON mode ON . The underlying JSON file for the persistent volume is displayed. In the JSON script for the NFS object, and specify the server's IP address, and the path for the new volume. The following code snippet illustrates a typical example: \"nfs\": { \"server\": \"ip\\_address\", \"path\": \"/volume\\_path\" }, Click Create . In the Storage window, check for the status of Bound for the new volume. In a command shell on the client, use the following kubectl command to check pod status: kubectl get pods -n persistentVolume\\_name. Grant additional permissions to the MongoDB user by completing the following steps: Using a client command shell, logon to the pod as the admin user. Use the following command to grant additional permissions: db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) If the command fails, an error message is displayed. If no message is displayed, type exit to leave the pod. Using a client command shell, type kubectl get services -n namespace to display the MongoDB service. Te service name is the host name for the MongoDB service. Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment. However, there are several properties that must be specified. Below are the required properties. access.key The product access key obtained from Passport Advantage. url.domain The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB service name you retrieved in Step 8. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. name The name space where the Helm chart is applied, and the name of Helm chart. --name standard ./velocity-1-1-0-helm.tgz Run the helm install command to install the UrbanCode Velocity images into ICP. The following example shows the a typical configuration properties: ``` helm install \\ --set access.key=my_access_key \\ --set url.domain=my_hostname \\ --set mongo.url=mongodb://mongo:mongo@mongodb-servicename:27017/admin \\ --set url.protocol=https \\ --set ui.service.externalPort=80 \\ --set ingress.enable=true \\ --name standard ./velocity-1-1-0-helm.tgz ``` Access UrbanCode Velocity at the URL you specified in the helm chart. You can refresh the status display by using the following kubectl command: kubectl get pods . The default admin user name is admin and the default password is admin. Parent topic: Installation roadmap","title":"Installing on IBM Cloud Private"},{"location":"com.ibm.uvelocity.doc/topics/t_install_ICP/#installing-on-ibm-cloud-private","text":"Install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private (ICP). The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. Before starting installation, ensure that the following applications are installed in the target environment: Kubectl installed on the client Helm v2.6.0 or later on client IBM Cloud Private account and a client instance ready to use You will install UrbanCode Velocity into a Kubernetes cluster on IBM Cloud Private. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the ICP clusters. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Download the helm chart . The file name is velocity-1-1-0-helm.tgz You can use a shell command to download the file. For example, if you are installing the product on Linux\u00ae, you can download the file with a command like this one: wget https://github.com/IBM/velocity-se/releases/velocity-1-1-0-helm.tgz . On you ICP Dashboard, select Configure Client , and then paste the provided Kubectl commands into a command shell on your client and run them. The Kubectl commands define your Kuberbetes context. Test the configuration by running the following commands: kubectl get nodes kubectl get pods --all-namespaces If you see messages like the following examples, your configuration is ready to use. 10.134.119.132 Ready <none> 151d v1.10.0+icp-ee 10.134.119.24 Ready <none> 151d v1.10.0+icp-ee 10.134.119.65 Ready <none> 151d v1.10.0+icp-ee 10.134.119.9 Ready <none> 151d v1.10.0+icp-ee On ICP dashboard, click Manage > Namespaces > Create Namespace > ****, and enter a name for the name space. Create MongoDB in the new namespace by completing the following steps: On the ICP dashboard, select Catalog > ibm-mongodb-dev . On the ibm-mongodb-dev page, select Configure , and then, from the Target namespace list, select the namespace you created earlier. Complete configuration by entering a release name, and password for the MongoDB admin user, and then click Install . This creates a persistent volume claim. Click Platform > Storage > ****, and then create a persistent volume for your claim by completing the following steps: On Storage page, click Create Persistent Volume . On the Create Persistent Volume window, enter a name for the volume. Turn JSON mode ON . The underlying JSON file for the persistent volume is displayed. In the JSON script for the NFS object, and specify the server's IP address, and the path for the new volume. The following code snippet illustrates a typical example: \"nfs\": { \"server\": \"ip\\_address\", \"path\": \"/volume\\_path\" }, Click Create . In the Storage window, check for the status of Bound for the new volume. In a command shell on the client, use the following kubectl command to check pod status: kubectl get pods -n persistentVolume\\_name. Grant additional permissions to the MongoDB user by completing the following steps: Using a client command shell, logon to the pod as the admin user. Use the following command to grant additional permissions: db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) If the command fails, an error message is displayed. If no message is displayed, type exit to leave the pod. Using a client command shell, type kubectl get services -n namespace to display the MongoDB service. Te service name is the host name for the MongoDB service. Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment. However, there are several properties that must be specified. Below are the required properties. access.key The product access key obtained from Passport Advantage. url.domain The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB service name you retrieved in Step 8. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. name The name space where the Helm chart is applied, and the name of Helm chart. --name standard ./velocity-1-1-0-helm.tgz Run the helm install command to install the UrbanCode Velocity images into ICP. The following example shows the a typical configuration properties: ``` helm install \\ --set access.key=my_access_key \\ --set url.domain=my_hostname \\ --set mongo.url=mongodb://mongo:mongo@mongodb-servicename:27017/admin \\ --set url.protocol=https \\ --set ui.service.externalPort=80 \\ --set ingress.enable=true \\ --name standard ./velocity-1-1-0-helm.tgz ``` Access UrbanCode Velocity at the URL you specified in the helm chart. You can refresh the status display by using the following kubectl command: kubectl get pods . The default admin user name is admin and the default password is admin. Parent topic: Installation roadmap","title":"Installing on IBM Cloud Private"},{"location":"com.ibm.uvelocity.doc/topics/t_install_minikube/","text":"Installing on Minikube You can install UrbanCode Velocity onto a Minikube cluster on your local machine. The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, the following items are required for Minikube installation: Minikube installed onto a hypervisor appropriate for your operating system. On Linux you might use Oracle Virtual Box; on Windows you might use Hyper-V. The CLI that is used for both Minkube and Kubernetes, Kubectl, installed and configured. Helm v2.6.0 or later. MongoDB database installed on your Minikube instance with a persistent volume. Instructions for installing MongoDB are provided below. Add the Minikube IP address to your hosts file and assign a host name to it. Kubernetes requires a host name rather than a simple IP address. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. You will install the product into MiniKube cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the cluster defined in Helm charts. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Download the helm chart . The file name is velocity-1-1-0-helm.tgz You can use a shell command to download the file. For example, if you are installing the product on Linux\u00ae, you can download the file with a command like this one: wget https://github.com/IBM/velocity-se/releases/velocity-1-1-0-helm.tgz . If you do not have a MongoDB database installed, install one now. Follow the instructions at the MongoDB GitHub repository. Below is a sample command for installing the MongoDB: ``` helm install \\ --set database.password=mongo \\ --set database.user=mongo \\ --set database.name=velocity \\ --name velocity-mongo ibm-stable/ibm-mongodb-dev ``` If you use the default IBM MongoDB, grant the user admin permissions. Log on to the MongoDB and use a command similar to this one to grant admin permissions to the user: ``` db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) ``` Create an SSL certificate and key and store them in the velocity-secret.yml file. Create the velocity-secret.yml file. Paste the following code fragment into you file: apiVersion: v1 data: tls.crt: <BASE64 Encoded> tls.key: <Base64 Encoded> kind: Secret metadata: name: velocitytls namespace: default type: Opaque Generate a public key and a private certificate. You can use OpenSSL to generate the certificate and key . The following example creates a certificate named certificate.pem: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certifcate.pem Encrypt the certificate. The following code fragment illustrates how to encrypt the certificate on Linux: cat certificate.pem | base64 Copy the encrypted certificate and then paste it into the tls.crt field in the velocity-secret.yml file. Encrypt the private key and paste it into the tls.key field in the velocity-secret.yml file. Apply velocity-secret.yml file to your Minikube installation. You can use the kubectl command to apply your secret: kubectl apply -f velocity-secret.yml If the process is successful, you will see a message similar to the following one: secret/velocitytls created Enable your ingress and ensure that it points to your host by completing these steps: Use the following command to enable the ingress: minikube addons enable ingress . Note: This step is required by Minikube but not a full Kubernetes installation. In the /velocity/templates/ingress.yaml file, change the host: property to point to your host, and then save the file. Use the following kubectl command to apply the new ingress to Minikube: kubectl apply -f ingress.yaml . Determine the configuration properties for the helm install command. The following code fragment displays a typical command: ``` helm install \\ --set access.key=my_access_key \\ --set url.domain=my_hostname \\ --set mongo.url=mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin \\ --name standard ./velocity-1-1-0-helm.tgz ``` Properties depend on your environment. The following properties are required. The optional properties are given later. access.key The product access key obtained earlier. url.domain The hostname of your node or the Ingress host name. mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. name The name space where the Helm chart is applied, and the name of Helm chart. --name standard ./velocity-1-1-0-helm.tgz Run the helm install command to install the UrbanCode Velocity images into your Minikube Kubernetes cluster. After you run the command, Minikube displays status information about the installation. Refer to the displayed NOTES section for the location of the Minikube administrator dashboard. You manage your Minikube installation on the admin dashboard. When all the containers have the status of running , the installation is complete and you can access UrbanCode Velocity at the URL you specified in the helm chart. You can refresh the status display by using the following kubectl command: kubectl get pods . The default admin user name is admin and the default password is admin. The following Helm chart parameters are optional: apitoken A random string or GUID that is used verify the authenticity of API calls and data. ciphertoken A 32-byte Hex that is used verify the authenticity of API calls and data. hamackey A 32-byte Hex that is used verify the authenticity of API calls and data. loglevel The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off. The default is all . Parent topic: Installation roadmap","title":"Installing on Minikube"},{"location":"com.ibm.uvelocity.doc/topics/t_install_minikube/#installing-on-minikube","text":"You can install UrbanCode Velocity onto a Minikube cluster on your local machine. The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, the following items are required for Minikube installation: Minikube installed onto a hypervisor appropriate for your operating system. On Linux you might use Oracle Virtual Box; on Windows you might use Hyper-V. The CLI that is used for both Minkube and Kubernetes, Kubectl, installed and configured. Helm v2.6.0 or later. MongoDB database installed on your Minikube instance with a persistent volume. Instructions for installing MongoDB are provided below. Add the Minikube IP address to your hosts file and assign a host name to it. Kubernetes requires a host name rather than a simple IP address. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. You will install the product into MiniKube cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the cluster defined in Helm charts. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Download the helm chart . The file name is velocity-1-1-0-helm.tgz You can use a shell command to download the file. For example, if you are installing the product on Linux\u00ae, you can download the file with a command like this one: wget https://github.com/IBM/velocity-se/releases/velocity-1-1-0-helm.tgz . If you do not have a MongoDB database installed, install one now. Follow the instructions at the MongoDB GitHub repository. Below is a sample command for installing the MongoDB: ``` helm install \\ --set database.password=mongo \\ --set database.user=mongo \\ --set database.name=velocity \\ --name velocity-mongo ibm-stable/ibm-mongodb-dev ``` If you use the default IBM MongoDB, grant the user admin permissions. Log on to the MongoDB and use a command similar to this one to grant admin permissions to the user: ``` db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) ``` Create an SSL certificate and key and store them in the velocity-secret.yml file. Create the velocity-secret.yml file. Paste the following code fragment into you file: apiVersion: v1 data: tls.crt: <BASE64 Encoded> tls.key: <Base64 Encoded> kind: Secret metadata: name: velocitytls namespace: default type: Opaque Generate a public key and a private certificate. You can use OpenSSL to generate the certificate and key . The following example creates a certificate named certificate.pem: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certifcate.pem Encrypt the certificate. The following code fragment illustrates how to encrypt the certificate on Linux: cat certificate.pem | base64 Copy the encrypted certificate and then paste it into the tls.crt field in the velocity-secret.yml file. Encrypt the private key and paste it into the tls.key field in the velocity-secret.yml file. Apply velocity-secret.yml file to your Minikube installation. You can use the kubectl command to apply your secret: kubectl apply -f velocity-secret.yml If the process is successful, you will see a message similar to the following one: secret/velocitytls created Enable your ingress and ensure that it points to your host by completing these steps: Use the following command to enable the ingress: minikube addons enable ingress . Note: This step is required by Minikube but not a full Kubernetes installation. In the /velocity/templates/ingress.yaml file, change the host: property to point to your host, and then save the file. Use the following kubectl command to apply the new ingress to Minikube: kubectl apply -f ingress.yaml . Determine the configuration properties for the helm install command. The following code fragment displays a typical command: ``` helm install \\ --set access.key=my_access_key \\ --set url.domain=my_hostname \\ --set mongo.url=mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin \\ --name standard ./velocity-1-1-0-helm.tgz ``` Properties depend on your environment. The following properties are required. The optional properties are given later. access.key The product access key obtained earlier. url.domain The hostname of your node or the Ingress host name. mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. name The name space where the Helm chart is applied, and the name of Helm chart. --name standard ./velocity-1-1-0-helm.tgz Run the helm install command to install the UrbanCode Velocity images into your Minikube Kubernetes cluster. After you run the command, Minikube displays status information about the installation. Refer to the displayed NOTES section for the location of the Minikube administrator dashboard. You manage your Minikube installation on the admin dashboard. When all the containers have the status of running , the installation is complete and you can access UrbanCode Velocity at the URL you specified in the helm chart. You can refresh the status display by using the following kubectl command: kubectl get pods . The default admin user name is admin and the default password is admin. The following Helm chart parameters are optional: apitoken A random string or GUID that is used verify the authenticity of API calls and data. ciphertoken A 32-byte Hex that is used verify the authenticity of API calls and data. hamackey A 32-byte Hex that is used verify the authenticity of API calls and data. loglevel The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off. The default is all . Parent topic: Installation roadmap","title":"Installing on Minikube"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_docker/","text":"Installing UrbanCode Velocity with Docker Compose Install UrbanCode\u2122 Velocity into the Docker Compose container orchestrator. The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, the following items are required for Docker Compose systems: Docker Compose version 17.09.0-ce, build afdb6d4 and later CPU with 4+ cores. 8GB RAM 8GB storage If you are installing the product on Red Hat Enterprise Linux\u00ae, you need RHEL 7 or later. The installation instructions describe installing the product on all supported operating systems. The downloaded executable file steps you through the installation process and sets your installation parameters. Note: UrbanCode Velocity is also available as a hosted service. In this case, IBM hosts the server for you. For more information, see the IBM Marketplace . Download the installation file for you environment . The download page has installation files for all supported platforms. The installation file contains the current version along with previous supported versions. Select the file appropriate for you environment: Linux: velocity-install-docker-compose-linux Windows: velocity-install-docker-compose-win.exe Mac OS: velocity-install-docker-compose-macos You can use a shell command to download the file. For example, if you are installing the product on Linux, you can download the file with a command like this one: wget https://public.dhe.ibm.com/software/products/UrbanCode/Veloc ity/latest/velocity-install-docker-compose-linux Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Run the downloaded executable file and respond to the prompts described in the following steps. For example, on Linux use the following shell command: ./velocity-install-docker-compose-linux When the script starts, you are prompted to accept the license. You can explicitly accept the license without viewing it by appending the following parameter to the command: ./velocity-install-docker-compose-linux **--license=accept** At the Choose a version prompt, select the product version. In addition to the most recent versions, the installation file contains earlier versions. The default value is the current version. At the Please enter your Velocity access key prompt, enter your SE version access key. If you previously installed an SE version, the already-configured key is the default value. Note: Make sure that you enter the key for the right version. At the Please enter the hostname where you will run Velocity prompt, enter the host name where users can access the Web UI. The default value is localhost . The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. At the Enter the desired port where Velocity will run prompt, enter the port number for the Web UI. The default value is 443 . At the Enter the location where the Velocity files will be installed prompt, enter the location where you want to install the product files. Complete installation by changing to the directory where you installed the product, and start Docker Compose. For example: ~/projects/velocity-se/ docker-compose up -d The UrbanCode Velocity images are pulled from Docker Hub and configured for Docker Compose. Access the UrbanCode Velocity Web UI. The URL is https://hostname:port, where hostname and port are the values that you set during installation. The initial user name is admin and the default password is admin. Installation properties are stored in the [installation_folder]/docker-compose/.env file. You can edit the properties appropriate for your environment. The env file contains a description for all installation properties, including the following properties: Access_Key The product access key obtained earlier. NGINX_HOST The domain of the URL the users will use to access Velocity. The value is usually the hostname of the virtual machine where Docker Compose is running. To complete installation, replace the supplied SSL public certificate and private key with your own copies. You can use OpenSSL to generate your own key with a command similar to the following example: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certifcate.pem Place your self-generated key and certificate in the [velocity-install-folder/docker-compose/conf/ssl folder. After you purchase the product, you receive a permanent access key, and a license key from Passport Advantage . You can apply your license at any time during the trial . Parent topic: Installation roadmap","title":"Installing onto Docker Compose"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_docker/#installing-urbancode-velocity-with-docker-compose","text":"Install UrbanCode\u2122 Velocity into the Docker Compose container orchestrator. The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, the following items are required for Docker Compose systems: Docker Compose version 17.09.0-ce, build afdb6d4 and later CPU with 4+ cores. 8GB RAM 8GB storage If you are installing the product on Red Hat Enterprise Linux\u00ae, you need RHEL 7 or later. The installation instructions describe installing the product on all supported operating systems. The downloaded executable file steps you through the installation process and sets your installation parameters. Note: UrbanCode Velocity is also available as a hosted service. In this case, IBM hosts the server for you. For more information, see the IBM Marketplace . Download the installation file for you environment . The download page has installation files for all supported platforms. The installation file contains the current version along with previous supported versions. Select the file appropriate for you environment: Linux: velocity-install-docker-compose-linux Windows: velocity-install-docker-compose-win.exe Mac OS: velocity-install-docker-compose-macos You can use a shell command to download the file. For example, if you are installing the product on Linux, you can download the file with a command like this one: wget https://public.dhe.ibm.com/software/products/UrbanCode/Veloc ity/latest/velocity-install-docker-compose-linux Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Run the downloaded executable file and respond to the prompts described in the following steps. For example, on Linux use the following shell command: ./velocity-install-docker-compose-linux When the script starts, you are prompted to accept the license. You can explicitly accept the license without viewing it by appending the following parameter to the command: ./velocity-install-docker-compose-linux **--license=accept** At the Choose a version prompt, select the product version. In addition to the most recent versions, the installation file contains earlier versions. The default value is the current version. At the Please enter your Velocity access key prompt, enter your SE version access key. If you previously installed an SE version, the already-configured key is the default value. Note: Make sure that you enter the key for the right version. At the Please enter the hostname where you will run Velocity prompt, enter the host name where users can access the Web UI. The default value is localhost . The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. At the Enter the desired port where Velocity will run prompt, enter the port number for the Web UI. The default value is 443 . At the Enter the location where the Velocity files will be installed prompt, enter the location where you want to install the product files. Complete installation by changing to the directory where you installed the product, and start Docker Compose. For example: ~/projects/velocity-se/ docker-compose up -d The UrbanCode Velocity images are pulled from Docker Hub and configured for Docker Compose. Access the UrbanCode Velocity Web UI. The URL is https://hostname:port, where hostname and port are the values that you set during installation. The initial user name is admin and the default password is admin. Installation properties are stored in the [installation_folder]/docker-compose/.env file. You can edit the properties appropriate for your environment. The env file contains a description for all installation properties, including the following properties: Access_Key The product access key obtained earlier. NGINX_HOST The domain of the URL the users will use to access Velocity. The value is usually the hostname of the virtual machine where Docker Compose is running. To complete installation, replace the supplied SSL public certificate and private key with your own copies. You can use OpenSSL to generate your own key with a command similar to the following example: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certifcate.pem Place your self-generated key and certificate in the [velocity-install-folder/docker-compose/conf/ssl folder. After you purchase the product, you receive a permanent access key, and a license key from Passport Advantage . You can apply your license at any time during the trial . Parent topic: Installation roadmap","title":"Installing UrbanCode Velocity with Docker Compose"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_kubernetes/","text":"Installing into a Kubernetes cluster You can install UrbanCode Velocity into a Kubernetes cluster. Review the System requirements before starting, and ensure that the following applications are installed in the target environment: Kubernetes 1.4+ with Beta APIs enabled MongoDB database with persistent volume Helm v2.6.0 or later. You will install UrbanCode\u2122 Velocity into a Kubernetes cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the Kubernetes clusters defined in Helm Charts. Clone the UrbanCode Velocity repository. git clone https://github.com/IBM/velocity-se Issue the following command to obtain the Helm charts used for the installation. ``` $ helm init $ helm repo add urbancode-se https://raw.githubusercontent.com/IBM/velocity-se/master/kubernetes/repo $ helm repo add ibm-stable https://raw.githubusercontent.com/IBM/charts/master/repo/stable/ $ helm repo update ``` If you do not have a MongoDB database installed, you can install one now. Go to MongoDB GitHub repository to install. Below is a sample command for installing the MongoDB. Based on your environment, you might need to modify or add to the sample command. ``` helm install \\ --set database.password=mongo \\ --set database.user=mongo \\ --set database.name=velocity \\ --name velocity-mongo ibm-stable/ibm-mongodb-dev ``` Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment. However, there are several properties that must be specified. Below are the required properties. access.key The product access key obtained from Passport Advantage. apitoken A random string or GUID that is used verify the authenticity of API calls and data. ciphertoken A 32-byte Hex that is used verify the authenticity of API calls and data. hamackey A 32-byte Hex that is used verify the authenticity of API calls and data. loglevel The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off. The default is all . mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. rabbit.url The URL of the RabbitMQ installed in the previous step. Specify the following parameters. username The user ID to authenticate with the RabbitMQ server. password The associated password to authenticate with the RabbitMQ server. port The port number for the RabbitMQ server. Use the value shown in the example, which is 5672. service_name The RabbitMQ URL or the RabbitMQ service name if it is running within the Kubernetes cluster. url.domain The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name. Run the helm install command to install the UrbanCode Velocity images into your Kubernetes cluster. The following example shows the required configuration properties, depending on your environment other might be required. ``` helm install \\ --set access.key=access_key \\ --set url.domain=hostname \\ --set mongo.url=mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin \\ --set rabbitmq.url=amqp://rabbit:carrot@velocity-rabbitmq:5672/ \\ --name velocity-se urbancode-se/velocity ``` Access the administrator user interface to complete the configuration. Refer to the NOTES section displayed after the helm install command completes for the location of the administrator user interface. The user name is admin and the default password is admin.","title":"Installing into a Kubernetes cluster"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_kubernetes/#installing-into-a-kubernetes-cluster","text":"You can install UrbanCode Velocity into a Kubernetes cluster. Review the System requirements before starting, and ensure that the following applications are installed in the target environment: Kubernetes 1.4+ with Beta APIs enabled MongoDB database with persistent volume Helm v2.6.0 or later. You will install UrbanCode\u2122 Velocity into a Kubernetes cluster using Helm commands. The commands pull the UrbanCode Velocity node images from a GitHub repository and places them into the Kubernetes clusters defined in Helm Charts. Clone the UrbanCode Velocity repository. git clone https://github.com/IBM/velocity-se Issue the following command to obtain the Helm charts used for the installation. ``` $ helm init $ helm repo add urbancode-se https://raw.githubusercontent.com/IBM/velocity-se/master/kubernetes/repo $ helm repo add ibm-stable https://raw.githubusercontent.com/IBM/charts/master/repo/stable/ $ helm repo update ``` If you do not have a MongoDB database installed, you can install one now. Go to MongoDB GitHub repository to install. Below is a sample command for installing the MongoDB. Based on your environment, you might need to modify or add to the sample command. ``` helm install \\ --set database.password=mongo \\ --set database.user=mongo \\ --set database.name=velocity \\ --name velocity-mongo ibm-stable/ibm-mongodb-dev ``` Determine the configuration properties to specify. You can customize the installation by specifying configuration properties on the helm install command. Some of the properties that you specify are dependent on your environment. However, there are several properties that must be specified. Below are the required properties. access.key The product access key obtained from Passport Advantage. apitoken A random string or GUID that is used verify the authenticity of API calls and data. ciphertoken A 32-byte Hex that is used verify the authenticity of API calls and data. hamackey A 32-byte Hex that is used verify the authenticity of API calls and data. loglevel The level of logging. Values for this property are: all, debug, info, warn, error, fatal, and off. The default is all . mongo.url The URL of the MongoDB. Specify the following parameters. username The user ID to authenticate with the MongoDB database. password The associated password to authenticate with the MongoDB database. port The port number for the MongoDB database. Use the value shown in the example, which is 27017. service_name The MongoDB URL or the MongoDB service name if it is running within the Kubernetes cluster. database_name The name of the database to be used by UrbanCode\u2122 Velocity. Note: If you used the install command in the previous step to install the MongoDB, use the following values for the mongo.url property. mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin If you use the default IBM MongoDB, make sure to grant the MongoDB user full write privileges. rabbit.url The URL of the RabbitMQ installed in the previous step. Specify the following parameters. username The user ID to authenticate with the RabbitMQ server. password The associated password to authenticate with the RabbitMQ server. port The port number for the RabbitMQ server. Use the value shown in the example, which is 5672. service_name The RabbitMQ URL or the RabbitMQ service name if it is running within the Kubernetes cluster. url.domain The hostname of your Kubernetes master node or the Ingress host name. If there is a reverse proxy in front of the Kubernetes cluster, it becomes the domain name. Run the helm install command to install the UrbanCode Velocity images into your Kubernetes cluster. The following example shows the required configuration properties, depending on your environment other might be required. ``` helm install \\ --set access.key=access_key \\ --set url.domain=hostname \\ --set mongo.url=mongodb://mongo:mongo@velocity-mongo-ibm-mongodb-dev:27017/admin \\ --set rabbitmq.url=amqp://rabbit:carrot@velocity-rabbitmq:5672/ \\ --name velocity-se urbancode-se/velocity ``` Access the administrator user interface to complete the configuration. Refer to the NOTES section displayed after the helm install command completes for the location of the administrator user interface. The user name is admin and the default password is admin.","title":"Installing into a Kubernetes cluster"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_openShift/","text":"Installing as an OpenShift application The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, you need the following items: Configured OpenShift client instance. This topic uses Minishift for local instance installations. OpenShift command line tool, OC, installed on the client. Access to the PEM-format certificate and private key that you can use to configure an OpenShift route. Master node: 2 vCPU, 8 GB RAM, 30 GB storage. Other nodes: 1vCPU, 8 GB RAM, 15 GB storage. You will install UrbanCode Velocity into a OpenShift project. During installation, you configure a MongoDB for your project, and add the UrbanCode Velocity service to your OpenShift project catalog. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Configure the containers to be run by root user. Several service containers require the admin user. From the OpenShift client command line, run the following commands: oc login -u system:admin -n default oc adm policy add-scc-to-group anyuid system:authenticated From the OpenShift dashboard, create a project for UrbanCode Velocity. When the project is created, in the My Projects area, select the project, and then click Browse Catalog . Install the UrbanCode Velocity service in the project catalog by completing the following steps:. Download the UrbanCode Velocity template for OpenShift . The file is named velocity-se-1-1-0-openshift.yaml From OpenShift project catalog, use the Add to Project > Import YAML/JSON command to import the service into the catalog Select Create , than check Save Template and uncheck Process the Template . After refreshing the browser, you will see the UrbanCode Velocity service in the OpenShift project catalog. Create a MongoDB service for the project by completing the following steps: From the OpenShift project catalog, select MongoDB . On the MongoDB configuration page, in the MongoDB Admin Password field, enter a password for admin user. You can accept the default values for the other parameters. Note: The user must be the admin user. Click Create . On the MogoDB has been created page, copy the Connection URL string and store it in a readily-accessible location, then close configuration window. You use the connection string to configure your UrbanCode Velocity project. Create UrbanCode Velocity service by completing these steps. From project catalog, select Velocity . The Velocity configuration window is displayed. Click Next , and then, in the Name field, enter a service name. In the Hostname field, enter the service host name. The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. In the Access Key field, paste the UrbanCode Velocity access key received earlier. In the Mongo URL field, paste MongoDB connection string for the MongoDB service. Do not use the default user or database name. Use the admin user and password you created for the admin. For example: mongo://admin:password@mongodb If you do not want to use the admin user, log on to the MongoDB and use a command similar to this one to grant admin permissions to the user: ``` db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) ``` Accept the default values for the other parameters and click Create . From project dashboard, click Applications > Routes > Create Route , and then create a route by completing the following steps: In the Name field, provide a name for the route. In the Hostname field, enter the host name you specified earlier for UrbanCode Velocity. In the Service field, select the velocity-router service. Check Secure route and then upload your PEM-format certificate and key into the fields provided for them. Click Create . The new route is listed on the Routes page. After the installation is complete, access UrbanCode Velocity by clicking the route name link. The default user name is admin and the default password is admin. Parent topic: Installation roadmap","title":"Installing onto OpenShift"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_openShift/#installing-as-an-openshift-application","text":"The ID that you use must be able to make changes to the host environment. The tools required by all installation scenarios include the following items: Docker. The commands used during installation retrieve files and container images from remote locations. If you are unable to access the internet during installation, the install images will need to have been previously downloaded and placed in a Docker repository that the installation commands can access. IBM UrbanCode\u2122 Deploy Version 6.2.3 and later. Although not strictly required, many UrbanCode\u2122 Velocity features assume integration with UrbanCode Deploy. It doesn't matter which product you install first. If you are using an UrbanCode Deploy version prior to V6.2.5, you must install the patch located at the following website: http://public.dhe.ibm.com/software/products/UrbanCode/plugins/ucsync/patches/ibmucd/ . Select from the index the appropriate version that is installed on your computer. UrbanCode Velocity can connect to an UrbanCode Deploy server on the same network. If you install UrbanCode Velocity with Kubernetes, the Kubernetes cluster must be on the same network as the UrbanCode Deploy server. Git and a GitHub account. In addition to the requirements for all installation scenarios, you need the following items: Configured OpenShift client instance. This topic uses Minishift for local instance installations. OpenShift command line tool, OC, installed on the client. Access to the PEM-format certificate and private key that you can use to configure an OpenShift route. Master node: 2 vCPU, 8 GB RAM, 30 GB storage. Other nodes: 1vCPU, 8 GB RAM, 15 GB storage. You will install UrbanCode Velocity into a OpenShift project. During installation, you configure a MongoDB for your project, and add the UrbanCode Velocity service to your OpenShift project catalog. Get an access key. The access key enables you to complete installation. Visit the UrbanCode Velocity web portal to obtain your key . After completing the form, you can copy the access key. Store the key in a readily-available location; you use it during installation. Note: Make sure that you select a key for the product version that you want to install. Keys for the Standard Edition do not work with the Community Edition and vice-versa. Configure the containers to be run by root user. Several service containers require the admin user. From the OpenShift client command line, run the following commands: oc login -u system:admin -n default oc adm policy add-scc-to-group anyuid system:authenticated From the OpenShift dashboard, create a project for UrbanCode Velocity. When the project is created, in the My Projects area, select the project, and then click Browse Catalog . Install the UrbanCode Velocity service in the project catalog by completing the following steps:. Download the UrbanCode Velocity template for OpenShift . The file is named velocity-se-1-1-0-openshift.yaml From OpenShift project catalog, use the Add to Project > Import YAML/JSON command to import the service into the catalog Select Create , than check Save Template and uncheck Process the Template . After refreshing the browser, you will see the UrbanCode Velocity service in the OpenShift project catalog. Create a MongoDB service for the project by completing the following steps: From the OpenShift project catalog, select MongoDB . On the MongoDB configuration page, in the MongoDB Admin Password field, enter a password for admin user. You can accept the default values for the other parameters. Note: The user must be the admin user. Click Create . On the MogoDB has been created page, copy the Connection URL string and store it in a readily-accessible location, then close configuration window. You use the connection string to configure your UrbanCode Velocity project. Create UrbanCode Velocity service by completing these steps. From project catalog, select Velocity . The Velocity configuration window is displayed. Click Next , and then, in the Name field, enter a service name. In the Hostname field, enter the service host name. The host name must resolve to a name on your DNS server, or in the server's hosts file. On Linux, the file location is etc/hosts; on Windows, the location is C:\\Windows\\System32\\drivers\\etc\\hosts. In the Access Key field, paste the UrbanCode Velocity access key received earlier. In the Mongo URL field, paste MongoDB connection string for the MongoDB service. Do not use the default user or database name. Use the admin user and password you created for the admin. For example: mongo://admin:password@mongodb If you do not want to use the admin user, log on to the MongoDB and use a command similar to this one to grant admin permissions to the user: ``` db.grantRolesToUser( \"mongo\", [\"readWriteAnyDatabase\", \"dbAdminAnyDatabase\", \"clusterAdmin\"] ) ``` Accept the default values for the other parameters and click Create . From project dashboard, click Applications > Routes > Create Route , and then create a route by completing the following steps: In the Name field, provide a name for the route. In the Hostname field, enter the host name you specified earlier for UrbanCode Velocity. In the Service field, select the velocity-router service. Check Secure route and then upload your PEM-format certificate and key into the fields provided for them. Click Create . The new route is listed on the Routes page. After the installation is complete, access UrbanCode Velocity by clicking the route name link. The default user name is admin and the default password is admin. Parent topic: Installation roadmap","title":"Installing as an OpenShift application"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_remove_ucv/","text":"Uninstalling the server You can uninstall UrbanCode Velocity by stopping the server and removing the product containers. Data is not affected when removing the containers as long as your volume is persistent. Uninstalling the product is necessary when you have a new version of the product images that you want to install. Remove the product using the appropriate command listed below. Docker Compose ``` docker-compose stop docker-compose rm ``` Kubernetes helm delete velocity-se --purge Parent topic: Installation roadmap","title":"Uninstalling the server"},{"location":"com.ibm.uvelocity.doc/topics/t_install_se_remove_ucv/#uninstalling-the-server","text":"You can uninstall UrbanCode Velocity by stopping the server and removing the product containers. Data is not affected when removing the containers as long as your volume is persistent. Uninstalling the product is necessary when you have a new version of the product images that you want to install. Remove the product using the appropriate command listed below. Docker Compose ``` docker-compose stop docker-compose rm ``` Kubernetes helm delete velocity-se --purge Parent topic: Installation roadmap","title":"Uninstalling the server"},{"location":"com.ibm.uvelocity.doc/topics/t_integration_Jenkins/","text":"Configuring Jenkins integrations Manage Jenkins jobs with your deployments and pipelines. Obtain the UrbanCode Velocity plug-in and install it in your Jenkins instance. On the Jenkins Plug-in page search for velocity or UrbanCode . Complete the integration by pasting the UrbanCode Velocity credentials into Jenkins. Note: In Jenkins, you must have admin privileges to install the plug-in. This configuration makes Jenkins jobs available to pipelines and deployment plans. You can run Jenkins jobs with UrbanCode Velocity and use the output in later tasks. After you configure an integration, add Jenkins tasks to deployment plans and pipeline stages. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select Jenkins . In the Setup Jenkins Integration window, in the Name field, enter a name for the integrations. In the Integration ID field, copy the ID and then paste it into the corresponding field in your Jenkins instance, Manage Jenkins > Configure System > UrbanCode Velocity . In the Integration token field, copy the token and then paste it into the corresponding field in Jenkins. Click Save . Depending on the amount of data,the initial integration can take some time. Synchronization occurs every minute. To prevent synchronization, select Disable on the Integration page. After the initial integration, you can add Jenkins tasks to deployment plans and select any of the integrated jobs. Similarly, you can add Jenkins jobs to pipeline stages. Parent topic: Managing integrations","title":"Managing Jenkins integrations"},{"location":"com.ibm.uvelocity.doc/topics/t_integration_Jenkins/#configuring-jenkins-integrations","text":"Manage Jenkins jobs with your deployments and pipelines. Obtain the UrbanCode Velocity plug-in and install it in your Jenkins instance. On the Jenkins Plug-in page search for velocity or UrbanCode . Complete the integration by pasting the UrbanCode Velocity credentials into Jenkins. Note: In Jenkins, you must have admin privileges to install the plug-in. This configuration makes Jenkins jobs available to pipelines and deployment plans. You can run Jenkins jobs with UrbanCode Velocity and use the output in later tasks. After you configure an integration, add Jenkins tasks to deployment plans and pipeline stages. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select Jenkins . In the Setup Jenkins Integration window, in the Name field, enter a name for the integrations. In the Integration ID field, copy the ID and then paste it into the corresponding field in your Jenkins instance, Manage Jenkins > Configure System > UrbanCode Velocity . In the Integration token field, copy the token and then paste it into the corresponding field in Jenkins. Click Save . Depending on the amount of data,the initial integration can take some time. Synchronization occurs every minute. To prevent synchronization, select Disable on the Integration page. After the initial integration, you can add Jenkins tasks to deployment plans and select any of the integrated jobs. Similarly, you can add Jenkins jobs to pipeline stages. Parent topic: Managing integrations","title":"Configuring Jenkins integrations"},{"location":"com.ibm.uvelocity.doc/topics/t_integration_UCD/","text":"Configuring UrbanCode Deploy integrations Use UrbanCode Deploy applications in your deployments and pipelines. Obtain a token from your Urban Code Deploy server. When you create the UrbanCode\u2122 Deploy token, specify admin as the user. This task requires that you are an UrbanCode Velocity administrator. After you configure an integration, create tasks to run UrbanCode Deploy applications during your deployments . You can also add applications to your pipeline stages and run them that way. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select UrbanCode Deploy . In the Add UrbanCode Deploy Integration window, enter a name for the integrations, and in the UrbanCode Deploy server URL field, define the URL. The format is HTTPS://hostname:port . For example, HTTPS://sampleUCD:8443 . Note: If you are running UrbanCode Deploy locally, you can substitute HTTPS://host.docker.internal:port in place of localhost . In the UrbanCode Deploy access token field, paste the token from UrbanCode Deploy. Click Save . The initial synchronization includes four months of data. Depending on the amount of data, this process can take some time. Synchronization occurs every fifteen minutes but you can synchronize any time by selecting Resync on the Integration page. To prevent synchronization, select Disable on the Integration page. Parent topic: Managing integrations","title":"Managing UrbanCode Deploy integrations"},{"location":"com.ibm.uvelocity.doc/topics/t_integration_UCD/#configuring-urbancode-deploy-integrations","text":"Use UrbanCode Deploy applications in your deployments and pipelines. Obtain a token from your Urban Code Deploy server. When you create the UrbanCode\u2122 Deploy token, specify admin as the user. This task requires that you are an UrbanCode Velocity administrator. After you configure an integration, create tasks to run UrbanCode Deploy applications during your deployments . You can also add applications to your pipeline stages and run them that way. Click Settings > Integration . A list of defined integrations with current information about each integration is displayed in a table. Click Add Integration , and then select UrbanCode Deploy . In the Add UrbanCode Deploy Integration window, enter a name for the integrations, and in the UrbanCode Deploy server URL field, define the URL. The format is HTTPS://hostname:port . For example, HTTPS://sampleUCD:8443 . Note: If you are running UrbanCode Deploy locally, you can substitute HTTPS://host.docker.internal:port in place of localhost . In the UrbanCode Deploy access token field, paste the token from UrbanCode Deploy. Click Save . The initial synchronization includes four months of data. Depending on the amount of data, this process can take some time. Synchronization occurs every fifteen minutes but you can synchronize any time by selecting Resync on the Integration page. To prevent synchronization, select Disable on the Integration page. Parent topic: Managing integrations","title":"Configuring UrbanCode Deploy integrations"}]}